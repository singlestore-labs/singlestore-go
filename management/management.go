// Package management provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.1 DO NOT EDIT.
package management

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for AuditLogSource.
const (
	Admin     AuditLogSource = "Admin"
	Portal    AuditLogSource = "Portal"
	SystemJob AuditLogSource = "SystemJob"
)

// Defines values for AuditLogUserType.
const (
	AuditLogUserTypeAutomation    AuditLogUserType = "Automation"
	AuditLogUserTypeCIAutomation  AuditLogUserType = "CIAutomation"
	AuditLogUserTypeCluster       AuditLogUserType = "Cluster"
	AuditLogUserTypeCustomer      AuditLogUserType = "Customer"
	AuditLogUserTypeEmployee      AuditLogUserType = "Employee"
	AuditLogUserTypeNimbusGateway AuditLogUserType = "NimbusGateway"
	AuditLogUserTypeSNIProxy      AuditLogUserType = "SNIProxy"
	AuditLogUserTypeSharedTier    AuditLogUserType = "SharedTier"
	AuditLogUserTypeStudio        AuditLogUserType = "Studio"
	AuditLogUserTypeSystem        AuditLogUserType = "System"
	AuditLogUserTypeUnspecified   AuditLogUserType = "Unspecified"
)

// Defines values for ExecutionStatus.
const (
	ExecutionStatusCanceled  ExecutionStatus = "Canceled"
	ExecutionStatusCompleted ExecutionStatus = "Completed"
	ExecutionStatusError     ExecutionStatus = "Error"
	ExecutionStatusFailed    ExecutionStatus = "Failed"
	ExecutionStatusRunning   ExecutionStatus = "Running"
	ExecutionStatusScheduled ExecutionStatus = "Scheduled"
	ExecutionStatusUnknown   ExecutionStatus = "Unknown"
)

// Defines values for FileLocationSchema.
const (
	Models   FileLocationSchema = "models"
	Personal FileLocationSchema = "personal"
	Shared   FileLocationSchema = "shared"
)

// Defines values for FileObjectMetadataFormat.
const (
	FileObjectMetadataFormatJson FileObjectMetadataFormat = "json"
)

// Defines values for FileObjectMetadataType.
const (
	FileObjectMetadataTypeDirectory FileObjectMetadataType = "directory"
	FileObjectMetadataTypeEmpty     FileObjectMetadataType = ""
	FileObjectMetadataTypeJson      FileObjectMetadataType = "json"
)

// Defines values for JobMetadataStatus.
const (
	JobMetadataStatusCanceled  JobMetadataStatus = "Canceled"
	JobMetadataStatusCompleted JobMetadataStatus = "Completed"
	JobMetadataStatusError     JobMetadataStatus = "Error"
	JobMetadataStatusFailed    JobMetadataStatus = "Failed"
	JobMetadataStatusRunning   JobMetadataStatus = "Running"
	JobMetadataStatusScheduled JobMetadataStatus = "Scheduled"
	JobMetadataStatusUnknown   JobMetadataStatus = "Unknown"
)

// Defines values for JobParameterType.
const (
	Boolean JobParameterType = "boolean"
	Float   JobParameterType = "float"
	Integer JobParameterType = "integer"
	String  JobParameterType = "string"
)

// Defines values for JobScheduleMode.
const (
	Once      JobScheduleMode = "Once"
	Recurring JobScheduleMode = "Recurring"
)

// Defines values for JobTargetConfigTargetType.
const (
	JobTargetConfigTargetTypeCluster          JobTargetConfigTargetType = "Cluster"
	JobTargetConfigTargetTypeVirtualWorkspace JobTargetConfigTargetType = "VirtualWorkspace"
	JobTargetConfigTargetTypeWorkspace        JobTargetConfigTargetType = "Workspace"
)

// Defines values for PrivateConnectionStatus.
const (
	PrivateConnectionStatusACTIVE  PrivateConnectionStatus = "ACTIVE"
	PrivateConnectionStatusDELETED PrivateConnectionStatus = "DELETED"
	PrivateConnectionStatusPENDING PrivateConnectionStatus = "PENDING"
)

// Defines values for PrivateConnectionType.
const (
	PrivateConnectionTypeINBOUND  PrivateConnectionType = "INBOUND"
	PrivateConnectionTypeOUTBOUND PrivateConnectionType = "OUTBOUND"
)

// Defines values for PrivateConnectionCreateType.
const (
	PrivateConnectionCreateTypeINBOUND  PrivateConnectionCreateType = "INBOUND"
	PrivateConnectionCreateTypeOUTBOUND PrivateConnectionCreateType = "OUTBOUND"
)

// Defines values for RegionProvider.
const (
	RegionProviderAWS   RegionProvider = "AWS"
	RegionProviderAzure RegionProvider = "Azure"
	RegionProviderGCP   RegionProvider = "GCP"
)

// Defines values for RegionV2Provider.
const (
	RegionV2ProviderAWS   RegionV2Provider = "AWS"
	RegionV2ProviderAzure RegionV2Provider = "Azure"
	RegionV2ProviderGCP   RegionV2Provider = "GCP"
)

// Defines values for ReplicatedDatabaseDuplicationState.
const (
	ReplicatedDatabaseDuplicationStateActive   ReplicatedDatabaseDuplicationState = "Active"
	ReplicatedDatabaseDuplicationStateError    ReplicatedDatabaseDuplicationState = "Error"
	ReplicatedDatabaseDuplicationStateInactive ReplicatedDatabaseDuplicationState = "Inactive"
	ReplicatedDatabaseDuplicationStatePending  ReplicatedDatabaseDuplicationState = "Pending"
)

// Defines values for SharedTierCreateVirtualWorkspaceProvider.
const (
	SharedTierCreateVirtualWorkspaceProviderAWS   SharedTierCreateVirtualWorkspaceProvider = "AWS"
	SharedTierCreateVirtualWorkspaceProviderAZURE SharedTierCreateVirtualWorkspaceProvider = "AZURE"
	SharedTierCreateVirtualWorkspaceProviderGCP   SharedTierCreateVirtualWorkspaceProvider = "GCP"
)

// Defines values for StorageDRStatusComputeStorageDRState.
const (
	StorageDRStatusComputeStorageDRStateActive    StorageDRStatusComputeStorageDRState = "Active"
	StorageDRStatusComputeStorageDRStateCanceled  StorageDRStatusComputeStorageDRState = "Canceled"
	StorageDRStatusComputeStorageDRStateCompleted StorageDRStatusComputeStorageDRState = "Completed"
	StorageDRStatusComputeStorageDRStateExpired   StorageDRStatusComputeStorageDRState = "Expired"
	StorageDRStatusComputeStorageDRStateFailed    StorageDRStatusComputeStorageDRState = "Failed"
)

// Defines values for StorageDRStatusComputeStorageDRType.
const (
	Failback          StorageDRStatusComputeStorageDRType = "Failback"
	Failover          StorageDRStatusComputeStorageDRType = "Failover"
	PreProvisionStart StorageDRStatusComputeStorageDRType = "PreProvisionStart"
	PreProvisionStop  StorageDRStatusComputeStorageDRType = "PreProvisionStop"
)

// Defines values for UserInvitationState.
const (
	Accepted UserInvitationState = "Accepted"
	Pending  UserInvitationState = "Pending"
	Refused  UserInvitationState = "Refused"
	Revoked  UserInvitationState = "Revoked"
)

// Defines values for WorkspaceAutoSuspendSuspendType.
const (
	WorkspaceAutoSuspendSuspendTypeIDLE      WorkspaceAutoSuspendSuspendType = "IDLE"
	WorkspaceAutoSuspendSuspendTypeSCHEDULED WorkspaceAutoSuspendSuspendType = "SCHEDULED"
)

// Defines values for WorkspaceDeploymentType.
const (
	WorkspaceDeploymentTypeNONPRODUCTION WorkspaceDeploymentType = "NON-PRODUCTION"
	WorkspaceDeploymentTypePRODUCTION    WorkspaceDeploymentType = "PRODUCTION"
)

// Defines values for WorkspaceResumeAttachmentsAttachment.
const (
	READONLY  WorkspaceResumeAttachmentsAttachment = "READONLY"
	READWRITE WorkspaceResumeAttachmentsAttachment = "READWRITE"
)

// Defines values for WorkspaceState.
const (
	WorkspaceStateACTIVE     WorkspaceState = "ACTIVE"
	WorkspaceStateFAILED     WorkspaceState = "FAILED"
	WorkspaceStatePENDING    WorkspaceState = "PENDING"
	WorkspaceStateSUSPENDED  WorkspaceState = "SUSPENDED"
	WorkspaceStateTERMINATED WorkspaceState = "TERMINATED"
)

// Defines values for WorkspaceCreateAutoSuspendSuspendType.
const (
	WorkspaceCreateAutoSuspendSuspendTypeDISABLED  WorkspaceCreateAutoSuspendSuspendType = "DISABLED"
	WorkspaceCreateAutoSuspendSuspendTypeIDLE      WorkspaceCreateAutoSuspendSuspendType = "IDLE"
	WorkspaceCreateAutoSuspendSuspendTypeSCHEDULED WorkspaceCreateAutoSuspendSuspendType = "SCHEDULED"
)

// Defines values for WorkspaceGroupDeploymentType.
const (
	WorkspaceGroupDeploymentTypeNONPRODUCTION WorkspaceGroupDeploymentType = "NON-PRODUCTION"
	WorkspaceGroupDeploymentTypePRODUCTION    WorkspaceGroupDeploymentType = "PRODUCTION"
)

// Defines values for WorkspaceGroupProvider.
const (
	WorkspaceGroupProviderAWS   WorkspaceGroupProvider = "AWS"
	WorkspaceGroupProviderAZURE WorkspaceGroupProvider = "AZURE"
	WorkspaceGroupProviderGCP   WorkspaceGroupProvider = "GCP"
)

// Defines values for WorkspaceGroupSmartDRStatus.
const (
	WorkspaceGroupSmartDRStatusACTIVE  WorkspaceGroupSmartDRStatus = "ACTIVE"
	WorkspaceGroupSmartDRStatusSTANDBY WorkspaceGroupSmartDRStatus = "STANDBY"
)

// Defines values for WorkspaceGroupState.
const (
	WorkspaceGroupStateACTIVE     WorkspaceGroupState = "ACTIVE"
	WorkspaceGroupStateFAILED     WorkspaceGroupState = "FAILED"
	WorkspaceGroupStatePENDING    WorkspaceGroupState = "PENDING"
	WorkspaceGroupStateTERMINATED WorkspaceGroupState = "TERMINATED"
)

// Defines values for WorkspaceGroupCreateDeploymentType.
const (
	WorkspaceGroupCreateDeploymentTypeNONPRODUCTION WorkspaceGroupCreateDeploymentType = "NON-PRODUCTION"
	WorkspaceGroupCreateDeploymentTypePRODUCTION    WorkspaceGroupCreateDeploymentType = "PRODUCTION"
)

// Defines values for WorkspaceGroupCreateProvider.
const (
	AWS   WorkspaceGroupCreateProvider = "AWS"
	Azure WorkspaceGroupCreateProvider = "Azure"
	GCP   WorkspaceGroupCreateProvider = "GCP"
)

// Defines values for WorkspaceGroupUpdateDeploymentType.
const (
	WorkspaceGroupUpdateDeploymentTypeNONPRODUCTION WorkspaceGroupUpdateDeploymentType = "NON-PRODUCTION"
	WorkspaceGroupUpdateDeploymentTypePRODUCTION    WorkspaceGroupUpdateDeploymentType = "PRODUCTION"
)

// Defines values for WorkspaceUpdateAutoScaleSensitivity.
const (
	HIGH   WorkspaceUpdateAutoScaleSensitivity = "HIGH"
	LOW    WorkspaceUpdateAutoScaleSensitivity = "LOW"
	NORMAL WorkspaceUpdateAutoScaleSensitivity = "NORMAL"
)

// Defines values for WorkspaceUpdateAutoSuspendSuspendType.
const (
	DISABLED  WorkspaceUpdateAutoSuspendSuspendType = "DISABLED"
	IDLE      WorkspaceUpdateAutoSuspendSuspendType = "IDLE"
	SCHEDULED WorkspaceUpdateAutoSuspendSuspendType = "SCHEDULED"
)

// Defines values for WorkspaceUpdateDeploymentType.
const (
	NONPRODUCTION WorkspaceUpdateDeploymentType = "NON-PRODUCTION"
	PRODUCTION    WorkspaceUpdateDeploymentType = "PRODUCTION"
)

// Defines values for WorkspaceUpdateEnableKai.
const (
	False WorkspaceUpdateEnableKai = false
	True  WorkspaceUpdateEnableKai = true
)

// Defines values for GetV1BillingUsageParamsMetric.
const (
	ComputeCredit  GetV1BillingUsageParamsMetric = "ComputeCredit"
	StorageAvgByte GetV1BillingUsageParamsMetric = "StorageAvgByte"
)

// Defines values for GetV1BillingUsageParamsAggregateBy.
const (
	Day   GetV1BillingUsageParamsAggregateBy = "day"
	Hour  GetV1BillingUsageParamsAggregateBy = "hour"
	Month GetV1BillingUsageParamsAggregateBy = "month"
)

// AuditLog Represents an audit log entry
type AuditLog struct {
	// Attributes additional keys and values that are specific to the audit log type
	Attributes *map[string]interface{} `json:"attributes,omitempty"`
	AuditID    *openapi_types.UUID     `json:"auditID,omitempty"`

	// ClusterID The database cluster tied to this event
	ClusterID *openapi_types.UUID `json:"clusterID,omitempty"`

	// CreatedAt The timestamp of when the audit log entry was created in RFC3339Nano format
	CreatedAt *string `json:"createdAt,omitempty"`

	// Error text error message, if any relating to this entry
	Error *string `json:"error,omitempty"`

	// FirstName The first name of a redacted user
	FirstName *string `json:"firstName,omitempty"`

	// Labels A list of audit keywords
	Labels *[]string `json:"labels,omitempty"`

	// LastName The last name of a redacted user
	LastName *string `json:"lastName,omitempty"`

	// OrgID The organization tied to this event
	OrgID *openapi_types.UUID `json:"orgID,omitempty"`

	// ProjectID The project id tied to this event
	ProjectID *openapi_types.UUID `json:"projectID,omitempty"`

	// Reason A human-readable description of what happened
	Reason *string `json:"reason,omitempty"`

	// SessionID the authorization session id tied to this event
	SessionID *openapi_types.UUID `json:"sessionID,omitempty"`

	// Source The audit log entry source
	Source *AuditLogSource `json:"source,omitempty"`

	// TeamID The tem id tied to this event
	TeamID *openapi_types.UUID `json:"teamID,omitempty"`

	// Type The audit log entry type
	Type *string `json:"type,omitempty"`

	// UserEmail The user email address
	UserEmail *string `json:"userEmail,omitempty"`

	// UserID The user ID
	UserID *string `json:"userID,omitempty"`

	// UserType the type of user that triggered the audit log entry
	UserType *AuditLogUserType `json:"userType,omitempty"`

	// WorkspaceID The workspace id tied to this event
	WorkspaceID *openapi_types.UUID `json:"workspaceID,omitempty"`
}

// AuditLogSource The audit log entry source
type AuditLogSource string

// AuditLogUserType the type of user that triggered the audit log entry
type AuditLogUserType string

// BillingUsage Represents the information related to billing usage
type BillingUsage struct {
	// Description A description of what the metric represents
	Description *string `json:"description,omitempty"`

	// Metric The metric type
	Metric *string `json:"metric,omitempty"`

	// Usage Usage information
	Usage *[]struct {
		// EndTime The end time of the interval
		EndTime *string `json:"endTime,omitempty"`

		// OwnerId ID of the owner of the resource
		OwnerId *string `json:"ownerId,omitempty"`

		// ResourceId ID of the resource
		ResourceId *string `json:"resourceId,omitempty"`

		// ResourceName Name of the resource
		ResourceName *string `json:"resourceName,omitempty"`

		// ResourceType The resource type
		ResourceType *string `json:"resourceType,omitempty"`

		// StartTime The start time of the interval
		StartTime *string `json:"startTime,omitempty"`

		// Value Resource usage value
		Value *string `json:"value,omitempty"`
	} `json:"usage,omitempty"`
}

// ControlAccessAction defines model for ControlAccessAction.
type ControlAccessAction struct {
	Grants  []ControlAccessRole `json:"grants"`
	Revokes []ControlAccessRole `json:"revokes"`
}

// ControlAccessRole defines model for ControlAccessRole.
type ControlAccessRole struct {
	Role  string               `json:"role"`
	Teams []openapi_types.UUID `json:"teams"`
	Users []openapi_types.UUID `json:"users"`
}

// Execution defines model for Execution.
type Execution struct {
	// ExecutionID The ID of execution
	ExecutionID openapi_types.UUID `json:"executionID"`

	// ExecutionNumber Number of the execution
	ExecutionNumber float32 `json:"executionNumber"`

	// FinishedAt Finish time of the execution
	FinishedAt *time.Time `json:"finishedAt"`

	// JobID ID of the job that this execution belongs to
	JobID openapi_types.UUID `json:"jobID"`

	// ScheduledStartTime Scheduled start time of the execution
	ScheduledStartTime time.Time `json:"scheduledStartTime"`

	// SnapshotNotebookPath Path to the notebook which captures the result of this execution
	SnapshotNotebookPath *string `json:"snapshotNotebookPath"`

	// StartedAt Actual start time of the execution
	StartedAt *time.Time      `json:"startedAt"`
	Status    ExecutionStatus `json:"status"`
}

// ExecutionStatus defines model for Execution.Status.
type ExecutionStatus string

// ExecutionsMetadata defines model for ExecutionsMetadata.
type ExecutionsMetadata struct {
	EndExecutionNumber   float32 `json:"endExecutionNumber"`
	StartExecutionNumber float32 `json:"startExecutionNumber"`
}

// ExecutionsResult defines model for ExecutionsResult.
type ExecutionsResult struct {
	Executions         []Execution        `json:"executions"`
	ExecutionsMetadata ExecutionsMetadata `json:"executionsMetadata"`
}

// FileLocationSchema The file location can be one of 'personal', 'shared' or 'models'
type FileLocationSchema string

// FileObjectMetadata Represents the metadata corresponding to a file object
type FileObjectMetadata struct {
	Content *FileObjectMetadata_Content `json:"content,omitempty"`
	Created *string                     `json:"created,omitempty"`

	// Format Format of the response
	Format       *FileObjectMetadataFormat `json:"format"`
	LastModified *string                   `json:"last_modified,omitempty"`
	Mimetype     *string                   `json:"mimetype,omitempty"`

	// Name Name of the file object
	Name *string `json:"name,omitempty"`

	// Path Path of the file object
	Path *string `json:"path,omitempty"`
	Size *int    `json:"size,omitempty"`

	// Type Object type
	Type     *FileObjectMetadataType `json:"type"`
	Writable *bool                   `json:"writable,omitempty"`
}

// FileObjectMetadataContent0 defines model for .
type FileObjectMetadataContent0 = string

// FileObjectMetadataContent1 defines model for .
type FileObjectMetadataContent1 = []FileObjectMetadata

// FileObjectMetadata_Content defines model for FileObjectMetadata.Content.
type FileObjectMetadata_Content struct {
	union json.RawMessage
}

// FileObjectMetadataFormat Format of the response
type FileObjectMetadataFormat string

// FileObjectMetadataType Object type
type FileObjectMetadataType string

// IdentityRole defines model for IdentityRole.
type IdentityRole struct {
	// ResourceID The resource id
	ResourceID openapi_types.UUID `json:"resourceID"`

	// ResourceType The resource type
	ResourceType string `json:"resourceType"`

	// Role The role can access the resource
	Role string `json:"role"`
}

// Job defines model for Job.
type Job struct {
	// CompletedExecutionsCount Count of completed executions for the job
	CompletedExecutionsCount int `json:"completedExecutionsCount"`

	// CreatedAt Creation time of the job
	CreatedAt time.Time `json:"createdAt"`

	// Description Description of the job
	Description *string `json:"description"`

	// EnqueuedBy ID of the user who created the job
	EnqueuedBy      openapi_types.UUID `json:"enqueuedBy"`
	ExecutionConfig JobExecutionConfig `json:"executionConfig"`

	// JobID ID of the job
	JobID openapi_types.UUID `json:"jobID"`

	// JobMetadata Array containing information about the max/avg execution duration and the number of executions with a particular status for the job
	JobMetadata []JobMetadata `json:"jobMetadata"`

	// Name Name of the job
	Name         *string          `json:"name"`
	Schedule     JobSchedule      `json:"schedule"`
	TargetConfig *JobTargetConfig `json:"targetConfig"`

	// TerminatedAt Termination time of the job
	TerminatedAt *time.Time `json:"terminatedAt"`
}

// JobCreate Represents the information specified when creating a job.
type JobCreate struct {
	// Description Description of the job
	Description     *string `json:"description"`
	ExecutionConfig struct {
		// CreateSnapshot Indicates whether the job will save snapshots
		CreateSnapshot bool `json:"createSnapshot"`

		// NotebookPath Path to the shared notebook file that contains the code that needs to be run on a schedule as part of this job
		NotebookPath string `json:"notebookPath"`

		// RuntimeName Name of the runtime
		RuntimeName *string `json:"runtimeName"`
	} `json:"executionConfig"`

	// Name Name of the job
	Name *string `json:"name"`

	// Parameters Array containing the parameters for the job
	Parameters   *[]JobParameter  `json:"parameters,omitempty"`
	Schedule     JobSchedule      `json:"schedule"`
	TargetConfig *JobTargetConfig `json:"targetConfig"`
}

// JobExecutionConfig defines model for JobExecutionConfig.
type JobExecutionConfig struct {
	// CreateSnapshot Indicates whether the job will save snapshots
	CreateSnapshot bool `json:"createSnapshot"`

	// MaxAllowedExecutionDurationInMinutes Maximum allowed execution duration for the job in minutes
	MaxAllowedExecutionDurationInMinutes int `json:"maxAllowedExecutionDurationInMinutes"`

	// NotebookPath Path to the shared notebook file that contains the code that needs to be run on a schedule as part of this job
	NotebookPath string `json:"notebookPath"`
}

// JobMetadata defines model for JobMetadata.
type JobMetadata struct {
	// AvgDurationInSeconds Average duration of executions (in seconds) with the corresponding status
	AvgDurationInSeconds *float32 `json:"avgDurationInSeconds"`

	// Count The number of executions with the corresponding status
	Count int `json:"count"`

	// MaxDurationInSeconds Maximum duration of executions (in seconds) with the corresponding status
	MaxDurationInSeconds *float32          `json:"maxDurationInSeconds"`
	Status               JobMetadataStatus `json:"status"`
}

// JobMetadataStatus defines model for JobMetadata.Status.
type JobMetadataStatus string

// JobParameter defines model for JobParameter.
type JobParameter struct {
	// Name Name of the parameter
	Name string `json:"name"`

	// Type Type of the parameter
	Type JobParameterType `json:"type"`

	// Value Value of the parameter
	Value string `json:"value"`
}

// JobParameterType Type of the parameter
type JobParameterType string

// JobSchedule defines model for JobSchedule.
type JobSchedule struct {
	// ExecutionIntervalInMinutes The time interval between executions of this job. This is required for a Recurring job.
	ExecutionIntervalInMinutes *int            `json:"executionIntervalInMinutes"`
	Mode                       JobScheduleMode `json:"mode"`

	// StartAt The time at which the first execution of this job should begin.
	StartAt *time.Time `json:"startAt"`
}

// JobScheduleMode defines model for JobSchedule.Mode.
type JobScheduleMode string

// JobTargetConfig defines model for JobTargetConfig.
type JobTargetConfig struct {
	// DatabaseName Name of the database
	DatabaseName *string `json:"databaseName,omitempty"`

	// ResumeTarget Indicates whether executions of this job will resume the target associated with the job, if it is suspended
	ResumeTarget bool `json:"resumeTarget"`

	// TargetID The target ID for the job, this could be the ID of Workspace, Cluster or VirtualWorkspace (in case of shared-tier).
	TargetID   openapi_types.UUID        `json:"targetID"`
	TargetType JobTargetConfigTargetType `json:"targetType"`
}

// JobTargetConfigTargetType defines model for JobTargetConfig.TargetType.
type JobTargetConfigTargetType string

// Organization Represents information related to an organization
type Organization struct {
	// FirewallRanges The list of allowed IP addresses which can access the Management API
	FirewallRanges *[]string `json:"firewallRanges,omitempty"`

	// Name Name of the organization
	Name *string `json:"name,omitempty"`

	// OrgID ID of the organization
	OrgID openapi_types.UUID `json:"orgID"`
}

// PrivateConnection Represents information related to a private link connection
type PrivateConnection struct {
	// ActiveAt The timestamp of when the private connection became active
	ActiveAt *string `json:"activeAt,omitempty"`

	// AllowList The private connection allow list. This is the account ID for AWS,  subscription ID for Azure, and the project name GCP
	AllowList             *string   `json:"allowList,omitempty"`
	AllowedPrivateLinkIDs *[]string `json:"allowedPrivateLinkIDs,omitempty"`

	// CreatedAt The timestamp of when the private connection was created
	CreatedAt *string `json:"createdAt,omitempty"`

	// DeletedAt The timestamp of when the private connection was deleted
	DeletedAt *string `json:"deletedAt,omitempty"`

	// Endpoint The service endpoint
	Endpoint *string `json:"endpoint,omitempty"`

	// OutboundAllowList The account ID which must be allowed for outbound connections
	OutboundAllowList *string `json:"outboundAllowList,omitempty"`

	// PrivateConnectionID The ID of the private connection
	PrivateConnectionID openapi_types.UUID `json:"privateConnectionID"`

	// ServiceName The name of the private connection service
	ServiceName *string `json:"serviceName,omitempty"`

	// SqlPort The SQL port
	SqlPort *float32 `json:"sqlPort,omitempty"`

	// Status The status of the private connection
	Status *PrivateConnectionStatus `json:"status,omitempty"`

	// Type The private connection type
	Type *PrivateConnectionType `json:"type,omitempty"`

	// UpdatedAt The timestamp of when the private connection was last updated
	UpdatedAt *string `json:"updatedAt,omitempty"`

	// WebsocketsPort The websockets port
	WebsocketsPort *float32 `json:"websocketsPort,omitempty"`

	// WorkspaceGroupID The ID of the workspace group containing the private connection
	WorkspaceGroupID openapi_types.UUID `json:"workspaceGroupID"`

	// WorkspaceID The ID of the workspace to connect with
	WorkspaceID *openapi_types.UUID `json:"workspaceID,omitempty"`
}

// PrivateConnectionStatus The status of the private connection
type PrivateConnectionStatus string

// PrivateConnectionType The private connection type
type PrivateConnectionType string

// PrivateConnectionCreate Represents the information specified when creating a private connection
type PrivateConnectionCreate struct {
	// AllowList The private connection allow list
	AllowList *string `json:"allowList,omitempty"`

	// KaiEndpointID VPC Endpoint ID for AWS
	KaiEndpointID *string `json:"kaiEndpointID,omitempty"`

	// ServiceName The name of the private connection service
	ServiceName *string `json:"serviceName,omitempty"`

	// SqlPort The SQL port
	SqlPort *float32 `json:"sqlPort,omitempty"`

	// Type The private connection type
	Type *PrivateConnectionCreateType `json:"type,omitempty"`

	// WebsocketsPort The websockets port
	WebsocketsPort *float32 `json:"websocketsPort,omitempty"`

	// WorkspaceGroupID The ID of the workspace group containing the private connection
	WorkspaceGroupID openapi_types.UUID `json:"workspaceGroupID"`

	// WorkspaceID The ID of the workspace to connect with
	WorkspaceID *openapi_types.UUID `json:"workspaceID,omitempty"`
}

// PrivateConnectionCreateType The private connection type
type PrivateConnectionCreateType string

// PrivateConnectionKaiInfo Represents the information for creating private connection to SingleStore Kai
type PrivateConnectionKaiInfo struct {
	// ServiceName VPC Endpoint Service Name for AWS
	ServiceName *string `json:"serviceName,omitempty"`
}

// PrivateConnectionOutboundAllowList Represents information related to a private connection outbound allow list
type PrivateConnectionOutboundAllowList struct {
	// OutboundAllowList The account ID allowed for outbound connections
	OutboundAllowList *string `json:"outboundAllowList,omitempty"`
}

// PrivateConnectionUpdate Represents the information specfied when updating a private connection
type PrivateConnectionUpdate struct {
	// AllowList The private connection allow list
	AllowList *string `json:"allowList,omitempty"`
}

// Region Represents information related to a region in which a workspace group is created
type Region struct {
	// Provider Name of the provider
	Provider RegionProvider `json:"provider"`

	// Region Name of the region
	Region string `json:"region"`

	// RegionID ID of the region
	RegionID openapi_types.UUID `json:"regionID"`
}

// RegionProvider Name of the provider
type RegionProvider string

// RegionV2 Represents information related to a region in which a workspace group is created
type RegionV2 struct {
	// Provider Name of the provider
	Provider RegionV2Provider `json:"provider"`

	// Region Name of the region
	Region string `json:"region"`

	// RegionName The region code name
	RegionName string `json:"regionName"`
}

// RegionV2Provider Name of the provider
type RegionV2Provider string

// ReplicatedDatabase Represents information related to a database's replication status
type ReplicatedDatabase struct {
	// DatabaseName Name of the database
	DatabaseName string `json:"databaseName"`

	// DuplicationState Duplication state of the database
	DuplicationState ReplicatedDatabaseDuplicationState `json:"duplicationState"`

	// Region Name of the region
	Region string `json:"region"`
}

// ReplicatedDatabaseDuplicationState Duplication state of the database
type ReplicatedDatabaseDuplicationState string

// ResourceRole defines model for ResourceRole.
type ResourceRole struct {
	// Description the description about the role
	Description string              `json:"description"`
	Grants      []ResourceRoleGrant `json:"grants"`

	// Role the role can access the resource
	Role string `json:"role"`
}

// ResourceRoleGrant defines model for ResourceRoleGrant.
type ResourceRoleGrant struct {
	// CreatedAt Creation timestamp
	CreatedAt time.Time `json:"createdAt"`

	// CreatedBy Summary information about a SingleStoreDB Cloud user.
	CreatedBy     *UserInfo                  `json:"createdBy,omitempty"`
	Identity      ResourceRoleGrant_Identity `json:"identity"`
	InheritedFrom *struct {
		// ResourceID ID of the resource
		ResourceID   openapi_types.UUID `json:"resourceID"`
		ResourceType string             `json:"resourceType"`
		Role         string             `json:"role"`
	} `json:"inheritedFrom,omitempty"`
}

// ResourceRoleGrant_Identity defines model for ResourceRoleGrant.Identity.
type ResourceRoleGrant_Identity struct {
	union json.RawMessage
}

// RetentionPeriodParams Represents the information to be specified when updating the retention period of a workspace group.
type RetentionPeriodParams struct {
	// RetentionPeriod Retention period in minutes
	RetentionPeriod int `json:"retentionPeriod"`
}

// RoleCreate defines model for RoleCreate.
type RoleCreate struct {
	// Description A description of the role
	Description *string `json:"description,omitempty"`

	// Inherits The roles that the current role will inherit from
	Inherits []TypedRole `json:"inherits"`

	// Permissions The permissions are seperated by the resourceType, like you can put 'View Storage' DR for 'Cluster' resourceType but not 'Organization'
	Permissions []string `json:"permissions"`

	// Role The name for the custom role
	Role string `json:"role"`
}

// RoleDefinition defines model for RoleDefinition.
type RoleDefinition struct {
	// CreatedAt Creation timestamp.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// CreatedBy Summary information about a SingleStoreDB Cloud user.
	CreatedBy *UserInfo `json:"createdBy,omitempty"`

	// Description A description of the role
	Description *string `json:"description,omitempty"`

	// Inherits The roles that current role will inherit from
	Inherits []TypedRole `json:"inherits"`

	// IsCustom Indicate the role is a custom role
	IsCustom bool `json:"isCustom"`

	// Permissions The permissions that the role has
	Permissions []string `json:"permissions"`

	// ResourceType The resource type for the role
	ResourceType string `json:"resourceType"`

	// Role The role name
	Role string `json:"role"`

	// UpdatedAt Timestamp of most recent state change.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UpdatedBy Summary information about a SingleStoreDB Cloud user.
	UpdatedBy *UserInfo `json:"updatedBy,omitempty"`
}

// RoleUpdate defines model for RoleUpdate.
type RoleUpdate struct {
	// Description A description of the role
	Description *string `json:"description,omitempty"`

	// Inherits The roles that the current role will inherit from
	Inherits []TypedRole `json:"inherits"`

	// Permissions The permissions are seperated by the resourceType, like you can put 'View Storage' DR for 'Cluster' resourceType but not 'Organization'
	Permissions []string `json:"permissions"`
}

// RuntimesResult defines model for RuntimesResult.
type RuntimesResult struct {
	// Description The description of the runtime
	Description string `json:"description"`

	// Name The name of the runtime
	Name string `json:"name"`
}

// Secret Represents information related to SingleStore Helios secrets.
type Secret struct {
	// CreatedAt The timestamp of when the secret was created.
	CreatedAt string `json:"createdAt"`

	// CreatedBy The ID of the user that created the secret.
	CreatedBy openapi_types.UUID `json:"createdBy"`

	// DeletedAt The timestamp of when the secret was deleted.
	DeletedAt *string `json:"deletedAt,omitempty"`

	// DeletedBy The ID of the user that deleted the secret.
	DeletedBy *openapi_types.UUID `json:"deletedBy,omitempty"`

	// LastUpdatedAt The timestamp of when the secret was last updated.
	LastUpdatedAt string `json:"lastUpdatedAt"`

	// LastUpdatedBy The ID of the user that last updated the secret.
	LastUpdatedBy openapi_types.UUID `json:"lastUpdatedBy"`

	// Name The name of the secret. It can only contain alphanumeric characters or underscores.
	Name string `json:"name"`

	// SecretID The ID of the secret.
	SecretID openapi_types.UUID `json:"secretID"`

	// Value The value of the secret.
	Value *string `json:"value,omitempty"`
}

// SecretCreate Represents the information specified when creating a secret.
type SecretCreate struct {
	// Name The name of the secret. It can only contain alphanumeric characters or underscores.
	Name string `json:"name"`

	// Value The value of the secret.
	Value string `json:"value"`
}

// SecretUpdate Represents the information specified when updating a secret.
type SecretUpdate struct {
	// Value The value of the secret.
	Value *string `json:"value,omitempty"`
}

// SharedTierCreateUser Represents the information specified when creating a user in a shared tier workspace
type SharedTierCreateUser struct {
	// Password The starter workspace user password to connect the new user to the database.
	Password *string `json:"password,omitempty"`

	// UserName The starter workspace user name to connect the new user to the database
	UserName string `json:"userName"`
}

// SharedTierCreateVirtualWorkspace defines model for SharedTierCreateVirtualWorkspace.
type SharedTierCreateVirtualWorkspace struct {
	// DatabaseName Name of the database
	DatabaseName string `json:"databaseName"`

	// Name Name of the starter workspace
	Name string `json:"name"`

	// Provider Name of the provider
	Provider SharedTierCreateVirtualWorkspaceProvider `json:"provider"`

	// RegionName The region code
	RegionName string `json:"regionName"`
}

// SharedTierCreateVirtualWorkspaceProvider Name of the provider
type SharedTierCreateVirtualWorkspaceProvider string

// SharedTierUpdateUser Represents the information specified when updating a user in a shared tier workspace
type SharedTierUpdateUser struct {
	// Password The virtual workspace user password to connect the new user to the database.
	Password *string `json:"password,omitempty"`
}

// SharedTierVirtualWorkspace defines model for SharedTierVirtualWorkspace.
type SharedTierVirtualWorkspace struct {
	// DatabaseName Name of the database
	DatabaseName *string `json:"databaseName,omitempty"`

	// Endpoint The application endpoint of the SingleStore database
	Endpoint *string `json:"endpoint,omitempty"`

	// MysqlDmlPort The MySQL DML port
	MysqlDmlPort *int `json:"mysqlDmlPort,omitempty"`

	// Name Name of the starter workspace
	Name *string `json:"name,omitempty"`

	// VirtualWorkspaceID ID of the starter workspace
	VirtualWorkspaceID *openapi_types.UUID `json:"virtualWorkspaceID,omitempty"`

	// WebsocketPort The websockets port
	WebsocketPort *int `json:"websocketPort,omitempty"`
}

// StorageDRSetup Represents the information specified to setup Storage DR
type StorageDRSetup struct {
	// AutoReplication If set to true, all existing and future databases created will be automatically replicated to the secondary region. If set to false, turns off auto replication.
	AutoReplication *bool `json:"autoReplication,omitempty"`

	// BackupBucketKMSKeyID Specifies the KMS key ID associated with the backup bucket. If specified, enables Customer-Managed Encryption Keys (CMEK) encryption for the backup bucket of the secondary workspace group. This feature is only supported in workspace groups deployed in AWS.
	BackupBucketKMSKeyID *string `json:"backupBucketKMSKeyID,omitempty"`

	// DataBucketKMSKeyID Specifies the KMS key ID associated with the data bucket. If specified, enables Customer-Managed Encryption Keys (CMEK) encryption for the data bucket and Amazon Elastic Block Store (EBS) volumes of the secondary workspace group. This feature is only supported in workspace groups deployed in AWS.
	DataBucketKMSKeyID *string `json:"dataBucketKMSKeyID,omitempty"`

	// DatabaseNames List of database names (can be an empty list if setting up Auto-Replication).
	DatabaseNames []string `json:"databaseNames"`

	// RegionID Region ID of the secondary region
	RegionID openapi_types.UUID `json:"regionID"`
}

// StorageDRStatus Represents Storage DR status information
type StorageDRStatus struct {
	// Compute Represents information related to a workspace group's latest storage DR operation
	Compute struct {
		// CompletedAttachments The number of database attachments that have been setup
		CompletedAttachments *int `json:"completedAttachments,omitempty"`

		// CompletedWorkspaces The number of workspaces that have been setup
		CompletedWorkspaces *int `json:"completedWorkspaces,omitempty"`

		// StorageDRState Status of Storage DR operation
		StorageDRState StorageDRStatusComputeStorageDRState `json:"storageDRState"`

		// StorageDRType Name of Storage DR operation
		StorageDRType StorageDRStatusComputeStorageDRType `json:"storageDRType"`

		// TotalAttachments The total number of database attachments to setup
		TotalAttachments *int `json:"totalAttachments,omitempty"`

		// TotalWorkspaces The total number of workspaces to setup
		TotalWorkspaces *int `json:"totalWorkspaces,omitempty"`
	} `json:"compute"`
	Storage []ReplicatedDatabase `json:"storage"`
}

// StorageDRStatusComputeStorageDRState Status of Storage DR operation
type StorageDRStatusComputeStorageDRState string

// StorageDRStatusComputeStorageDRType Name of Storage DR operation
type StorageDRStatusComputeStorageDRType string

// Team A SingleStoreDB Cloud team.
type Team struct {
	// CreatedAt Team creation timestamp.
	CreatedAt *string `json:"createdAt,omitempty"`

	// Description Team description.
	Description string      `json:"description"`
	MemberTeams *[]TeamInfo `json:"memberTeams,omitempty"`
	MemberUsers *[]UserInfo `json:"memberUsers,omitempty"`

	// Name Team name.
	Name string `json:"name"`

	// TeamID Team identifier.
	TeamID openapi_types.UUID `json:"teamID"`
}

// TeamCreate Information specified when creating a team.
type TeamCreate struct {
	// Description Optional team description.
	Description *string `json:"description,omitempty"`

	// Name Team name.
	Name string `json:"name"`
}

// TeamInfo Summary information about a SingleStoreDB Cloud team.
type TeamInfo struct {
	// Description Team description.
	Description string `json:"description"`

	// Name Team name.
	Name string `json:"name"`

	// TeamID Team identifier.
	TeamID openapi_types.UUID `json:"teamID"`
}

// TeamUpdate Information specified when updating a team.
type TeamUpdate struct {
	// AddMemberTeamIDs List of identifiers of teams to be added as members.
	AddMemberTeamIDs *[]openapi_types.UUID `json:"addMemberTeamIDs,omitempty"`

	// AddMemberUserEmails List of emails of users to be added as members.
	AddMemberUserEmails *[]string `json:"addMemberUserEmails,omitempty"`

	// AddMemberUserIDs List of identifiers of users to be added as members.
	AddMemberUserIDs *[]openapi_types.UUID `json:"addMemberUserIDs,omitempty"`

	// Description Team description.
	Description *string `json:"description,omitempty"`

	// Name Team name.
	Name *string `json:"name,omitempty"`

	// RemoveMemberTeamIDs List of identifiers of teams to be removed from members.
	RemoveMemberTeamIDs *[]openapi_types.UUID `json:"removeMemberTeamIDs,omitempty"`

	// RemoveMemberUserEmails List of emails of users to be removed from members.
	RemoveMemberUserEmails *[]string `json:"removeMemberUserEmails,omitempty"`

	// RemoveMemberUserIDs List of identifiers of users to be removed from members.
	RemoveMemberUserIDs *[]openapi_types.UUID `json:"removeMemberUserIDs,omitempty"`
}

// TypedRole defines model for TypedRole.
type TypedRole struct {
	// ResourceType Resource type of the role
	ResourceType string `json:"resourceType"`

	// Role The role name
	Role string `json:"role"`
}

// UpdateWindow Represents information related to an update window
type UpdateWindow struct {
	// Day Day of week (0-6), starting on Sunday
	Day float32 `json:"day"`

	// Hour Hour of day - 0 to 23 (UTC)
	Hour float32 `json:"hour"`
}

// User defines model for User.
type User struct {
	// Email The email address of the user.
	Email string `json:"email"`

	// FirstName First name of the user.
	FirstName string `json:"firstName"`

	// LastName Last name of the user.
	LastName string `json:"lastName"`

	// UserID User identifier.
	UserID openapi_types.UUID `json:"userID"`
}

// UserInfo Summary information about a SingleStoreDB Cloud user.
type UserInfo struct {
	// Email The email address of the user.
	Email string `json:"email"`

	// FirstName First name of the user.
	FirstName string `json:"firstName"`

	// LastName Last name of the user.
	LastName string `json:"lastName"`

	// UserID User identifier.
	UserID openapi_types.UUID `json:"userID"`
}

// UserInvitation Information specified when creating a user invitation.
type UserInvitation struct {
	// ActedAt Timestamp of most recent state change.
	ActedAt *time.Time `json:"actedAt,omitempty"`

	// CreatedAt Creation timestamp.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Email User email address.
	Email *string `json:"email,omitempty"`

	// InvitationID Invitation identifier.
	InvitationID *openapi_types.UUID `json:"invitationID,omitempty"`

	// Message Welcome message
	Message *string `json:"message,omitempty"`

	// State Invitation state. Pending, Accepted, Refused, or Revoked.
	State *UserInvitationState `json:"state,omitempty"`

	// TeamIDs List of user teams.
	TeamIDs *[]openapi_types.UUID `json:"teamIDs,omitempty"`
}

// UserInvitationState Invitation state. Pending, Accepted, Refused, or Revoked.
type UserInvitationState string

// UserInvitationCreate Information specified when creating a user invitation.
type UserInvitationCreate struct {
	// Email User email address.
	Email openapi_types.Email `json:"email"`

	// TeamIDs List of user teams.
	TeamIDs *[]openapi_types.UUID `json:"teamIDs,omitempty"`
}

// Workspace Represents information related to a workspace
type Workspace struct {
	// AutoScale (If included in the output) Indicates whether [autoscaling](https://docs.singlestore.com/cloud/getting-started-with-singlestore-helios/about-workspaces/workspace-scaling/#autoscaling) is enabled and displays the current autoscale configuration for this workspace. If the `autoScale` value is empty, the autoscale settings are disabled.
	AutoScale *struct {
		// MaxScaleFactor The maximum scale factor allowed for the workspace.
		MaxScaleFactor float32 `json:"maxScaleFactor"`

		// Sensitivity The sensitivity of the autoscale operation to changes in the workload.
		Sensitivity *string `json:"sensitivity,omitempty"`
	} `json:"autoScale,omitempty"`

	// AutoSuspend (If included in the output) Represents the current auto suspend settings enabled for this workspace. If autoSuspend has an empty value, then the auto suspend settings are disabled
	AutoSuspend *struct {
		// IdleAfterSeconds (If included in the output) The duration (in seconds) the workspace must be inactive until it automatically suspends
		IdleAfterSeconds *float32 `json:"idleAfterSeconds,omitempty"`

		// IdleChangedAt (If included in the output) The timestamp when idleAfterSeconds was last changed
		IdleChangedAt *string `json:"idleChangedAt,omitempty"`

		// ScheduledAfterSeconds (If included in the output) The scheduled duration (in seconds) after which the workspace must be suspended
		ScheduledAfterSeconds *float32 `json:"scheduledAfterSeconds,omitempty"`

		// ScheduledChangedAt (If included in the output) The timestamp when scheduledSuspendAt was last changed
		ScheduledChangedAt *string `json:"scheduledChangedAt,omitempty"`

		// ScheduledSuspendAt (If included in the output) The timestamp when the workspace will be suspended
		ScheduledSuspendAt *string `json:"scheduledSuspendAt,omitempty"`

		// SuspendType The type of auto suspend currently enabled
		SuspendType WorkspaceAutoSuspendSuspendType `json:"suspendType"`

		// SuspendTypeChangedAt (If included in the output) The timestamp when suspendType was last changed
		SuspendTypeChangedAt *string `json:"suspendTypeChangedAt,omitempty"`
	} `json:"autoSuspend,omitempty"`

	// CacheConfig Specifies the multiplier for the persistent cache associated with the workspace. It can have one of the following values: 1, 2, or 4.
	CacheConfig *float32 `json:"cacheConfig,omitempty"`

	// CreatedAt The timestamp of when the workspace was created
	CreatedAt string `json:"createdAt"`

	// DeploymentType Specifies the deployment type for the workspace. It can have one of the following values: `PRODUCTION` or `NON-PRODUCTION`. If the value wasn't changed on creation, then the default will be `PRODUCTION`. If set to `NON-PRODUCTION`, the upgrades are only applied to the non-production workspaces.
	DeploymentType *WorkspaceDeploymentType `json:"deploymentType,omitempty"`

	// Endpoint Endpoint to connect to the workspace
	Endpoint *string `json:"endpoint,omitempty"`

	// KaiEnabled Specifies if the workspace is kai enabled or not.
	KaiEnabled *bool `json:"kaiEnabled,omitempty"`

	// LastResumedAt (If included in the output) The timestamp of when the workspace was last resumed
	LastResumedAt *string `json:"lastResumedAt,omitempty"`

	// Name Name of the workspace
	Name string `json:"name"`

	// ResumeAttachments (If included in the output) The result of database attachments after the workspace was resumed
	ResumeAttachments *[]struct {
		// Attachment The type of attachment
		Attachment WorkspaceResumeAttachmentsAttachment `json:"attachment"`

		// Database Name of the database
		Database string `json:"database"`

		// Error The error if the attachment was not successful
		Error *string `json:"error,omitempty"`

		// Success Whether the attachment was successful or not
		Success bool `json:"success"`
	} `json:"resumeAttachments,omitempty"`

	// ScaleFactor (If included in the output) The scale factor specified for the workspace. The scale factor can be 1, 2 or 4.
	ScaleFactor *float32 `json:"scaleFactor,omitempty"`

	// ScalingProgress (If included in the output) The current progress percentage for the scaling workspace
	ScalingProgress *float32 `json:"scalingProgress,omitempty"`

	// Size Size of the workspace (in workspace size notation), such as "S-00" or "S-1"
	Size string `json:"size"`

	// State State of the workspace
	State WorkspaceState `json:"state"`

	// TerminatedAt (If included in the output) The timestamp of when the workspace was terminated
	TerminatedAt *string `json:"terminatedAt,omitempty"`

	// WorkspaceGroupID ID of the workspace group containing the workspace
	WorkspaceGroupID openapi_types.UUID `json:"workspaceGroupID"`

	// WorkspaceID ID of the workspace
	WorkspaceID openapi_types.UUID `json:"workspaceID"`
}

// WorkspaceAutoSuspendSuspendType The type of auto suspend currently enabled
type WorkspaceAutoSuspendSuspendType string

// WorkspaceDeploymentType Specifies the deployment type for the workspace. It can have one of the following values: `PRODUCTION` or `NON-PRODUCTION`. If the value wasn't changed on creation, then the default will be `PRODUCTION`. If set to `NON-PRODUCTION`, the upgrades are only applied to the non-production workspaces.
type WorkspaceDeploymentType string

// WorkspaceResumeAttachmentsAttachment The type of attachment
type WorkspaceResumeAttachmentsAttachment string

// WorkspaceState State of the workspace
type WorkspaceState string

// WorkspaceCreate Represents the information specified while creating a workspace
type WorkspaceCreate struct {
	// AutoSuspend Auto suspend settings for the workspace. If this field is not provided, no settings will be enabled.
	AutoSuspend *struct {
		// SuspendAfterSeconds When to suspend the workspace, according to the suspend type chosen
		SuspendAfterSeconds *float32 `json:"suspendAfterSeconds,omitempty"`

		// SuspendType The auto suspend mode for the workspace can have the values `IDLE`, `SCHEDULED`, or `DISABLED` (to create the workspace with no auto suspend settings).
		SuspendType *WorkspaceCreateAutoSuspendSuspendType `json:"suspendType,omitempty"`
	} `json:"autoSuspend,omitempty"`

	// CacheConfig Specifies the multiplier for the persistent cache associated with the workspace. If specified, it enables the cache configuration multiplier. It can have one of the following values: 1, 2, or 4.
	CacheConfig *float32 `json:"cacheConfig,omitempty"`

	// EnableKai Whether to create a SingleStore Kai-enabled workspace
	EnableKai *bool `json:"enableKai,omitempty"`

	// Name Name of the workspace
	Name string `json:"name"`

	// ScaleFactor Specifies the scale factor for scaling the workspace base size.
	// When specified, the compute resources are scaled in proportion to the specified scale factor, while the disk remains unaffected.
	// Consequently, the credit consumption is also increased proportionately.
	// It can have one of the following values: 1, 2, or 4.
	// For more information, refer to [Workspace Scaling](https://docs.singlestore.com/cloud/getting-started-with-singlestore-helios/about-workspaces/workspace-scaling/).
	ScaleFactor *float32 `json:"scaleFactor,omitempty"`

	// Size Size of the workspace (in workspace size notation), such as "S-1". The default value is "S-00".
	Size *string `json:"size,omitempty"`

	// WorkspaceGroupID ID of the workspace group in which the workspace is created
	WorkspaceGroupID openapi_types.UUID `json:"workspaceGroupID"`
}

// WorkspaceCreateAutoSuspendSuspendType The auto suspend mode for the workspace can have the values `IDLE`, `SCHEDULED`, or `DISABLED` (to create the workspace with no auto suspend settings).
type WorkspaceCreateAutoSuspendSuspendType string

// WorkspaceGroup Represents information related to a workspace group
type WorkspaceGroup struct {
	// AllowAllTraffic Whether or not all traffic is allowed to the workspace group
	AllowAllTraffic *bool `json:"allowAllTraffic,omitempty"`

	// CreatedAt The timestamp of when the workspace was created
	CreatedAt string `json:"createdAt"`

	// DeploymentType Deployment type of the workspace group
	DeploymentType *WorkspaceGroupDeploymentType `json:"deploymentType,omitempty"`

	// ExpiresAt The timestamp of when the workspace group will expire. At expiration, the workspace group is terminated and all the data is lost.
	ExpiresAt *string `json:"expiresAt,omitempty"`

	// FirewallRanges The list of allowed inbound IP addresses. An empty list indicates that no inbound requests are allowed.
	FirewallRanges *[]string `json:"firewallRanges,omitempty"`

	// HighAvailabilityTwoZones Whether deployment across two Availability Zones is enabled.
	HighAvailabilityTwoZones *bool `json:"highAvailabilityTwoZones,omitempty"`

	// Name Name of the workspace group
	Name string `json:"name"`

	// OptInPreviewFeature Whether 'Opt-in to Preview Features & Updates' is enabled
	OptInPreviewFeature *bool `json:"optInPreviewFeature,omitempty"`

	// OutboundAllowList The account ID which must be allowed for outbound connections. This is only applicable to AWS provider.
	OutboundAllowList *string `json:"outboundAllowList,omitempty"`

	// Provider Name of the provider
	Provider WorkspaceGroupProvider `json:"provider"`

	// RegionID ID of the region
	RegionID openapi_types.UUID `json:"regionID"`

	// RegionName The region code name
	RegionName string `json:"regionName"`

	// SmartDRStatus The status of Smart Disaster Recovery (SmartDR) for the workspace group. For more information, refer to [the documentation](https://docs.singlestore.com/cloud/manage-data/smart-disaster-recovery-dr-smartdr/).
	SmartDRStatus *WorkspaceGroupSmartDRStatus `json:"smartDRStatus,omitempty"`

	// State State of the workspace group
	State WorkspaceGroupState `json:"state"`

	// TerminatedAt (If included in the output) The timestamp of when the workspace group was terminated
	TerminatedAt *string `json:"terminatedAt,omitempty"`

	// UpdateWindow Represents information related to an update window
	UpdateWindow *UpdateWindow `json:"updateWindow,omitempty"`

	// WorkspaceGroupID ID of the workspace group
	WorkspaceGroupID openapi_types.UUID `json:"workspaceGroupID"`
}

// WorkspaceGroupDeploymentType Deployment type of the workspace group
type WorkspaceGroupDeploymentType string

// WorkspaceGroupProvider Name of the provider
type WorkspaceGroupProvider string

// WorkspaceGroupSmartDRStatus The status of Smart Disaster Recovery (SmartDR) for the workspace group. For more information, refer to [the documentation](https://docs.singlestore.com/cloud/manage-data/smart-disaster-recovery-dr-smartdr/).
type WorkspaceGroupSmartDRStatus string

// WorkspaceGroupState State of the workspace group
type WorkspaceGroupState string

// WorkspaceGroupCreate Represents the information specified while creating a workspace group
type WorkspaceGroupCreate struct {
	// AdminPassword The admin password for the workspace group. The password must contain:
	//
	//   * At least 14 characters
	//   * At least one uppercase character
	//   * At least one lowercase character
	//   * At least one numeric character
	//   * At least one special character
	//   * At most two consecutive sequential characters
	//   * At most three consecutive identical characters
	//
	// If a password is not specified while creating a workspace group or if an invalid password is provided, a valid password is generated and returned in the response object.
	AdminPassword *string `json:"adminPassword,omitempty"`

	// AllowAllTraffic If enabled, allows all traffic to the workspace group.
	AllowAllTraffic *bool `json:"allowAllTraffic,omitempty"`

	// BackupBucketKMSKeyID Specifies the KMS key ID associated with the backup bucket. If specified, enables Customer-Managed Encryption Keys (CMEK) encryption for the backup bucket of the workspace group. This feature is only supported in workspace groups deployed in AWS.
	BackupBucketKMSKeyID *string `json:"backupBucketKMSKeyID,omitempty"`

	// DataBucketKMSKeyID Specifies the KMS key ID associated with the data bucket. If specified, enables Customer-Managed Encryption Keys (CMEK) encryption for the data bucket and Amazon Elastic Block Store (EBS) volumes of the workspace group. This feature is only supported in workspace groups deployed in AWS.
	DataBucketKMSKeyID *string `json:"dataBucketKMSKeyID,omitempty"`

	// DeploymentType The deployment type that will be applied to all the workspaces within the workspace group. The default value is `PRODUCTION`
	DeploymentType *WorkspaceGroupCreateDeploymentType `json:"deploymentType,omitempty"`

	// ExpiresAt The timestamp of when the workspace group will expire. If the expiration time is not specified, the workspace group will have no expiration time. At expiration, the workspace group is terminated and all the data is lost. Expiration time can be specified as a timestamp or duration. For example,
	//
	//   * "2023-09-02T15:04:05Z07:00"
	//   * "2023-09-02T15:04:05-0700"
	//   * "2023-09-02T15:04:05"
	//   * "2023-09-02"
	//   * "3h30m"
	ExpiresAt *string `json:"expiresAt,omitempty"`

	// FirewallRanges A list of allowed CIDR ranges. An empty list indicates that no inbound requests are allowed. Required
	FirewallRanges []string `json:"firewallRanges"`

	// HighAvailabilityTwoZones Enables deployment across two Availability Zones.
	HighAvailabilityTwoZones *bool `json:"highAvailabilityTwoZones,omitempty"`

	// Name Name of the workspace group
	Name string `json:"name"`

	// OptInPreviewFeature If enabled, the deployment gets the latest features and updates immediately. Suitable only for `NON-PRODUCTION` deployments and cannot be changed after creation.
	OptInPreviewFeature *bool `json:"optInPreviewFeature,omitempty"`

	// Provider Name of the provider
	Provider *WorkspaceGroupCreateProvider `json:"provider,omitempty"`

	// RegionID ID of the region where the new workspace group is created
	RegionID *openapi_types.UUID `json:"regionID,omitempty"`

	// RegionName The region code name
	RegionName *string `json:"regionName,omitempty"`

	// UpdateWindow Represents information related to an update window
	UpdateWindow *UpdateWindow `json:"updateWindow,omitempty"`
}

// WorkspaceGroupCreateDeploymentType The deployment type that will be applied to all the workspaces within the workspace group. The default value is `PRODUCTION`
type WorkspaceGroupCreateDeploymentType string

// WorkspaceGroupCreateProvider Name of the provider
type WorkspaceGroupCreateProvider string

// WorkspaceGroupUpdate Represents the information specified while updating a workspace group
type WorkspaceGroupUpdate struct {
	// AdminPassword The admin password for the workspace group. The password must contain:
	//
	//   * At least 14 characters
	//   * At least one uppercase character
	//   * At least one lowercase character
	//   * At least one numeric character
	//   * At least one special character
	//   * At most two consecutive sequential characters
	//   * At most three consecutive identical characters
	AdminPassword *string `json:"adminPassword,omitempty"`

	// AllowAllTraffic Whether to allow all traffic to the workspace group
	AllowAllTraffic *bool `json:"allowAllTraffic,omitempty"`

	// DeploymentType The deployment type that will be applied to all the workspaces within the workspace group
	DeploymentType *WorkspaceGroupUpdateDeploymentType `json:"deploymentType,omitempty"`

	// ExpiresAt The timestamp of when the workspace group will expire. If the expiration time is not specified, the workspace group will have no expiration time. At expiration, the workspace group is terminated and all the data is lost. Expiration time can be specified as a timestamp or duration. For example,
	//
	//   * "2023-09-02T15:04:05Z07:00"
	//   * "2023-09-02T15:04:05-0700"
	//   * "2023-09-02T15:04:05"
	//   * "2023-09-02"
	//   * "3h30m"
	ExpiresAt *string `json:"expiresAt,omitempty"`

	// FirewallRanges A list of allowed CIDR ranges. An empty list indicates that no inbound requests are allowed.
	FirewallRanges *[]string `json:"firewallRanges,omitempty"`

	// Name Name of the workspace group
	Name *string `json:"name,omitempty"`

	// UpdateWindow Represents information related to an update window
	UpdateWindow *UpdateWindow `json:"updateWindow,omitempty"`
}

// WorkspaceGroupUpdateDeploymentType The deployment type that will be applied to all the workspaces within the workspace group
type WorkspaceGroupUpdateDeploymentType string

// WorkspaceResume Represents additional information specified when resuming a workspace
type WorkspaceResume struct {
	// DisableAutoSuspend Whether to disable auto suspend or keep the existing auto suspend settings. By default, `disableAutoSuspend` is set to `false`, and the existing auto suspend settings are preserved.
	DisableAutoSuspend *bool `json:"disableAutoSuspend,omitempty"`
}

// WorkspaceUpdate Represents the information specified while updating a workspace
type WorkspaceUpdate struct {
	// AutoScale Specifies the [autoscale](https://docs.singlestore.com/cloud/getting-started-with-singlestore-helios/about-workspaces/workspace-scaling/#autoscaling) setting (scale factor) for the workspace.
	AutoScale *struct {
		// MaxScaleFactor The maximum scale factor allowed for the workspace. It can have the following values: 1, 2, or 4. To disable autoscaling, set to 1.
		MaxScaleFactor *float32 `json:"maxScaleFactor,omitempty"`

		// Sensitivity Specifies the sensitivity of the autoscale operation to changes in the workload. It can have the following values: `LOW`, `NORMAL`, or `HIGH`. By default, the sensitivity is set to `NORMAL`.
		Sensitivity *WorkspaceUpdateAutoScaleSensitivity `json:"sensitivity,omitempty"`
	} `json:"autoScale,omitempty"`

	// AutoSuspend Specifies the auto suspend mode for the workspace. It can have one of the following values: `IDLE`, `SCHEDULED`, or `DISABLED`.
	AutoSuspend *struct {
		// SuspendAfterSeconds The time interval (in seconds) after which the workspace is suspended, depending on the auto suspend mode.
		SuspendAfterSeconds *float32 `json:"suspendAfterSeconds,omitempty"`

		// SuspendType The type of auto suspend mode. Set to `DISABLED` to disable auto suspend.
		SuspendType *WorkspaceUpdateAutoSuspendSuspendType `json:"suspendType,omitempty"`
	} `json:"autoSuspend,omitempty"`

	// CacheConfig Specifies the multiplier for the persistent cache associated with the workspace. If specified, it enables the cache configuration multiplier. It can have one of the following values: 1, 2, or 4.
	CacheConfig *float32 `json:"cacheConfig,omitempty"`

	// DeploymentType The deployment type that will be applied to all the workspaces within the group
	DeploymentType *WorkspaceUpdateDeploymentType `json:"deploymentType,omitempty"`

	// EnableKai Whether to enable SingleStore Kai in this workspace
	EnableKai *WorkspaceUpdateEnableKai `json:"enableKai,omitempty"`

	// ScaleFactor Specifies the scale factor for scaling the workspace base size.
	// When specified, the compute resources are scaled in proportion to the specified scale factor, while the disk remains unaffected.
	// Consequently, the credit consumption is also increased proportionately.
	// It can have one of the following values: 1, 2, or 4.
	// For more information, refer to [Workspace Scaling](https://docs.singlestore.com/cloud/getting-started-with-singlestore-helios/about-workspaces/workspace-scaling/).
	ScaleFactor *float32 `json:"scaleFactor,omitempty"`

	// Size Size of the workspace (in workspace size notation), such as "S-1". The default value is "S-00".
	Size *string `json:"size,omitempty"`
}

// WorkspaceUpdateAutoScaleSensitivity Specifies the sensitivity of the autoscale operation to changes in the workload. It can have the following values: `LOW`, `NORMAL`, or `HIGH`. By default, the sensitivity is set to `NORMAL`.
type WorkspaceUpdateAutoScaleSensitivity string

// WorkspaceUpdateAutoSuspendSuspendType The type of auto suspend mode. Set to `DISABLED` to disable auto suspend.
type WorkspaceUpdateAutoSuspendSuspendType string

// WorkspaceUpdateDeploymentType The deployment type that will be applied to all the workspaces within the group
type WorkspaceUpdateDeploymentType string

// WorkspaceUpdateEnableKai Whether to enable SingleStore Kai in this workspace
type WorkspaceUpdateEnableKai bool

// ConnectionID defines model for connectionID.
type ConnectionID = openapi_types.UUID

// Fields defines model for fields.
type Fields = string

// InvitationID defines model for invitationID.
type InvitationID = openapi_types.UUID

// JobID defines model for jobID.
type JobID = openapi_types.UUID

// OrganizationID defines model for organizationID.
type OrganizationID = openapi_types.UUID

// ResourceType defines model for resourceType.
type ResourceType = string

// Role defines model for role.
type Role = string

// SecretID defines model for secretID.
type SecretID = openapi_types.UUID

// TeamID defines model for teamID.
type TeamID = openapi_types.UUID

// UserID defines model for userID.
type UserID = openapi_types.UUID

// WorkspaceGroupID defines model for workspaceGroupID.
type WorkspaceGroupID = openapi_types.UUID

// WorkspaceID defines model for workspaceID.
type WorkspaceID = openapi_types.UUID

// GetV1AuditLogsParams defines parameters for GetV1AuditLogs.
type GetV1AuditLogsParams struct {
	// Type The audit log type
	Type *string `form:"type,omitempty" json:"type,omitempty"`

	// Source The audit log source
	Source *string `form:"source,omitempty" json:"source,omitempty"`

	// StartDate The start date (inclusive) for the query in RFC3339 format (2019-10-12T07:20:50.52Z)
	StartDate *string `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate The end date (inclusive) for the query in RFC3339 format (2019-10-12T07:20:50.52Z)
	EndDate *string `form:"endDate,omitempty" json:"endDate,omitempty"`

	// Limit The maximum number of rows to return
	Limit *float32 `form:"limit,omitempty" json:"limit,omitempty"`

	// NextToken The value of the nextToken returned from a previous query. This will guarantee the next results are new since the last query
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// FirstName A first name to match against
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty"`

	// LastName A last name to match against
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty"`
}

// GetV1BillingUsageParams defines parameters for GetV1BillingUsage.
type GetV1BillingUsageParams struct {
	// Metric The metric type. It can have the following values:
	//
	//   * `ComputeCredit`: Returns the compute usage.
	//   * `StorageAvgByte`: Returns the average bytes of storage usage.
	//
	// By default, usage for both metrics is returned.
	Metric *GetV1BillingUsageParamsMetric `form:"metric,omitempty" json:"metric,omitempty"`

	// StartTime The start time for the usage interval in UTC ISO8601 format. For example, "2023-07-30T18:30:00Z".
	StartTime string `form:"startTime" json:"startTime"`

	// EndTime The end time for the usage interval in UTC ISO8601 format. For example, "2023-07-30T18:30:00Z".
	EndTime string `form:"endTime" json:"endTime"`

	// AggregateBy The interval used to aggregate the usage. It can have the following values: `hour`, `day`, and `month`. By default, the results are grouped by hour."
	AggregateBy *GetV1BillingUsageParamsAggregateBy `form:"aggregateBy,omitempty" json:"aggregateBy,omitempty"`
}

// GetV1BillingUsageParamsMetric defines parameters for GetV1BillingUsage.
type GetV1BillingUsageParamsMetric string

// GetV1BillingUsageParamsAggregateBy defines parameters for GetV1BillingUsage.
type GetV1BillingUsageParamsAggregateBy string

// GetV1FilesFsLocationPathParams defines parameters for GetV1FilesFsLocationPath.
type GetV1FilesFsLocationPathParams struct {
	// Metadata If enabled, the API request returns only metadata for the specified file instead of downloading it.
	Metadata *bool `form:"metadata,omitempty" json:"metadata,omitempty"`
}

// PatchV1FilesFsLocationPathJSONBody defines parameters for PatchV1FilesFsLocationPath.
type PatchV1FilesFsLocationPathJSONBody struct {
	// NewPath New path of the file
	NewPath *string `json:"newPath,omitempty"`
}

// PutV1FilesFsLocationPathMultipartBody defines parameters for PutV1FilesFsLocationPath.
type PutV1FilesFsLocationPathMultipartBody struct {
	// File File to upload
	File *openapi_types.File `json:"file,omitempty"`
}

// GetV1InvitationsParams defines parameters for GetV1Invitations.
type GetV1InvitationsParams struct {
	// Email Show only invitations with emails matching this value or regular expression.
	Email *string `form:"email,omitempty" json:"email,omitempty"`

	// State Show only invitations with state matching this value.
	State *string `form:"state,omitempty" json:"state,omitempty"`

	// Fields Comma-separated values list that correspond to the filtered fields for returned entities
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetV1InvitationsInvitationIDParams defines parameters for GetV1InvitationsInvitationID.
type GetV1InvitationsInvitationIDParams struct {
	// Fields Comma-separated values list that correspond to the filtered fields for returned entities
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetV1JobsJobIDExecutionsParams defines parameters for GetV1JobsJobIDExecutions.
type GetV1JobsJobIDExecutionsParams struct {
	// Start Start execution number.
	Start float32 `form:"start" json:"start"`

	// End End execution number.
	End float32 `form:"end" json:"end"`
}

// GetV1PrivateConnectionsConnectionIDParams defines parameters for GetV1PrivateConnectionsConnectionID.
type GetV1PrivateConnectionsConnectionIDParams struct {
	// Fields Comma-separated values list that correspond to the filtered fields for returned entities
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetV1RegionsParams defines parameters for GetV1Regions.
type GetV1RegionsParams struct {
	// Fields Comma-separated values list that correspond to the filtered fields for returned entities
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetV1RegionsSharedtierParams defines parameters for GetV1RegionsSharedtier.
type GetV1RegionsSharedtierParams struct {
	// Fields Comma-separated values list that correspond to the filtered fields for returned entities
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetV1SecretsParams defines parameters for GetV1Secrets.
type GetV1SecretsParams struct {
	// Name Name of the secret.
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDJSONBody defines parameters for DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserID.
type DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDJSONBody = bool

// GetV1StageDeploymentIDFsPathParams defines parameters for GetV1StageDeploymentIDFsPath.
type GetV1StageDeploymentIDFsPathParams struct {
	// Metadata If enabled, the API request returns only metadata for the specified file instead of downloading it. This parameter is ignored if the specified path is a folder.
	Metadata *bool `form:"metadata,omitempty" json:"metadata,omitempty"`
}

// PatchV1StageDeploymentIDFsPathJSONBody defines parameters for PatchV1StageDeploymentIDFsPath.
type PatchV1StageDeploymentIDFsPathJSONBody struct {
	// NewPath New path of the file or folder
	NewPath *string `json:"newPath,omitempty"`
}

// PutV1StageDeploymentIDFsPathMultipartBody defines parameters for PutV1StageDeploymentIDFsPath.
type PutV1StageDeploymentIDFsPathMultipartBody struct {
	// File File to upload
	File *openapi_types.File `json:"file,omitempty"`
}

// GetV1TeamsParams defines parameters for GetV1Teams.
type GetV1TeamsParams struct {
	// Name Show only teams with names matching this value or regular expression.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Description Show only teams with descriptions matching this value or regular expression.
	Description *string `form:"description,omitempty" json:"description,omitempty"`
}

// GetV1TeamsTeamIDIdentityRolesParams defines parameters for GetV1TeamsTeamIDIdentityRoles.
type GetV1TeamsTeamIDIdentityRolesParams struct {
	// ResourceType Show only granted roles by resource type
	ResourceType *string `form:"resourceType,omitempty" json:"resourceType,omitempty"`
}

// GetV1UsersParams defines parameters for GetV1Users.
type GetV1UsersParams struct {
	// Email Show only users with an email address matching this value or regular expression.
	Email *string `form:"email,omitempty" json:"email,omitempty"`

	// Fields Comma-separated values list that correspond to the filtered fields for returned entities
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`
}

// PostV1UsersJSONBody defines parameters for PostV1Users.
type PostV1UsersJSONBody struct {
	// Email The email address of the user to add to the organization.
	Email openapi_types.Email `json:"email"`
}

// GetV1UsersCurrentParams defines parameters for GetV1UsersCurrent.
type GetV1UsersCurrentParams struct {
	// Fields Comma-separated values list that correspond to the filtered fields for returned entities
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetV1UsersUserIDParams defines parameters for GetV1UsersUserID.
type GetV1UsersUserIDParams struct {
	// Fields Comma-separated values list that correspond to the filtered fields for returned entities
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetV1UsersUserIDIdentityRolesParams defines parameters for GetV1UsersUserIDIdentityRoles.
type GetV1UsersUserIDIdentityRolesParams struct {
	// ResourceType Show only granted roles by resource type
	ResourceType *string `form:"resourceType,omitempty" json:"resourceType,omitempty"`
}

// GetV1WorkspaceGroupsParams defines parameters for GetV1WorkspaceGroups.
type GetV1WorkspaceGroupsParams struct {
	// IncludeTerminated To include any terminated workspace groups, set to `true`
	IncludeTerminated *bool `form:"includeTerminated,omitempty" json:"includeTerminated,omitempty"`

	// Fields Comma-separated values list that correspond to the filtered fields for returned entities
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`
}

// DeleteV1WorkspaceGroupsWorkspaceGroupIDParams defines parameters for DeleteV1WorkspaceGroupsWorkspaceGroupID.
type DeleteV1WorkspaceGroupsWorkspaceGroupIDParams struct {
	// Force To terminate a workspace group even if it has active workspaces, set to `true`
	Force *bool `form:"force,omitempty" json:"force,omitempty"`
}

// GetV1WorkspaceGroupsWorkspaceGroupIDParams defines parameters for GetV1WorkspaceGroupsWorkspaceGroupID.
type GetV1WorkspaceGroupsWorkspaceGroupIDParams struct {
	// Fields Comma-separated values list that correspond to the filtered fields for returned entities
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsParams defines parameters for GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnections.
type GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsParams struct {
	// Fields Comma-separated values list that correspond to the filtered fields for returned entities
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsParams defines parameters for GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegions.
type GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsParams struct {
	// Fields Comma-separated values list that correspond to the filtered fields for returned entities
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetV1WorkspacesParams defines parameters for GetV1Workspaces.
type GetV1WorkspacesParams struct {
	// WorkspaceGroupID ID of the workspace group
	WorkspaceGroupID openapi_types.UUID `form:"workspaceGroupID" json:"workspaceGroupID"`

	// IncludeTerminated To include any terminated workspaces, set to `true`
	IncludeTerminated *bool `form:"includeTerminated,omitempty" json:"includeTerminated,omitempty"`

	// Fields Comma-separated values list that correspond to the filtered fields for returned entities
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetV1WorkspacesWorkspaceIDParams defines parameters for GetV1WorkspacesWorkspaceID.
type GetV1WorkspacesWorkspaceIDParams struct {
	// Fields Comma-separated values list that correspond to the filtered fields for returned entities
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetV1WorkspacesWorkspaceIDPrivateConnectionsParams defines parameters for GetV1WorkspacesWorkspaceIDPrivateConnections.
type GetV1WorkspacesWorkspaceIDPrivateConnectionsParams struct {
	// Fields Comma-separated values list that correspond to the filtered fields for returned entities
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`
}

// GetV2RegionsParams defines parameters for GetV2Regions.
type GetV2RegionsParams struct {
	// Fields Comma-separated values list that correspond to the filtered fields for returned entities
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`
}

// PatchV1FilesFsLocationPathJSONRequestBody defines body for PatchV1FilesFsLocationPath for application/json ContentType.
type PatchV1FilesFsLocationPathJSONRequestBody PatchV1FilesFsLocationPathJSONBody

// PutV1FilesFsLocationPathMultipartRequestBody defines body for PutV1FilesFsLocationPath for multipart/form-data ContentType.
type PutV1FilesFsLocationPathMultipartRequestBody PutV1FilesFsLocationPathMultipartBody

// PostV1InvitationsJSONRequestBody defines body for PostV1Invitations for application/json ContentType.
type PostV1InvitationsJSONRequestBody = UserInvitationCreate

// PostV1JobsJSONRequestBody defines body for PostV1Jobs for application/json ContentType.
type PostV1JobsJSONRequestBody = JobCreate

// PatchV1OrganizationsOrganizationIDAccessControlsJSONRequestBody defines body for PatchV1OrganizationsOrganizationIDAccessControls for application/json ContentType.
type PatchV1OrganizationsOrganizationIDAccessControlsJSONRequestBody = ControlAccessAction

// PostV1PrivateConnectionsJSONRequestBody defines body for PostV1PrivateConnections for application/json ContentType.
type PostV1PrivateConnectionsJSONRequestBody = PrivateConnectionCreate

// PatchV1PrivateConnectionsConnectionIDJSONRequestBody defines body for PatchV1PrivateConnectionsConnectionID for application/json ContentType.
type PatchV1PrivateConnectionsConnectionIDJSONRequestBody = PrivateConnectionUpdate

// PostV1RolesResourceTypeJSONRequestBody defines body for PostV1RolesResourceType for application/json ContentType.
type PostV1RolesResourceTypeJSONRequestBody = RoleCreate

// PutV1RolesResourceTypeRoleJSONRequestBody defines body for PutV1RolesResourceTypeRole for application/json ContentType.
type PutV1RolesResourceTypeRoleJSONRequestBody = RoleUpdate

// PostV1SecretsJSONRequestBody defines body for PostV1Secrets for application/json ContentType.
type PostV1SecretsJSONRequestBody = SecretCreate

// PatchV1SecretsSecretIDJSONRequestBody defines body for PatchV1SecretsSecretID for application/json ContentType.
type PatchV1SecretsSecretIDJSONRequestBody = SecretUpdate

// PatchV1SecretsSecretIDAccessControlsJSONRequestBody defines body for PatchV1SecretsSecretIDAccessControls for application/json ContentType.
type PatchV1SecretsSecretIDAccessControlsJSONRequestBody = ControlAccessAction

// PostV1SharedtierVirtualWorkspacesJSONRequestBody defines body for PostV1SharedtierVirtualWorkspaces for application/json ContentType.
type PostV1SharedtierVirtualWorkspacesJSONRequestBody = SharedTierCreateVirtualWorkspace

// PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersJSONRequestBody defines body for PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsers for application/json ContentType.
type PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersJSONRequestBody = SharedTierCreateUser

// DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDJSONRequestBody defines body for DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserID for application/json ContentType.
type DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDJSONRequestBody = DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDJSONBody

// PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDJSONRequestBody defines body for PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserID for application/json ContentType.
type PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDJSONRequestBody = SharedTierUpdateUser

// PatchV1StageDeploymentIDFsPathJSONRequestBody defines body for PatchV1StageDeploymentIDFsPath for application/json ContentType.
type PatchV1StageDeploymentIDFsPathJSONRequestBody PatchV1StageDeploymentIDFsPathJSONBody

// PutV1StageDeploymentIDFsPathMultipartRequestBody defines body for PutV1StageDeploymentIDFsPath for multipart/form-data ContentType.
type PutV1StageDeploymentIDFsPathMultipartRequestBody PutV1StageDeploymentIDFsPathMultipartBody

// PostV1TeamsJSONRequestBody defines body for PostV1Teams for application/json ContentType.
type PostV1TeamsJSONRequestBody = TeamCreate

// PatchV1TeamsTeamIDJSONRequestBody defines body for PatchV1TeamsTeamID for application/json ContentType.
type PatchV1TeamsTeamIDJSONRequestBody = TeamUpdate

// PatchV1TeamsTeamIDAccessControlsJSONRequestBody defines body for PatchV1TeamsTeamIDAccessControls for application/json ContentType.
type PatchV1TeamsTeamIDAccessControlsJSONRequestBody = ControlAccessAction

// PostV1UsersJSONRequestBody defines body for PostV1Users for application/json ContentType.
type PostV1UsersJSONRequestBody PostV1UsersJSONBody

// PostV1WorkspaceGroupsJSONRequestBody defines body for PostV1WorkspaceGroups for application/json ContentType.
type PostV1WorkspaceGroupsJSONRequestBody = WorkspaceGroupCreate

// PatchV1WorkspaceGroupsWorkspaceGroupIDJSONRequestBody defines body for PatchV1WorkspaceGroupsWorkspaceGroupID for application/json ContentType.
type PatchV1WorkspaceGroupsWorkspaceGroupIDJSONRequestBody = WorkspaceGroupUpdate

// PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsJSONRequestBody defines body for PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControls for application/json ContentType.
type PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsJSONRequestBody = ControlAccessAction

// PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupJSONRequestBody defines body for PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetup for application/json ContentType.
type PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupJSONRequestBody = StorageDRSetup

// PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodJSONRequestBody defines body for PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriod for application/json ContentType.
type PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodJSONRequestBody = RetentionPeriodParams

// PostV1WorkspacesJSONRequestBody defines body for PostV1Workspaces for application/json ContentType.
type PostV1WorkspacesJSONRequestBody = WorkspaceCreate

// PatchV1WorkspacesWorkspaceIDJSONRequestBody defines body for PatchV1WorkspacesWorkspaceID for application/json ContentType.
type PatchV1WorkspacesWorkspaceIDJSONRequestBody = WorkspaceUpdate

// PostV1WorkspacesWorkspaceIDResumeJSONRequestBody defines body for PostV1WorkspacesWorkspaceIDResume for application/json ContentType.
type PostV1WorkspacesWorkspaceIDResumeJSONRequestBody = WorkspaceResume

// AsFileObjectMetadataContent0 returns the union data inside the FileObjectMetadata_Content as a FileObjectMetadataContent0
func (t FileObjectMetadata_Content) AsFileObjectMetadataContent0() (FileObjectMetadataContent0, error) {
	var body FileObjectMetadataContent0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileObjectMetadataContent0 overwrites any union data inside the FileObjectMetadata_Content as the provided FileObjectMetadataContent0
func (t *FileObjectMetadata_Content) FromFileObjectMetadataContent0(v FileObjectMetadataContent0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileObjectMetadataContent0 performs a merge with any union data inside the FileObjectMetadata_Content, using the provided FileObjectMetadataContent0
func (t *FileObjectMetadata_Content) MergeFileObjectMetadataContent0(v FileObjectMetadataContent0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsFileObjectMetadataContent1 returns the union data inside the FileObjectMetadata_Content as a FileObjectMetadataContent1
func (t FileObjectMetadata_Content) AsFileObjectMetadataContent1() (FileObjectMetadataContent1, error) {
	var body FileObjectMetadataContent1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileObjectMetadataContent1 overwrites any union data inside the FileObjectMetadata_Content as the provided FileObjectMetadataContent1
func (t *FileObjectMetadata_Content) FromFileObjectMetadataContent1(v FileObjectMetadataContent1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileObjectMetadataContent1 performs a merge with any union data inside the FileObjectMetadata_Content, using the provided FileObjectMetadataContent1
func (t *FileObjectMetadata_Content) MergeFileObjectMetadataContent1(v FileObjectMetadataContent1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t FileObjectMetadata_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FileObjectMetadata_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUserInfo returns the union data inside the ResourceRoleGrant_Identity as a UserInfo
func (t ResourceRoleGrant_Identity) AsUserInfo() (UserInfo, error) {
	var body UserInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserInfo overwrites any union data inside the ResourceRoleGrant_Identity as the provided UserInfo
func (t *ResourceRoleGrant_Identity) FromUserInfo(v UserInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserInfo performs a merge with any union data inside the ResourceRoleGrant_Identity, using the provided UserInfo
func (t *ResourceRoleGrant_Identity) MergeUserInfo(v UserInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsTeamInfo returns the union data inside the ResourceRoleGrant_Identity as a TeamInfo
func (t ResourceRoleGrant_Identity) AsTeamInfo() (TeamInfo, error) {
	var body TeamInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTeamInfo overwrites any union data inside the ResourceRoleGrant_Identity as the provided TeamInfo
func (t *ResourceRoleGrant_Identity) FromTeamInfo(v TeamInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTeamInfo performs a merge with any union data inside the ResourceRoleGrant_Identity, using the provided TeamInfo
func (t *ResourceRoleGrant_Identity) MergeTeamInfo(v TeamInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ResourceRoleGrant_Identity) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceRoleGrant_Identity) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV1AuditLogs request
	GetV1AuditLogs(ctx context.Context, params *GetV1AuditLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1BillingUsage request
	GetV1BillingUsage(ctx context.Context, params *GetV1BillingUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1FilesFsLocation request
	GetV1FilesFsLocation(ctx context.Context, location FileLocationSchema, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1FilesFsLocationPath request
	DeleteV1FilesFsLocationPath(ctx context.Context, location FileLocationSchema, path string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1FilesFsLocationPath request
	GetV1FilesFsLocationPath(ctx context.Context, location FileLocationSchema, path string, params *GetV1FilesFsLocationPathParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1FilesFsLocationPath request with any body
	PatchV1FilesFsLocationPathWithBody(ctx context.Context, location FileLocationSchema, path string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1FilesFsLocationPath(ctx context.Context, location FileLocationSchema, path string, body PatchV1FilesFsLocationPathJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1FilesFsLocationPath request with any body
	PutV1FilesFsLocationPathWithBody(ctx context.Context, location FileLocationSchema, path string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Invitations request
	GetV1Invitations(ctx context.Context, params *GetV1InvitationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1Invitations request with any body
	PostV1InvitationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Invitations(ctx context.Context, body PostV1InvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1InvitationsInvitationID request
	DeleteV1InvitationsInvitationID(ctx context.Context, invitationID InvitationID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1InvitationsInvitationID request
	GetV1InvitationsInvitationID(ctx context.Context, invitationID InvitationID, params *GetV1InvitationsInvitationIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1Jobs request with any body
	PostV1JobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Jobs(ctx context.Context, body PostV1JobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1JobsRuntimes request
	GetV1JobsRuntimes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1JobsJobID request
	DeleteV1JobsJobID(ctx context.Context, jobID JobID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1JobsJobID request
	GetV1JobsJobID(ctx context.Context, jobID JobID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1JobsJobIDExecutions request
	GetV1JobsJobIDExecutions(ctx context.Context, jobID JobID, params *GetV1JobsJobIDExecutionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1JobsJobIDParameters request
	GetV1JobsJobIDParameters(ctx context.Context, jobID JobID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1OrganizationsCurrent request
	GetV1OrganizationsCurrent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1OrganizationsOrganizationIDAccessControls request
	GetV1OrganizationsOrganizationIDAccessControls(ctx context.Context, organizationID OrganizationID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1OrganizationsOrganizationIDAccessControls request with any body
	PatchV1OrganizationsOrganizationIDAccessControlsWithBody(ctx context.Context, organizationID OrganizationID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1OrganizationsOrganizationIDAccessControls(ctx context.Context, organizationID OrganizationID, body PatchV1OrganizationsOrganizationIDAccessControlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1PrivateConnections request with any body
	PostV1PrivateConnectionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1PrivateConnections(ctx context.Context, body PostV1PrivateConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1PrivateConnectionsConnectionID request
	DeleteV1PrivateConnectionsConnectionID(ctx context.Context, connectionID ConnectionID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1PrivateConnectionsConnectionID request
	GetV1PrivateConnectionsConnectionID(ctx context.Context, connectionID ConnectionID, params *GetV1PrivateConnectionsConnectionIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1PrivateConnectionsConnectionID request with any body
	PatchV1PrivateConnectionsConnectionIDWithBody(ctx context.Context, connectionID ConnectionID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1PrivateConnectionsConnectionID(ctx context.Context, connectionID ConnectionID, body PatchV1PrivateConnectionsConnectionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Regions request
	GetV1Regions(ctx context.Context, params *GetV1RegionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1RegionsSharedtier request
	GetV1RegionsSharedtier(ctx context.Context, params *GetV1RegionsSharedtierParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1RolesResourceType request
	GetV1RolesResourceType(ctx context.Context, resourceType ResourceType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1RolesResourceType request with any body
	PostV1RolesResourceTypeWithBody(ctx context.Context, resourceType ResourceType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1RolesResourceType(ctx context.Context, resourceType ResourceType, body PostV1RolesResourceTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1RolesResourceTypeRole request
	DeleteV1RolesResourceTypeRole(ctx context.Context, resourceType ResourceType, role Role, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1RolesResourceTypeRole request
	GetV1RolesResourceTypeRole(ctx context.Context, resourceType ResourceType, role Role, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1RolesResourceTypeRole request with any body
	PutV1RolesResourceTypeRoleWithBody(ctx context.Context, resourceType ResourceType, role Role, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1RolesResourceTypeRole(ctx context.Context, resourceType ResourceType, role Role, body PutV1RolesResourceTypeRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Secrets request
	GetV1Secrets(ctx context.Context, params *GetV1SecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1Secrets request with any body
	PostV1SecretsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Secrets(ctx context.Context, body PostV1SecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1SecretsSecretID request
	DeleteV1SecretsSecretID(ctx context.Context, secretID SecretID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1SecretsSecretID request
	GetV1SecretsSecretID(ctx context.Context, secretID SecretID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1SecretsSecretID request with any body
	PatchV1SecretsSecretIDWithBody(ctx context.Context, secretID SecretID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1SecretsSecretID(ctx context.Context, secretID SecretID, body PatchV1SecretsSecretIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1SecretsSecretIDAccessControls request
	GetV1SecretsSecretIDAccessControls(ctx context.Context, secretID SecretID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1SecretsSecretIDAccessControls request with any body
	PatchV1SecretsSecretIDAccessControlsWithBody(ctx context.Context, secretID SecretID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1SecretsSecretIDAccessControls(ctx context.Context, secretID SecretID, body PatchV1SecretsSecretIDAccessControlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1SharedtierVirtualWorkspaces request
	GetV1SharedtierVirtualWorkspaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1SharedtierVirtualWorkspaces request with any body
	PostV1SharedtierVirtualWorkspacesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1SharedtierVirtualWorkspaces(ctx context.Context, body PostV1SharedtierVirtualWorkspacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceID request
	DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceID(ctx context.Context, virtualWorkspaceID openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1SharedtierVirtualWorkspacesVirtualWorkspaceID request
	GetV1SharedtierVirtualWorkspacesVirtualWorkspaceID(ctx context.Context, virtualWorkspaceID openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsers request with any body
	PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersWithBody(ctx context.Context, virtualWorkspaceID openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsers(ctx context.Context, virtualWorkspaceID openapi_types.UUID, body PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserID request with any body
	DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDWithBody(ctx context.Context, virtualWorkspaceID openapi_types.UUID, userID openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserID(ctx context.Context, virtualWorkspaceID openapi_types.UUID, userID openapi_types.UUID, body DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserID request with any body
	PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDWithBody(ctx context.Context, virtualWorkspaceID openapi_types.UUID, userID openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserID(ctx context.Context, virtualWorkspaceID openapi_types.UUID, userID openapi_types.UUID, body PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1StageDeploymentIDFs request
	GetV1StageDeploymentIDFs(ctx context.Context, deploymentID openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1StageDeploymentIDFsPath request
	DeleteV1StageDeploymentIDFsPath(ctx context.Context, deploymentID openapi_types.UUID, path string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1StageDeploymentIDFsPath request
	GetV1StageDeploymentIDFsPath(ctx context.Context, deploymentID openapi_types.UUID, path string, params *GetV1StageDeploymentIDFsPathParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1StageDeploymentIDFsPath request with any body
	PatchV1StageDeploymentIDFsPathWithBody(ctx context.Context, deploymentID openapi_types.UUID, path string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1StageDeploymentIDFsPath(ctx context.Context, deploymentID openapi_types.UUID, path string, body PatchV1StageDeploymentIDFsPathJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1StageDeploymentIDFsPath request with any body
	PutV1StageDeploymentIDFsPathWithBody(ctx context.Context, deploymentID openapi_types.UUID, path string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Teams request
	GetV1Teams(ctx context.Context, params *GetV1TeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1Teams request with any body
	PostV1TeamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Teams(ctx context.Context, body PostV1TeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1TeamsTeamID request
	DeleteV1TeamsTeamID(ctx context.Context, teamID TeamID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1TeamsTeamID request
	GetV1TeamsTeamID(ctx context.Context, teamID TeamID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1TeamsTeamID request with any body
	PatchV1TeamsTeamIDWithBody(ctx context.Context, teamID TeamID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1TeamsTeamID(ctx context.Context, teamID TeamID, body PatchV1TeamsTeamIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1TeamsTeamIDAccessControls request
	GetV1TeamsTeamIDAccessControls(ctx context.Context, teamID TeamID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1TeamsTeamIDAccessControls request with any body
	PatchV1TeamsTeamIDAccessControlsWithBody(ctx context.Context, teamID TeamID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1TeamsTeamIDAccessControls(ctx context.Context, teamID TeamID, body PatchV1TeamsTeamIDAccessControlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1TeamsTeamIDIdentityRoles request
	GetV1TeamsTeamIDIdentityRoles(ctx context.Context, teamID TeamID, params *GetV1TeamsTeamIDIdentityRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Users request
	GetV1Users(ctx context.Context, params *GetV1UsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1Users request with any body
	PostV1UsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Users(ctx context.Context, body PostV1UsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1UsersCurrent request
	GetV1UsersCurrent(ctx context.Context, params *GetV1UsersCurrentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1UsersUserID request
	DeleteV1UsersUserID(ctx context.Context, userID UserID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1UsersUserID request
	GetV1UsersUserID(ctx context.Context, userID UserID, params *GetV1UsersUserIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1UsersUserIDIdentityRoles request
	GetV1UsersUserIDIdentityRoles(ctx context.Context, userID UserID, params *GetV1UsersUserIDIdentityRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1WorkspaceGroups request
	GetV1WorkspaceGroups(ctx context.Context, params *GetV1WorkspaceGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1WorkspaceGroups request with any body
	PostV1WorkspaceGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1WorkspaceGroups(ctx context.Context, body PostV1WorkspaceGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1WorkspaceGroupsWorkspaceGroupID request
	DeleteV1WorkspaceGroupsWorkspaceGroupID(ctx context.Context, workspaceGroupID WorkspaceGroupID, params *DeleteV1WorkspaceGroupsWorkspaceGroupIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1WorkspaceGroupsWorkspaceGroupID request
	GetV1WorkspaceGroupsWorkspaceGroupID(ctx context.Context, workspaceGroupID WorkspaceGroupID, params *GetV1WorkspaceGroupsWorkspaceGroupIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1WorkspaceGroupsWorkspaceGroupID request with any body
	PatchV1WorkspaceGroupsWorkspaceGroupIDWithBody(ctx context.Context, workspaceGroupID WorkspaceGroupID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1WorkspaceGroupsWorkspaceGroupID(ctx context.Context, workspaceGroupID WorkspaceGroupID, body PatchV1WorkspaceGroupsWorkspaceGroupIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1WorkspaceGroupsWorkspaceGroupIDAccessControls request
	GetV1WorkspaceGroupsWorkspaceGroupIDAccessControls(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControls request with any body
	PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsWithBody(ctx context.Context, workspaceGroupID WorkspaceGroupID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControls(ctx context.Context, workspaceGroupID WorkspaceGroupID, body PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnections request
	GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnections(ctx context.Context, workspaceGroupID WorkspaceGroupID, params *GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailback request
	PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailback(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailover request
	PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailover(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegions request
	GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegions(ctx context.Context, workspaceGroupID WorkspaceGroupID, params *GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetup request with any body
	PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupWithBody(ctx context.Context, workspaceGroupID WorkspaceGroupID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetup(ctx context.Context, workspaceGroupID WorkspaceGroupID, body PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvision request
	PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvision(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatus request
	GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatus(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvision request
	PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvision(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriod request with any body
	PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodWithBody(ctx context.Context, workspaceGroupID WorkspaceGroupID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriod(ctx context.Context, workspaceGroupID WorkspaceGroupID, body PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Workspaces request
	GetV1Workspaces(ctx context.Context, params *GetV1WorkspacesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1Workspaces request with any body
	PostV1WorkspacesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Workspaces(ctx context.Context, body PostV1WorkspacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1WorkspacesWorkspaceID request
	DeleteV1WorkspacesWorkspaceID(ctx context.Context, workspaceID WorkspaceID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1WorkspacesWorkspaceID request
	GetV1WorkspacesWorkspaceID(ctx context.Context, workspaceID WorkspaceID, params *GetV1WorkspacesWorkspaceIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1WorkspacesWorkspaceID request with any body
	PatchV1WorkspacesWorkspaceIDWithBody(ctx context.Context, workspaceID WorkspaceID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1WorkspacesWorkspaceID(ctx context.Context, workspaceID WorkspaceID, body PatchV1WorkspacesWorkspaceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1WorkspacesWorkspaceIDPrivateConnections request
	GetV1WorkspacesWorkspaceIDPrivateConnections(ctx context.Context, workspaceID WorkspaceID, params *GetV1WorkspacesWorkspaceIDPrivateConnectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1WorkspacesWorkspaceIDPrivateConnectionsKai request
	GetV1WorkspacesWorkspaceIDPrivateConnectionsKai(ctx context.Context, workspaceID openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowList request
	GetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowList(ctx context.Context, workspaceID WorkspaceID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1WorkspacesWorkspaceIDResume request with any body
	PostV1WorkspacesWorkspaceIDResumeWithBody(ctx context.Context, workspaceID WorkspaceID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1WorkspacesWorkspaceIDResume(ctx context.Context, workspaceID WorkspaceID, body PostV1WorkspacesWorkspaceIDResumeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1WorkspacesWorkspaceIDSuspend request
	PostV1WorkspacesWorkspaceIDSuspend(ctx context.Context, workspaceID WorkspaceID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetrics request
	GetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetrics(ctx context.Context, organizationID OrganizationID, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2Regions request
	GetV2Regions(ctx context.Context, params *GetV2RegionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV1AuditLogs(ctx context.Context, params *GetV1AuditLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AuditLogsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1BillingUsage(ctx context.Context, params *GetV1BillingUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1BillingUsageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1FilesFsLocation(ctx context.Context, location FileLocationSchema, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1FilesFsLocationRequest(c.Server, location)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1FilesFsLocationPath(ctx context.Context, location FileLocationSchema, path string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1FilesFsLocationPathRequest(c.Server, location, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1FilesFsLocationPath(ctx context.Context, location FileLocationSchema, path string, params *GetV1FilesFsLocationPathParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1FilesFsLocationPathRequest(c.Server, location, path, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1FilesFsLocationPathWithBody(ctx context.Context, location FileLocationSchema, path string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1FilesFsLocationPathRequestWithBody(c.Server, location, path, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1FilesFsLocationPath(ctx context.Context, location FileLocationSchema, path string, body PatchV1FilesFsLocationPathJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1FilesFsLocationPathRequest(c.Server, location, path, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1FilesFsLocationPathWithBody(ctx context.Context, location FileLocationSchema, path string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1FilesFsLocationPathRequestWithBody(c.Server, location, path, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Invitations(ctx context.Context, params *GetV1InvitationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1InvitationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1InvitationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1InvitationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Invitations(ctx context.Context, body PostV1InvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1InvitationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1InvitationsInvitationID(ctx context.Context, invitationID InvitationID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1InvitationsInvitationIDRequest(c.Server, invitationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1InvitationsInvitationID(ctx context.Context, invitationID InvitationID, params *GetV1InvitationsInvitationIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1InvitationsInvitationIDRequest(c.Server, invitationID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1JobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1JobsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Jobs(ctx context.Context, body PostV1JobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1JobsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1JobsRuntimes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1JobsRuntimesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1JobsJobID(ctx context.Context, jobID JobID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1JobsJobIDRequest(c.Server, jobID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1JobsJobID(ctx context.Context, jobID JobID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1JobsJobIDRequest(c.Server, jobID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1JobsJobIDExecutions(ctx context.Context, jobID JobID, params *GetV1JobsJobIDExecutionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1JobsJobIDExecutionsRequest(c.Server, jobID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1JobsJobIDParameters(ctx context.Context, jobID JobID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1JobsJobIDParametersRequest(c.Server, jobID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1OrganizationsCurrent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1OrganizationsCurrentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1OrganizationsOrganizationIDAccessControls(ctx context.Context, organizationID OrganizationID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1OrganizationsOrganizationIDAccessControlsRequest(c.Server, organizationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1OrganizationsOrganizationIDAccessControlsWithBody(ctx context.Context, organizationID OrganizationID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1OrganizationsOrganizationIDAccessControlsRequestWithBody(c.Server, organizationID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1OrganizationsOrganizationIDAccessControls(ctx context.Context, organizationID OrganizationID, body PatchV1OrganizationsOrganizationIDAccessControlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1OrganizationsOrganizationIDAccessControlsRequest(c.Server, organizationID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1PrivateConnectionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PrivateConnectionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1PrivateConnections(ctx context.Context, body PostV1PrivateConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PrivateConnectionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1PrivateConnectionsConnectionID(ctx context.Context, connectionID ConnectionID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1PrivateConnectionsConnectionIDRequest(c.Server, connectionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1PrivateConnectionsConnectionID(ctx context.Context, connectionID ConnectionID, params *GetV1PrivateConnectionsConnectionIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1PrivateConnectionsConnectionIDRequest(c.Server, connectionID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1PrivateConnectionsConnectionIDWithBody(ctx context.Context, connectionID ConnectionID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1PrivateConnectionsConnectionIDRequestWithBody(c.Server, connectionID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1PrivateConnectionsConnectionID(ctx context.Context, connectionID ConnectionID, body PatchV1PrivateConnectionsConnectionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1PrivateConnectionsConnectionIDRequest(c.Server, connectionID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Regions(ctx context.Context, params *GetV1RegionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1RegionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1RegionsSharedtier(ctx context.Context, params *GetV1RegionsSharedtierParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1RegionsSharedtierRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1RolesResourceType(ctx context.Context, resourceType ResourceType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1RolesResourceTypeRequest(c.Server, resourceType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1RolesResourceTypeWithBody(ctx context.Context, resourceType ResourceType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1RolesResourceTypeRequestWithBody(c.Server, resourceType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1RolesResourceType(ctx context.Context, resourceType ResourceType, body PostV1RolesResourceTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1RolesResourceTypeRequest(c.Server, resourceType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1RolesResourceTypeRole(ctx context.Context, resourceType ResourceType, role Role, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1RolesResourceTypeRoleRequest(c.Server, resourceType, role)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1RolesResourceTypeRole(ctx context.Context, resourceType ResourceType, role Role, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1RolesResourceTypeRoleRequest(c.Server, resourceType, role)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1RolesResourceTypeRoleWithBody(ctx context.Context, resourceType ResourceType, role Role, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1RolesResourceTypeRoleRequestWithBody(c.Server, resourceType, role, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1RolesResourceTypeRole(ctx context.Context, resourceType ResourceType, role Role, body PutV1RolesResourceTypeRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1RolesResourceTypeRoleRequest(c.Server, resourceType, role, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Secrets(ctx context.Context, params *GetV1SecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1SecretsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SecretsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SecretsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Secrets(ctx context.Context, body PostV1SecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SecretsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1SecretsSecretID(ctx context.Context, secretID SecretID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1SecretsSecretIDRequest(c.Server, secretID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1SecretsSecretID(ctx context.Context, secretID SecretID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1SecretsSecretIDRequest(c.Server, secretID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1SecretsSecretIDWithBody(ctx context.Context, secretID SecretID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1SecretsSecretIDRequestWithBody(c.Server, secretID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1SecretsSecretID(ctx context.Context, secretID SecretID, body PatchV1SecretsSecretIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1SecretsSecretIDRequest(c.Server, secretID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1SecretsSecretIDAccessControls(ctx context.Context, secretID SecretID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1SecretsSecretIDAccessControlsRequest(c.Server, secretID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1SecretsSecretIDAccessControlsWithBody(ctx context.Context, secretID SecretID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1SecretsSecretIDAccessControlsRequestWithBody(c.Server, secretID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1SecretsSecretIDAccessControls(ctx context.Context, secretID SecretID, body PatchV1SecretsSecretIDAccessControlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1SecretsSecretIDAccessControlsRequest(c.Server, secretID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1SharedtierVirtualWorkspaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1SharedtierVirtualWorkspacesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SharedtierVirtualWorkspacesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SharedtierVirtualWorkspacesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SharedtierVirtualWorkspaces(ctx context.Context, body PostV1SharedtierVirtualWorkspacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SharedtierVirtualWorkspacesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceID(ctx context.Context, virtualWorkspaceID openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDRequest(c.Server, virtualWorkspaceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1SharedtierVirtualWorkspacesVirtualWorkspaceID(ctx context.Context, virtualWorkspaceID openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1SharedtierVirtualWorkspacesVirtualWorkspaceIDRequest(c.Server, virtualWorkspaceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersWithBody(ctx context.Context, virtualWorkspaceID openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersRequestWithBody(c.Server, virtualWorkspaceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsers(ctx context.Context, virtualWorkspaceID openapi_types.UUID, body PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersRequest(c.Server, virtualWorkspaceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDWithBody(ctx context.Context, virtualWorkspaceID openapi_types.UUID, userID openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDRequestWithBody(c.Server, virtualWorkspaceID, userID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserID(ctx context.Context, virtualWorkspaceID openapi_types.UUID, userID openapi_types.UUID, body DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDRequest(c.Server, virtualWorkspaceID, userID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDWithBody(ctx context.Context, virtualWorkspaceID openapi_types.UUID, userID openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDRequestWithBody(c.Server, virtualWorkspaceID, userID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserID(ctx context.Context, virtualWorkspaceID openapi_types.UUID, userID openapi_types.UUID, body PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDRequest(c.Server, virtualWorkspaceID, userID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1StageDeploymentIDFs(ctx context.Context, deploymentID openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1StageDeploymentIDFsRequest(c.Server, deploymentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1StageDeploymentIDFsPath(ctx context.Context, deploymentID openapi_types.UUID, path string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1StageDeploymentIDFsPathRequest(c.Server, deploymentID, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1StageDeploymentIDFsPath(ctx context.Context, deploymentID openapi_types.UUID, path string, params *GetV1StageDeploymentIDFsPathParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1StageDeploymentIDFsPathRequest(c.Server, deploymentID, path, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1StageDeploymentIDFsPathWithBody(ctx context.Context, deploymentID openapi_types.UUID, path string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1StageDeploymentIDFsPathRequestWithBody(c.Server, deploymentID, path, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1StageDeploymentIDFsPath(ctx context.Context, deploymentID openapi_types.UUID, path string, body PatchV1StageDeploymentIDFsPathJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1StageDeploymentIDFsPathRequest(c.Server, deploymentID, path, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1StageDeploymentIDFsPathWithBody(ctx context.Context, deploymentID openapi_types.UUID, path string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1StageDeploymentIDFsPathRequestWithBody(c.Server, deploymentID, path, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Teams(ctx context.Context, params *GetV1TeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1TeamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1TeamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1TeamsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Teams(ctx context.Context, body PostV1TeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1TeamsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1TeamsTeamID(ctx context.Context, teamID TeamID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1TeamsTeamIDRequest(c.Server, teamID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1TeamsTeamID(ctx context.Context, teamID TeamID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1TeamsTeamIDRequest(c.Server, teamID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1TeamsTeamIDWithBody(ctx context.Context, teamID TeamID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1TeamsTeamIDRequestWithBody(c.Server, teamID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1TeamsTeamID(ctx context.Context, teamID TeamID, body PatchV1TeamsTeamIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1TeamsTeamIDRequest(c.Server, teamID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1TeamsTeamIDAccessControls(ctx context.Context, teamID TeamID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1TeamsTeamIDAccessControlsRequest(c.Server, teamID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1TeamsTeamIDAccessControlsWithBody(ctx context.Context, teamID TeamID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1TeamsTeamIDAccessControlsRequestWithBody(c.Server, teamID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1TeamsTeamIDAccessControls(ctx context.Context, teamID TeamID, body PatchV1TeamsTeamIDAccessControlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1TeamsTeamIDAccessControlsRequest(c.Server, teamID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1TeamsTeamIDIdentityRoles(ctx context.Context, teamID TeamID, params *GetV1TeamsTeamIDIdentityRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1TeamsTeamIDIdentityRolesRequest(c.Server, teamID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Users(ctx context.Context, params *GetV1UsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1UsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1UsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1UsersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Users(ctx context.Context, body PostV1UsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1UsersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1UsersCurrent(ctx context.Context, params *GetV1UsersCurrentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1UsersCurrentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1UsersUserID(ctx context.Context, userID UserID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1UsersUserIDRequest(c.Server, userID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1UsersUserID(ctx context.Context, userID UserID, params *GetV1UsersUserIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1UsersUserIDRequest(c.Server, userID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1UsersUserIDIdentityRoles(ctx context.Context, userID UserID, params *GetV1UsersUserIDIdentityRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1UsersUserIDIdentityRolesRequest(c.Server, userID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1WorkspaceGroups(ctx context.Context, params *GetV1WorkspaceGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1WorkspaceGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1WorkspaceGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1WorkspaceGroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1WorkspaceGroups(ctx context.Context, body PostV1WorkspaceGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1WorkspaceGroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1WorkspaceGroupsWorkspaceGroupID(ctx context.Context, workspaceGroupID WorkspaceGroupID, params *DeleteV1WorkspaceGroupsWorkspaceGroupIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1WorkspaceGroupsWorkspaceGroupIDRequest(c.Server, workspaceGroupID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1WorkspaceGroupsWorkspaceGroupID(ctx context.Context, workspaceGroupID WorkspaceGroupID, params *GetV1WorkspaceGroupsWorkspaceGroupIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1WorkspaceGroupsWorkspaceGroupIDRequest(c.Server, workspaceGroupID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1WorkspaceGroupsWorkspaceGroupIDWithBody(ctx context.Context, workspaceGroupID WorkspaceGroupID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1WorkspaceGroupsWorkspaceGroupIDRequestWithBody(c.Server, workspaceGroupID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1WorkspaceGroupsWorkspaceGroupID(ctx context.Context, workspaceGroupID WorkspaceGroupID, body PatchV1WorkspaceGroupsWorkspaceGroupIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1WorkspaceGroupsWorkspaceGroupIDRequest(c.Server, workspaceGroupID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1WorkspaceGroupsWorkspaceGroupIDAccessControls(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1WorkspaceGroupsWorkspaceGroupIDAccessControlsRequest(c.Server, workspaceGroupID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsWithBody(ctx context.Context, workspaceGroupID WorkspaceGroupID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsRequestWithBody(c.Server, workspaceGroupID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControls(ctx context.Context, workspaceGroupID WorkspaceGroupID, body PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsRequest(c.Server, workspaceGroupID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnections(ctx context.Context, workspaceGroupID WorkspaceGroupID, params *GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsRequest(c.Server, workspaceGroupID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailback(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailbackRequest(c.Server, workspaceGroupID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailover(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailoverRequest(c.Server, workspaceGroupID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegions(ctx context.Context, workspaceGroupID WorkspaceGroupID, params *GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsRequest(c.Server, workspaceGroupID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupWithBody(ctx context.Context, workspaceGroupID WorkspaceGroupID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupRequestWithBody(c.Server, workspaceGroupID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetup(ctx context.Context, workspaceGroupID WorkspaceGroupID, body PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupRequest(c.Server, workspaceGroupID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvision(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvisionRequest(c.Server, workspaceGroupID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatus(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatusRequest(c.Server, workspaceGroupID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvision(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvisionRequest(c.Server, workspaceGroupID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodWithBody(ctx context.Context, workspaceGroupID WorkspaceGroupID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodRequestWithBody(c.Server, workspaceGroupID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriod(ctx context.Context, workspaceGroupID WorkspaceGroupID, body PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodRequest(c.Server, workspaceGroupID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Workspaces(ctx context.Context, params *GetV1WorkspacesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1WorkspacesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1WorkspacesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1WorkspacesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Workspaces(ctx context.Context, body PostV1WorkspacesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1WorkspacesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1WorkspacesWorkspaceID(ctx context.Context, workspaceID WorkspaceID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1WorkspacesWorkspaceIDRequest(c.Server, workspaceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1WorkspacesWorkspaceID(ctx context.Context, workspaceID WorkspaceID, params *GetV1WorkspacesWorkspaceIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1WorkspacesWorkspaceIDRequest(c.Server, workspaceID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1WorkspacesWorkspaceIDWithBody(ctx context.Context, workspaceID WorkspaceID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1WorkspacesWorkspaceIDRequestWithBody(c.Server, workspaceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1WorkspacesWorkspaceID(ctx context.Context, workspaceID WorkspaceID, body PatchV1WorkspacesWorkspaceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1WorkspacesWorkspaceIDRequest(c.Server, workspaceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1WorkspacesWorkspaceIDPrivateConnections(ctx context.Context, workspaceID WorkspaceID, params *GetV1WorkspacesWorkspaceIDPrivateConnectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1WorkspacesWorkspaceIDPrivateConnectionsRequest(c.Server, workspaceID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1WorkspacesWorkspaceIDPrivateConnectionsKai(ctx context.Context, workspaceID openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1WorkspacesWorkspaceIDPrivateConnectionsKaiRequest(c.Server, workspaceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowList(ctx context.Context, workspaceID WorkspaceID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowListRequest(c.Server, workspaceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1WorkspacesWorkspaceIDResumeWithBody(ctx context.Context, workspaceID WorkspaceID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1WorkspacesWorkspaceIDResumeRequestWithBody(c.Server, workspaceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1WorkspacesWorkspaceIDResume(ctx context.Context, workspaceID WorkspaceID, body PostV1WorkspacesWorkspaceIDResumeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1WorkspacesWorkspaceIDResumeRequest(c.Server, workspaceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1WorkspacesWorkspaceIDSuspend(ctx context.Context, workspaceID WorkspaceID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1WorkspacesWorkspaceIDSuspendRequest(c.Server, workspaceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetrics(ctx context.Context, organizationID OrganizationID, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetricsRequest(c.Server, organizationID, workspaceGroupID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Regions(ctx context.Context, params *GetV2RegionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2RegionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV1AuditLogsRequest generates requests for GetV1AuditLogs
func NewGetV1AuditLogsRequest(server string, params *GetV1AuditLogsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auditLogs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Source != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source", runtime.ParamLocationQuery, *params.Source); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startDate", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endDate", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NextToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FirstName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "firstName", runtime.ParamLocationQuery, *params.FirstName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LastName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastName", runtime.ParamLocationQuery, *params.LastName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1BillingUsageRequest generates requests for GetV1BillingUsage
func NewGetV1BillingUsageRequest(server string, params *GetV1BillingUsageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/billing/usage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Metric != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metric", runtime.ParamLocationQuery, *params.Metric); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.AggregateBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aggregateBy", runtime.ParamLocationQuery, *params.AggregateBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1FilesFsLocationRequest generates requests for GetV1FilesFsLocation
func NewGetV1FilesFsLocationRequest(server string, location FileLocationSchema) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "location", runtime.ParamLocationPath, location)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/files/fs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1FilesFsLocationPathRequest generates requests for DeleteV1FilesFsLocationPath
func NewDeleteV1FilesFsLocationPathRequest(server string, location FileLocationSchema, path string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "location", runtime.ParamLocationPath, location)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/files/fs/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1FilesFsLocationPathRequest generates requests for GetV1FilesFsLocationPath
func NewGetV1FilesFsLocationPathRequest(server string, location FileLocationSchema, path string, params *GetV1FilesFsLocationPathParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "location", runtime.ParamLocationPath, location)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/files/fs/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Metadata != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metadata", runtime.ParamLocationQuery, *params.Metadata); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1FilesFsLocationPathRequest calls the generic PatchV1FilesFsLocationPath builder with application/json body
func NewPatchV1FilesFsLocationPathRequest(server string, location FileLocationSchema, path string, body PatchV1FilesFsLocationPathJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1FilesFsLocationPathRequestWithBody(server, location, path, "application/json", bodyReader)
}

// NewPatchV1FilesFsLocationPathRequestWithBody generates requests for PatchV1FilesFsLocationPath with any type of body
func NewPatchV1FilesFsLocationPathRequestWithBody(server string, location FileLocationSchema, path string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "location", runtime.ParamLocationPath, location)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/files/fs/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV1FilesFsLocationPathRequestWithBody generates requests for PutV1FilesFsLocationPath with any type of body
func NewPutV1FilesFsLocationPathRequestWithBody(server string, location FileLocationSchema, path string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "location", runtime.ParamLocationPath, location)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/files/fs/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1InvitationsRequest generates requests for GetV1Invitations
func NewGetV1InvitationsRequest(server string, params *GetV1InvitationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/invitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Email != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1InvitationsRequest calls the generic PostV1Invitations builder with application/json body
func NewPostV1InvitationsRequest(server string, body PostV1InvitationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1InvitationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1InvitationsRequestWithBody generates requests for PostV1Invitations with any type of body
func NewPostV1InvitationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/invitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1InvitationsInvitationIDRequest generates requests for DeleteV1InvitationsInvitationID
func NewDeleteV1InvitationsInvitationIDRequest(server string, invitationID InvitationID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invitationID", runtime.ParamLocationPath, invitationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/invitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1InvitationsInvitationIDRequest generates requests for GetV1InvitationsInvitationID
func NewGetV1InvitationsInvitationIDRequest(server string, invitationID InvitationID, params *GetV1InvitationsInvitationIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invitationID", runtime.ParamLocationPath, invitationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/invitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1JobsRequest calls the generic PostV1Jobs builder with application/json body
func NewPostV1JobsRequest(server string, body PostV1JobsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1JobsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1JobsRequestWithBody generates requests for PostV1Jobs with any type of body
func NewPostV1JobsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1JobsRuntimesRequest generates requests for GetV1JobsRuntimes
func NewGetV1JobsRuntimesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jobs/runtimes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1JobsJobIDRequest generates requests for DeleteV1JobsJobID
func NewDeleteV1JobsJobIDRequest(server string, jobID JobID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobID", runtime.ParamLocationPath, jobID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1JobsJobIDRequest generates requests for GetV1JobsJobID
func NewGetV1JobsJobIDRequest(server string, jobID JobID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobID", runtime.ParamLocationPath, jobID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1JobsJobIDExecutionsRequest generates requests for GetV1JobsJobIDExecutions
func NewGetV1JobsJobIDExecutionsRequest(server string, jobID JobID, params *GetV1JobsJobIDExecutionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobID", runtime.ParamLocationPath, jobID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jobs/%s/executions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, params.Start); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, params.End); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1JobsJobIDParametersRequest generates requests for GetV1JobsJobIDParameters
func NewGetV1JobsJobIDParametersRequest(server string, jobID JobID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobID", runtime.ParamLocationPath, jobID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jobs/%s/parameters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1OrganizationsCurrentRequest generates requests for GetV1OrganizationsCurrent
func NewGetV1OrganizationsCurrentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/current")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1OrganizationsOrganizationIDAccessControlsRequest generates requests for GetV1OrganizationsOrganizationIDAccessControls
func NewGetV1OrganizationsOrganizationIDAccessControlsRequest(server string, organizationID OrganizationID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/accessControls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1OrganizationsOrganizationIDAccessControlsRequest calls the generic PatchV1OrganizationsOrganizationIDAccessControls builder with application/json body
func NewPatchV1OrganizationsOrganizationIDAccessControlsRequest(server string, organizationID OrganizationID, body PatchV1OrganizationsOrganizationIDAccessControlsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1OrganizationsOrganizationIDAccessControlsRequestWithBody(server, organizationID, "application/json", bodyReader)
}

// NewPatchV1OrganizationsOrganizationIDAccessControlsRequestWithBody generates requests for PatchV1OrganizationsOrganizationIDAccessControls with any type of body
func NewPatchV1OrganizationsOrganizationIDAccessControlsRequestWithBody(server string, organizationID OrganizationID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/accessControls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1PrivateConnectionsRequest calls the generic PostV1PrivateConnections builder with application/json body
func NewPostV1PrivateConnectionsRequest(server string, body PostV1PrivateConnectionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1PrivateConnectionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1PrivateConnectionsRequestWithBody generates requests for PostV1PrivateConnections with any type of body
func NewPostV1PrivateConnectionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/privateConnections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1PrivateConnectionsConnectionIDRequest generates requests for DeleteV1PrivateConnectionsConnectionID
func NewDeleteV1PrivateConnectionsConnectionIDRequest(server string, connectionID ConnectionID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connectionID", runtime.ParamLocationPath, connectionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/privateConnections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1PrivateConnectionsConnectionIDRequest generates requests for GetV1PrivateConnectionsConnectionID
func NewGetV1PrivateConnectionsConnectionIDRequest(server string, connectionID ConnectionID, params *GetV1PrivateConnectionsConnectionIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connectionID", runtime.ParamLocationPath, connectionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/privateConnections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1PrivateConnectionsConnectionIDRequest calls the generic PatchV1PrivateConnectionsConnectionID builder with application/json body
func NewPatchV1PrivateConnectionsConnectionIDRequest(server string, connectionID ConnectionID, body PatchV1PrivateConnectionsConnectionIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1PrivateConnectionsConnectionIDRequestWithBody(server, connectionID, "application/json", bodyReader)
}

// NewPatchV1PrivateConnectionsConnectionIDRequestWithBody generates requests for PatchV1PrivateConnectionsConnectionID with any type of body
func NewPatchV1PrivateConnectionsConnectionIDRequestWithBody(server string, connectionID ConnectionID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "connectionID", runtime.ParamLocationPath, connectionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/privateConnections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1RegionsRequest generates requests for GetV1Regions
func NewGetV1RegionsRequest(server string, params *GetV1RegionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/regions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1RegionsSharedtierRequest generates requests for GetV1RegionsSharedtier
func NewGetV1RegionsSharedtierRequest(server string, params *GetV1RegionsSharedtierParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/regions/sharedtier")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1RolesResourceTypeRequest generates requests for GetV1RolesResourceType
func NewGetV1RolesResourceTypeRequest(server string, resourceType ResourceType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceType", runtime.ParamLocationPath, resourceType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1RolesResourceTypeRequest calls the generic PostV1RolesResourceType builder with application/json body
func NewPostV1RolesResourceTypeRequest(server string, resourceType ResourceType, body PostV1RolesResourceTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1RolesResourceTypeRequestWithBody(server, resourceType, "application/json", bodyReader)
}

// NewPostV1RolesResourceTypeRequestWithBody generates requests for PostV1RolesResourceType with any type of body
func NewPostV1RolesResourceTypeRequestWithBody(server string, resourceType ResourceType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceType", runtime.ParamLocationPath, resourceType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1RolesResourceTypeRoleRequest generates requests for DeleteV1RolesResourceTypeRole
func NewDeleteV1RolesResourceTypeRoleRequest(server string, resourceType ResourceType, role Role) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceType", runtime.ParamLocationPath, resourceType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role", runtime.ParamLocationPath, role)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1RolesResourceTypeRoleRequest generates requests for GetV1RolesResourceTypeRole
func NewGetV1RolesResourceTypeRoleRequest(server string, resourceType ResourceType, role Role) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceType", runtime.ParamLocationPath, resourceType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role", runtime.ParamLocationPath, role)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1RolesResourceTypeRoleRequest calls the generic PutV1RolesResourceTypeRole builder with application/json body
func NewPutV1RolesResourceTypeRoleRequest(server string, resourceType ResourceType, role Role, body PutV1RolesResourceTypeRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1RolesResourceTypeRoleRequestWithBody(server, resourceType, role, "application/json", bodyReader)
}

// NewPutV1RolesResourceTypeRoleRequestWithBody generates requests for PutV1RolesResourceTypeRole with any type of body
func NewPutV1RolesResourceTypeRoleRequestWithBody(server string, resourceType ResourceType, role Role, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceType", runtime.ParamLocationPath, resourceType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role", runtime.ParamLocationPath, role)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/roles/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1SecretsRequest generates requests for GetV1Secrets
func NewGetV1SecretsRequest(server string, params *GetV1SecretsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1SecretsRequest calls the generic PostV1Secrets builder with application/json body
func NewPostV1SecretsRequest(server string, body PostV1SecretsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1SecretsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1SecretsRequestWithBody generates requests for PostV1Secrets with any type of body
func NewPostV1SecretsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1SecretsSecretIDRequest generates requests for DeleteV1SecretsSecretID
func NewDeleteV1SecretsSecretIDRequest(server string, secretID SecretID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secretID", runtime.ParamLocationPath, secretID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/secrets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1SecretsSecretIDRequest generates requests for GetV1SecretsSecretID
func NewGetV1SecretsSecretIDRequest(server string, secretID SecretID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secretID", runtime.ParamLocationPath, secretID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/secrets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1SecretsSecretIDRequest calls the generic PatchV1SecretsSecretID builder with application/json body
func NewPatchV1SecretsSecretIDRequest(server string, secretID SecretID, body PatchV1SecretsSecretIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1SecretsSecretIDRequestWithBody(server, secretID, "application/json", bodyReader)
}

// NewPatchV1SecretsSecretIDRequestWithBody generates requests for PatchV1SecretsSecretID with any type of body
func NewPatchV1SecretsSecretIDRequestWithBody(server string, secretID SecretID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secretID", runtime.ParamLocationPath, secretID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/secrets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1SecretsSecretIDAccessControlsRequest generates requests for GetV1SecretsSecretIDAccessControls
func NewGetV1SecretsSecretIDAccessControlsRequest(server string, secretID SecretID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secretID", runtime.ParamLocationPath, secretID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/secrets/%s/accessControls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1SecretsSecretIDAccessControlsRequest calls the generic PatchV1SecretsSecretIDAccessControls builder with application/json body
func NewPatchV1SecretsSecretIDAccessControlsRequest(server string, secretID SecretID, body PatchV1SecretsSecretIDAccessControlsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1SecretsSecretIDAccessControlsRequestWithBody(server, secretID, "application/json", bodyReader)
}

// NewPatchV1SecretsSecretIDAccessControlsRequestWithBody generates requests for PatchV1SecretsSecretIDAccessControls with any type of body
func NewPatchV1SecretsSecretIDAccessControlsRequestWithBody(server string, secretID SecretID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secretID", runtime.ParamLocationPath, secretID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/secrets/%s/accessControls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1SharedtierVirtualWorkspacesRequest generates requests for GetV1SharedtierVirtualWorkspaces
func NewGetV1SharedtierVirtualWorkspacesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sharedtier/virtualWorkspaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1SharedtierVirtualWorkspacesRequest calls the generic PostV1SharedtierVirtualWorkspaces builder with application/json body
func NewPostV1SharedtierVirtualWorkspacesRequest(server string, body PostV1SharedtierVirtualWorkspacesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1SharedtierVirtualWorkspacesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1SharedtierVirtualWorkspacesRequestWithBody generates requests for PostV1SharedtierVirtualWorkspaces with any type of body
func NewPostV1SharedtierVirtualWorkspacesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sharedtier/virtualWorkspaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDRequest generates requests for DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceID
func NewDeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDRequest(server string, virtualWorkspaceID openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualWorkspaceID", runtime.ParamLocationPath, virtualWorkspaceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sharedtier/virtualWorkspaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1SharedtierVirtualWorkspacesVirtualWorkspaceIDRequest generates requests for GetV1SharedtierVirtualWorkspacesVirtualWorkspaceID
func NewGetV1SharedtierVirtualWorkspacesVirtualWorkspaceIDRequest(server string, virtualWorkspaceID openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualWorkspaceID", runtime.ParamLocationPath, virtualWorkspaceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sharedtier/virtualWorkspaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersRequest calls the generic PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsers builder with application/json body
func NewPostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersRequest(server string, virtualWorkspaceID openapi_types.UUID, body PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersRequestWithBody(server, virtualWorkspaceID, "application/json", bodyReader)
}

// NewPostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersRequestWithBody generates requests for PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsers with any type of body
func NewPostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersRequestWithBody(server string, virtualWorkspaceID openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualWorkspaceID", runtime.ParamLocationPath, virtualWorkspaceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sharedtier/virtualWorkspaces/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDRequest calls the generic DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserID builder with application/json body
func NewDeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDRequest(server string, virtualWorkspaceID openapi_types.UUID, userID openapi_types.UUID, body DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDRequestWithBody(server, virtualWorkspaceID, userID, "application/json", bodyReader)
}

// NewDeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDRequestWithBody generates requests for DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserID with any type of body
func NewDeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDRequestWithBody(server string, virtualWorkspaceID openapi_types.UUID, userID openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualWorkspaceID", runtime.ParamLocationPath, virtualWorkspaceID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sharedtier/virtualWorkspaces/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDRequest calls the generic PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserID builder with application/json body
func NewPatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDRequest(server string, virtualWorkspaceID openapi_types.UUID, userID openapi_types.UUID, body PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDRequestWithBody(server, virtualWorkspaceID, userID, "application/json", bodyReader)
}

// NewPatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDRequestWithBody generates requests for PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserID with any type of body
func NewPatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDRequestWithBody(server string, virtualWorkspaceID openapi_types.UUID, userID openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtualWorkspaceID", runtime.ParamLocationPath, virtualWorkspaceID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sharedtier/virtualWorkspaces/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1StageDeploymentIDFsRequest generates requests for GetV1StageDeploymentIDFs
func NewGetV1StageDeploymentIDFsRequest(server string, deploymentID openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deploymentID", runtime.ParamLocationPath, deploymentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/stage/%s/fs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1StageDeploymentIDFsPathRequest generates requests for DeleteV1StageDeploymentIDFsPath
func NewDeleteV1StageDeploymentIDFsPathRequest(server string, deploymentID openapi_types.UUID, path string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deploymentID", runtime.ParamLocationPath, deploymentID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/stage/%s/fs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1StageDeploymentIDFsPathRequest generates requests for GetV1StageDeploymentIDFsPath
func NewGetV1StageDeploymentIDFsPathRequest(server string, deploymentID openapi_types.UUID, path string, params *GetV1StageDeploymentIDFsPathParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deploymentID", runtime.ParamLocationPath, deploymentID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/stage/%s/fs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Metadata != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metadata", runtime.ParamLocationQuery, *params.Metadata); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1StageDeploymentIDFsPathRequest calls the generic PatchV1StageDeploymentIDFsPath builder with application/json body
func NewPatchV1StageDeploymentIDFsPathRequest(server string, deploymentID openapi_types.UUID, path string, body PatchV1StageDeploymentIDFsPathJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1StageDeploymentIDFsPathRequestWithBody(server, deploymentID, path, "application/json", bodyReader)
}

// NewPatchV1StageDeploymentIDFsPathRequestWithBody generates requests for PatchV1StageDeploymentIDFsPath with any type of body
func NewPatchV1StageDeploymentIDFsPathRequestWithBody(server string, deploymentID openapi_types.UUID, path string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deploymentID", runtime.ParamLocationPath, deploymentID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/stage/%s/fs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV1StageDeploymentIDFsPathRequestWithBody generates requests for PutV1StageDeploymentIDFsPath with any type of body
func NewPutV1StageDeploymentIDFsPathRequestWithBody(server string, deploymentID openapi_types.UUID, path string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deploymentID", runtime.ParamLocationPath, deploymentID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/stage/%s/fs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1TeamsRequest generates requests for GetV1Teams
func NewGetV1TeamsRequest(server string, params *GetV1TeamsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Description != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1TeamsRequest calls the generic PostV1Teams builder with application/json body
func NewPostV1TeamsRequest(server string, body PostV1TeamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1TeamsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1TeamsRequestWithBody generates requests for PostV1Teams with any type of body
func NewPostV1TeamsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1TeamsTeamIDRequest generates requests for DeleteV1TeamsTeamID
func NewDeleteV1TeamsTeamIDRequest(server string, teamID TeamID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamID", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1TeamsTeamIDRequest generates requests for GetV1TeamsTeamID
func NewGetV1TeamsTeamIDRequest(server string, teamID TeamID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamID", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1TeamsTeamIDRequest calls the generic PatchV1TeamsTeamID builder with application/json body
func NewPatchV1TeamsTeamIDRequest(server string, teamID TeamID, body PatchV1TeamsTeamIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1TeamsTeamIDRequestWithBody(server, teamID, "application/json", bodyReader)
}

// NewPatchV1TeamsTeamIDRequestWithBody generates requests for PatchV1TeamsTeamID with any type of body
func NewPatchV1TeamsTeamIDRequestWithBody(server string, teamID TeamID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamID", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1TeamsTeamIDAccessControlsRequest generates requests for GetV1TeamsTeamIDAccessControls
func NewGetV1TeamsTeamIDAccessControlsRequest(server string, teamID TeamID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamID", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s/accessControls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1TeamsTeamIDAccessControlsRequest calls the generic PatchV1TeamsTeamIDAccessControls builder with application/json body
func NewPatchV1TeamsTeamIDAccessControlsRequest(server string, teamID TeamID, body PatchV1TeamsTeamIDAccessControlsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1TeamsTeamIDAccessControlsRequestWithBody(server, teamID, "application/json", bodyReader)
}

// NewPatchV1TeamsTeamIDAccessControlsRequestWithBody generates requests for PatchV1TeamsTeamIDAccessControls with any type of body
func NewPatchV1TeamsTeamIDAccessControlsRequestWithBody(server string, teamID TeamID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamID", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s/accessControls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1TeamsTeamIDIdentityRolesRequest generates requests for GetV1TeamsTeamIDIdentityRoles
func NewGetV1TeamsTeamIDIdentityRolesRequest(server string, teamID TeamID, params *GetV1TeamsTeamIDIdentityRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamID", runtime.ParamLocationPath, teamID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s/identityRoles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ResourceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resourceType", runtime.ParamLocationQuery, *params.ResourceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1UsersRequest generates requests for GetV1Users
func NewGetV1UsersRequest(server string, params *GetV1UsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Email != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1UsersRequest calls the generic PostV1Users builder with application/json body
func NewPostV1UsersRequest(server string, body PostV1UsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1UsersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1UsersRequestWithBody generates requests for PostV1Users with any type of body
func NewPostV1UsersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1UsersCurrentRequest generates requests for GetV1UsersCurrent
func NewGetV1UsersCurrentRequest(server string, params *GetV1UsersCurrentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/current")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1UsersUserIDRequest generates requests for DeleteV1UsersUserID
func NewDeleteV1UsersUserIDRequest(server string, userID UserID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1UsersUserIDRequest generates requests for GetV1UsersUserID
func NewGetV1UsersUserIDRequest(server string, userID UserID, params *GetV1UsersUserIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1UsersUserIDIdentityRolesRequest generates requests for GetV1UsersUserIDIdentityRoles
func NewGetV1UsersUserIDIdentityRolesRequest(server string, userID UserID, params *GetV1UsersUserIDIdentityRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s/identityRoles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ResourceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resourceType", runtime.ParamLocationQuery, *params.ResourceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1WorkspaceGroupsRequest generates requests for GetV1WorkspaceGroups
func NewGetV1WorkspaceGroupsRequest(server string, params *GetV1WorkspaceGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaceGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeTerminated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeTerminated", runtime.ParamLocationQuery, *params.IncludeTerminated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1WorkspaceGroupsRequest calls the generic PostV1WorkspaceGroups builder with application/json body
func NewPostV1WorkspaceGroupsRequest(server string, body PostV1WorkspaceGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1WorkspaceGroupsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1WorkspaceGroupsRequestWithBody generates requests for PostV1WorkspaceGroups with any type of body
func NewPostV1WorkspaceGroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaceGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1WorkspaceGroupsWorkspaceGroupIDRequest generates requests for DeleteV1WorkspaceGroupsWorkspaceGroupID
func NewDeleteV1WorkspaceGroupsWorkspaceGroupIDRequest(server string, workspaceGroupID WorkspaceGroupID, params *DeleteV1WorkspaceGroupsWorkspaceGroupIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceGroupID", runtime.ParamLocationPath, workspaceGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaceGroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Force != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1WorkspaceGroupsWorkspaceGroupIDRequest generates requests for GetV1WorkspaceGroupsWorkspaceGroupID
func NewGetV1WorkspaceGroupsWorkspaceGroupIDRequest(server string, workspaceGroupID WorkspaceGroupID, params *GetV1WorkspaceGroupsWorkspaceGroupIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceGroupID", runtime.ParamLocationPath, workspaceGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaceGroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1WorkspaceGroupsWorkspaceGroupIDRequest calls the generic PatchV1WorkspaceGroupsWorkspaceGroupID builder with application/json body
func NewPatchV1WorkspaceGroupsWorkspaceGroupIDRequest(server string, workspaceGroupID WorkspaceGroupID, body PatchV1WorkspaceGroupsWorkspaceGroupIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1WorkspaceGroupsWorkspaceGroupIDRequestWithBody(server, workspaceGroupID, "application/json", bodyReader)
}

// NewPatchV1WorkspaceGroupsWorkspaceGroupIDRequestWithBody generates requests for PatchV1WorkspaceGroupsWorkspaceGroupID with any type of body
func NewPatchV1WorkspaceGroupsWorkspaceGroupIDRequestWithBody(server string, workspaceGroupID WorkspaceGroupID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceGroupID", runtime.ParamLocationPath, workspaceGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaceGroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1WorkspaceGroupsWorkspaceGroupIDAccessControlsRequest generates requests for GetV1WorkspaceGroupsWorkspaceGroupIDAccessControls
func NewGetV1WorkspaceGroupsWorkspaceGroupIDAccessControlsRequest(server string, workspaceGroupID WorkspaceGroupID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceGroupID", runtime.ParamLocationPath, workspaceGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaceGroups/%s/accessControls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsRequest calls the generic PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControls builder with application/json body
func NewPatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsRequest(server string, workspaceGroupID WorkspaceGroupID, body PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsRequestWithBody(server, workspaceGroupID, "application/json", bodyReader)
}

// NewPatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsRequestWithBody generates requests for PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControls with any type of body
func NewPatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsRequestWithBody(server string, workspaceGroupID WorkspaceGroupID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceGroupID", runtime.ParamLocationPath, workspaceGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaceGroups/%s/accessControls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsRequest generates requests for GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnections
func NewGetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsRequest(server string, workspaceGroupID WorkspaceGroupID, params *GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceGroupID", runtime.ParamLocationPath, workspaceGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaceGroups/%s/privateConnections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailbackRequest generates requests for PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailback
func NewPatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailbackRequest(server string, workspaceGroupID WorkspaceGroupID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceGroupID", runtime.ParamLocationPath, workspaceGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaceGroups/%s/storage/DR/failback", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailoverRequest generates requests for PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailover
func NewPatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailoverRequest(server string, workspaceGroupID WorkspaceGroupID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceGroupID", runtime.ParamLocationPath, workspaceGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaceGroups/%s/storage/DR/failover", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsRequest generates requests for GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegions
func NewGetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsRequest(server string, workspaceGroupID WorkspaceGroupID, params *GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceGroupID", runtime.ParamLocationPath, workspaceGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaceGroups/%s/storage/DR/regions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupRequest calls the generic PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetup builder with application/json body
func NewPostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupRequest(server string, workspaceGroupID WorkspaceGroupID, body PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupRequestWithBody(server, workspaceGroupID, "application/json", bodyReader)
}

// NewPostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupRequestWithBody generates requests for PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetup with any type of body
func NewPostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupRequestWithBody(server string, workspaceGroupID WorkspaceGroupID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceGroupID", runtime.ParamLocationPath, workspaceGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaceGroups/%s/storage/DR/setup", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvisionRequest generates requests for PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvision
func NewPatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvisionRequest(server string, workspaceGroupID WorkspaceGroupID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceGroupID", runtime.ParamLocationPath, workspaceGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaceGroups/%s/storage/DR/startPreProvision", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatusRequest generates requests for GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatus
func NewGetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatusRequest(server string, workspaceGroupID WorkspaceGroupID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceGroupID", runtime.ParamLocationPath, workspaceGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaceGroups/%s/storage/DR/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvisionRequest generates requests for PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvision
func NewPatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvisionRequest(server string, workspaceGroupID WorkspaceGroupID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceGroupID", runtime.ParamLocationPath, workspaceGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaceGroups/%s/storage/DR/stopPreProvision", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodRequest calls the generic PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriod builder with application/json body
func NewPatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodRequest(server string, workspaceGroupID WorkspaceGroupID, body PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodRequestWithBody(server, workspaceGroupID, "application/json", bodyReader)
}

// NewPatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodRequestWithBody generates requests for PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriod with any type of body
func NewPatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodRequestWithBody(server string, workspaceGroupID WorkspaceGroupID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceGroupID", runtime.ParamLocationPath, workspaceGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaceGroups/%s/storage/retentionPeriod", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1WorkspacesRequest generates requests for GetV1Workspaces
func NewGetV1WorkspacesRequest(server string, params *GetV1WorkspacesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspaceGroupID", runtime.ParamLocationQuery, params.WorkspaceGroupID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.IncludeTerminated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeTerminated", runtime.ParamLocationQuery, *params.IncludeTerminated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1WorkspacesRequest calls the generic PostV1Workspaces builder with application/json body
func NewPostV1WorkspacesRequest(server string, body PostV1WorkspacesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1WorkspacesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1WorkspacesRequestWithBody generates requests for PostV1Workspaces with any type of body
func NewPostV1WorkspacesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1WorkspacesWorkspaceIDRequest generates requests for DeleteV1WorkspacesWorkspaceID
func NewDeleteV1WorkspacesWorkspaceIDRequest(server string, workspaceID WorkspaceID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceID", runtime.ParamLocationPath, workspaceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1WorkspacesWorkspaceIDRequest generates requests for GetV1WorkspacesWorkspaceID
func NewGetV1WorkspacesWorkspaceIDRequest(server string, workspaceID WorkspaceID, params *GetV1WorkspacesWorkspaceIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceID", runtime.ParamLocationPath, workspaceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1WorkspacesWorkspaceIDRequest calls the generic PatchV1WorkspacesWorkspaceID builder with application/json body
func NewPatchV1WorkspacesWorkspaceIDRequest(server string, workspaceID WorkspaceID, body PatchV1WorkspacesWorkspaceIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1WorkspacesWorkspaceIDRequestWithBody(server, workspaceID, "application/json", bodyReader)
}

// NewPatchV1WorkspacesWorkspaceIDRequestWithBody generates requests for PatchV1WorkspacesWorkspaceID with any type of body
func NewPatchV1WorkspacesWorkspaceIDRequestWithBody(server string, workspaceID WorkspaceID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceID", runtime.ParamLocationPath, workspaceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1WorkspacesWorkspaceIDPrivateConnectionsRequest generates requests for GetV1WorkspacesWorkspaceIDPrivateConnections
func NewGetV1WorkspacesWorkspaceIDPrivateConnectionsRequest(server string, workspaceID WorkspaceID, params *GetV1WorkspacesWorkspaceIDPrivateConnectionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceID", runtime.ParamLocationPath, workspaceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/%s/privateConnections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1WorkspacesWorkspaceIDPrivateConnectionsKaiRequest generates requests for GetV1WorkspacesWorkspaceIDPrivateConnectionsKai
func NewGetV1WorkspacesWorkspaceIDPrivateConnectionsKaiRequest(server string, workspaceID openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceID", runtime.ParamLocationPath, workspaceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/%s/privateConnections/kai", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowListRequest generates requests for GetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowList
func NewGetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowListRequest(server string, workspaceID WorkspaceID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceID", runtime.ParamLocationPath, workspaceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/%s/privateConnections/outboundAllowList", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1WorkspacesWorkspaceIDResumeRequest calls the generic PostV1WorkspacesWorkspaceIDResume builder with application/json body
func NewPostV1WorkspacesWorkspaceIDResumeRequest(server string, workspaceID WorkspaceID, body PostV1WorkspacesWorkspaceIDResumeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1WorkspacesWorkspaceIDResumeRequestWithBody(server, workspaceID, "application/json", bodyReader)
}

// NewPostV1WorkspacesWorkspaceIDResumeRequestWithBody generates requests for PostV1WorkspacesWorkspaceIDResume with any type of body
func NewPostV1WorkspacesWorkspaceIDResumeRequestWithBody(server string, workspaceID WorkspaceID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceID", runtime.ParamLocationPath, workspaceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/%s/resume", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1WorkspacesWorkspaceIDSuspendRequest generates requests for PostV1WorkspacesWorkspaceIDSuspend
func NewPostV1WorkspacesWorkspaceIDSuspendRequest(server string, workspaceID WorkspaceID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceID", runtime.ParamLocationPath, workspaceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/%s/suspend", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetricsRequest generates requests for GetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetrics
func NewGetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetricsRequest(server string, organizationID OrganizationID, workspaceGroupID WorkspaceGroupID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceGroupID", runtime.ParamLocationPath, workspaceGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/organizations/%s/workspaceGroups/%s/metrics", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2RegionsRequest generates requests for GetV2Regions
func NewGetV2RegionsRequest(server string, params *GetV2RegionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/regions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Fields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV1AuditLogs request
	GetV1AuditLogsWithResponse(ctx context.Context, params *GetV1AuditLogsParams, reqEditors ...RequestEditorFn) (*GetV1AuditLogsResponse, error)

	// GetV1BillingUsage request
	GetV1BillingUsageWithResponse(ctx context.Context, params *GetV1BillingUsageParams, reqEditors ...RequestEditorFn) (*GetV1BillingUsageResponse, error)

	// GetV1FilesFsLocation request
	GetV1FilesFsLocationWithResponse(ctx context.Context, location FileLocationSchema, reqEditors ...RequestEditorFn) (*GetV1FilesFsLocationResponse, error)

	// DeleteV1FilesFsLocationPath request
	DeleteV1FilesFsLocationPathWithResponse(ctx context.Context, location FileLocationSchema, path string, reqEditors ...RequestEditorFn) (*DeleteV1FilesFsLocationPathResponse, error)

	// GetV1FilesFsLocationPath request
	GetV1FilesFsLocationPathWithResponse(ctx context.Context, location FileLocationSchema, path string, params *GetV1FilesFsLocationPathParams, reqEditors ...RequestEditorFn) (*GetV1FilesFsLocationPathResponse, error)

	// PatchV1FilesFsLocationPath request with any body
	PatchV1FilesFsLocationPathWithBodyWithResponse(ctx context.Context, location FileLocationSchema, path string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1FilesFsLocationPathResponse, error)

	PatchV1FilesFsLocationPathWithResponse(ctx context.Context, location FileLocationSchema, path string, body PatchV1FilesFsLocationPathJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1FilesFsLocationPathResponse, error)

	// PutV1FilesFsLocationPath request with any body
	PutV1FilesFsLocationPathWithBodyWithResponse(ctx context.Context, location FileLocationSchema, path string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1FilesFsLocationPathResponse, error)

	// GetV1Invitations request
	GetV1InvitationsWithResponse(ctx context.Context, params *GetV1InvitationsParams, reqEditors ...RequestEditorFn) (*GetV1InvitationsResponse, error)

	// PostV1Invitations request with any body
	PostV1InvitationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1InvitationsResponse, error)

	PostV1InvitationsWithResponse(ctx context.Context, body PostV1InvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1InvitationsResponse, error)

	// DeleteV1InvitationsInvitationID request
	DeleteV1InvitationsInvitationIDWithResponse(ctx context.Context, invitationID InvitationID, reqEditors ...RequestEditorFn) (*DeleteV1InvitationsInvitationIDResponse, error)

	// GetV1InvitationsInvitationID request
	GetV1InvitationsInvitationIDWithResponse(ctx context.Context, invitationID InvitationID, params *GetV1InvitationsInvitationIDParams, reqEditors ...RequestEditorFn) (*GetV1InvitationsInvitationIDResponse, error)

	// PostV1Jobs request with any body
	PostV1JobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1JobsResponse, error)

	PostV1JobsWithResponse(ctx context.Context, body PostV1JobsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1JobsResponse, error)

	// GetV1JobsRuntimes request
	GetV1JobsRuntimesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1JobsRuntimesResponse, error)

	// DeleteV1JobsJobID request
	DeleteV1JobsJobIDWithResponse(ctx context.Context, jobID JobID, reqEditors ...RequestEditorFn) (*DeleteV1JobsJobIDResponse, error)

	// GetV1JobsJobID request
	GetV1JobsJobIDWithResponse(ctx context.Context, jobID JobID, reqEditors ...RequestEditorFn) (*GetV1JobsJobIDResponse, error)

	// GetV1JobsJobIDExecutions request
	GetV1JobsJobIDExecutionsWithResponse(ctx context.Context, jobID JobID, params *GetV1JobsJobIDExecutionsParams, reqEditors ...RequestEditorFn) (*GetV1JobsJobIDExecutionsResponse, error)

	// GetV1JobsJobIDParameters request
	GetV1JobsJobIDParametersWithResponse(ctx context.Context, jobID JobID, reqEditors ...RequestEditorFn) (*GetV1JobsJobIDParametersResponse, error)

	// GetV1OrganizationsCurrent request
	GetV1OrganizationsCurrentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1OrganizationsCurrentResponse, error)

	// GetV1OrganizationsOrganizationIDAccessControls request
	GetV1OrganizationsOrganizationIDAccessControlsWithResponse(ctx context.Context, organizationID OrganizationID, reqEditors ...RequestEditorFn) (*GetV1OrganizationsOrganizationIDAccessControlsResponse, error)

	// PatchV1OrganizationsOrganizationIDAccessControls request with any body
	PatchV1OrganizationsOrganizationIDAccessControlsWithBodyWithResponse(ctx context.Context, organizationID OrganizationID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1OrganizationsOrganizationIDAccessControlsResponse, error)

	PatchV1OrganizationsOrganizationIDAccessControlsWithResponse(ctx context.Context, organizationID OrganizationID, body PatchV1OrganizationsOrganizationIDAccessControlsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1OrganizationsOrganizationIDAccessControlsResponse, error)

	// PostV1PrivateConnections request with any body
	PostV1PrivateConnectionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PrivateConnectionsResponse, error)

	PostV1PrivateConnectionsWithResponse(ctx context.Context, body PostV1PrivateConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1PrivateConnectionsResponse, error)

	// DeleteV1PrivateConnectionsConnectionID request
	DeleteV1PrivateConnectionsConnectionIDWithResponse(ctx context.Context, connectionID ConnectionID, reqEditors ...RequestEditorFn) (*DeleteV1PrivateConnectionsConnectionIDResponse, error)

	// GetV1PrivateConnectionsConnectionID request
	GetV1PrivateConnectionsConnectionIDWithResponse(ctx context.Context, connectionID ConnectionID, params *GetV1PrivateConnectionsConnectionIDParams, reqEditors ...RequestEditorFn) (*GetV1PrivateConnectionsConnectionIDResponse, error)

	// PatchV1PrivateConnectionsConnectionID request with any body
	PatchV1PrivateConnectionsConnectionIDWithBodyWithResponse(ctx context.Context, connectionID ConnectionID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1PrivateConnectionsConnectionIDResponse, error)

	PatchV1PrivateConnectionsConnectionIDWithResponse(ctx context.Context, connectionID ConnectionID, body PatchV1PrivateConnectionsConnectionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1PrivateConnectionsConnectionIDResponse, error)

	// GetV1Regions request
	GetV1RegionsWithResponse(ctx context.Context, params *GetV1RegionsParams, reqEditors ...RequestEditorFn) (*GetV1RegionsResponse, error)

	// GetV1RegionsSharedtier request
	GetV1RegionsSharedtierWithResponse(ctx context.Context, params *GetV1RegionsSharedtierParams, reqEditors ...RequestEditorFn) (*GetV1RegionsSharedtierResponse, error)

	// GetV1RolesResourceType request
	GetV1RolesResourceTypeWithResponse(ctx context.Context, resourceType ResourceType, reqEditors ...RequestEditorFn) (*GetV1RolesResourceTypeResponse, error)

	// PostV1RolesResourceType request with any body
	PostV1RolesResourceTypeWithBodyWithResponse(ctx context.Context, resourceType ResourceType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1RolesResourceTypeResponse, error)

	PostV1RolesResourceTypeWithResponse(ctx context.Context, resourceType ResourceType, body PostV1RolesResourceTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1RolesResourceTypeResponse, error)

	// DeleteV1RolesResourceTypeRole request
	DeleteV1RolesResourceTypeRoleWithResponse(ctx context.Context, resourceType ResourceType, role Role, reqEditors ...RequestEditorFn) (*DeleteV1RolesResourceTypeRoleResponse, error)

	// GetV1RolesResourceTypeRole request
	GetV1RolesResourceTypeRoleWithResponse(ctx context.Context, resourceType ResourceType, role Role, reqEditors ...RequestEditorFn) (*GetV1RolesResourceTypeRoleResponse, error)

	// PutV1RolesResourceTypeRole request with any body
	PutV1RolesResourceTypeRoleWithBodyWithResponse(ctx context.Context, resourceType ResourceType, role Role, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1RolesResourceTypeRoleResponse, error)

	PutV1RolesResourceTypeRoleWithResponse(ctx context.Context, resourceType ResourceType, role Role, body PutV1RolesResourceTypeRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1RolesResourceTypeRoleResponse, error)

	// GetV1Secrets request
	GetV1SecretsWithResponse(ctx context.Context, params *GetV1SecretsParams, reqEditors ...RequestEditorFn) (*GetV1SecretsResponse, error)

	// PostV1Secrets request with any body
	PostV1SecretsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SecretsResponse, error)

	PostV1SecretsWithResponse(ctx context.Context, body PostV1SecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SecretsResponse, error)

	// DeleteV1SecretsSecretID request
	DeleteV1SecretsSecretIDWithResponse(ctx context.Context, secretID SecretID, reqEditors ...RequestEditorFn) (*DeleteV1SecretsSecretIDResponse, error)

	// GetV1SecretsSecretID request
	GetV1SecretsSecretIDWithResponse(ctx context.Context, secretID SecretID, reqEditors ...RequestEditorFn) (*GetV1SecretsSecretIDResponse, error)

	// PatchV1SecretsSecretID request with any body
	PatchV1SecretsSecretIDWithBodyWithResponse(ctx context.Context, secretID SecretID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1SecretsSecretIDResponse, error)

	PatchV1SecretsSecretIDWithResponse(ctx context.Context, secretID SecretID, body PatchV1SecretsSecretIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1SecretsSecretIDResponse, error)

	// GetV1SecretsSecretIDAccessControls request
	GetV1SecretsSecretIDAccessControlsWithResponse(ctx context.Context, secretID SecretID, reqEditors ...RequestEditorFn) (*GetV1SecretsSecretIDAccessControlsResponse, error)

	// PatchV1SecretsSecretIDAccessControls request with any body
	PatchV1SecretsSecretIDAccessControlsWithBodyWithResponse(ctx context.Context, secretID SecretID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1SecretsSecretIDAccessControlsResponse, error)

	PatchV1SecretsSecretIDAccessControlsWithResponse(ctx context.Context, secretID SecretID, body PatchV1SecretsSecretIDAccessControlsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1SecretsSecretIDAccessControlsResponse, error)

	// GetV1SharedtierVirtualWorkspaces request
	GetV1SharedtierVirtualWorkspacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1SharedtierVirtualWorkspacesResponse, error)

	// PostV1SharedtierVirtualWorkspaces request with any body
	PostV1SharedtierVirtualWorkspacesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SharedtierVirtualWorkspacesResponse, error)

	PostV1SharedtierVirtualWorkspacesWithResponse(ctx context.Context, body PostV1SharedtierVirtualWorkspacesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SharedtierVirtualWorkspacesResponse, error)

	// DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceID request
	DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDWithResponse(ctx context.Context, virtualWorkspaceID openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse, error)

	// GetV1SharedtierVirtualWorkspacesVirtualWorkspaceID request
	GetV1SharedtierVirtualWorkspacesVirtualWorkspaceIDWithResponse(ctx context.Context, virtualWorkspaceID openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse, error)

	// PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsers request with any body
	PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersWithBodyWithResponse(ctx context.Context, virtualWorkspaceID openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersResponse, error)

	PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersWithResponse(ctx context.Context, virtualWorkspaceID openapi_types.UUID, body PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersResponse, error)

	// DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserID request with any body
	DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDWithBodyWithResponse(ctx context.Context, virtualWorkspaceID openapi_types.UUID, userID openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse, error)

	DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDWithResponse(ctx context.Context, virtualWorkspaceID openapi_types.UUID, userID openapi_types.UUID, body DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse, error)

	// PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserID request with any body
	PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDWithBodyWithResponse(ctx context.Context, virtualWorkspaceID openapi_types.UUID, userID openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse, error)

	PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDWithResponse(ctx context.Context, virtualWorkspaceID openapi_types.UUID, userID openapi_types.UUID, body PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse, error)

	// GetV1StageDeploymentIDFs request
	GetV1StageDeploymentIDFsWithResponse(ctx context.Context, deploymentID openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1StageDeploymentIDFsResponse, error)

	// DeleteV1StageDeploymentIDFsPath request
	DeleteV1StageDeploymentIDFsPathWithResponse(ctx context.Context, deploymentID openapi_types.UUID, path string, reqEditors ...RequestEditorFn) (*DeleteV1StageDeploymentIDFsPathResponse, error)

	// GetV1StageDeploymentIDFsPath request
	GetV1StageDeploymentIDFsPathWithResponse(ctx context.Context, deploymentID openapi_types.UUID, path string, params *GetV1StageDeploymentIDFsPathParams, reqEditors ...RequestEditorFn) (*GetV1StageDeploymentIDFsPathResponse, error)

	// PatchV1StageDeploymentIDFsPath request with any body
	PatchV1StageDeploymentIDFsPathWithBodyWithResponse(ctx context.Context, deploymentID openapi_types.UUID, path string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1StageDeploymentIDFsPathResponse, error)

	PatchV1StageDeploymentIDFsPathWithResponse(ctx context.Context, deploymentID openapi_types.UUID, path string, body PatchV1StageDeploymentIDFsPathJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1StageDeploymentIDFsPathResponse, error)

	// PutV1StageDeploymentIDFsPath request with any body
	PutV1StageDeploymentIDFsPathWithBodyWithResponse(ctx context.Context, deploymentID openapi_types.UUID, path string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1StageDeploymentIDFsPathResponse, error)

	// GetV1Teams request
	GetV1TeamsWithResponse(ctx context.Context, params *GetV1TeamsParams, reqEditors ...RequestEditorFn) (*GetV1TeamsResponse, error)

	// PostV1Teams request with any body
	PostV1TeamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1TeamsResponse, error)

	PostV1TeamsWithResponse(ctx context.Context, body PostV1TeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1TeamsResponse, error)

	// DeleteV1TeamsTeamID request
	DeleteV1TeamsTeamIDWithResponse(ctx context.Context, teamID TeamID, reqEditors ...RequestEditorFn) (*DeleteV1TeamsTeamIDResponse, error)

	// GetV1TeamsTeamID request
	GetV1TeamsTeamIDWithResponse(ctx context.Context, teamID TeamID, reqEditors ...RequestEditorFn) (*GetV1TeamsTeamIDResponse, error)

	// PatchV1TeamsTeamID request with any body
	PatchV1TeamsTeamIDWithBodyWithResponse(ctx context.Context, teamID TeamID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1TeamsTeamIDResponse, error)

	PatchV1TeamsTeamIDWithResponse(ctx context.Context, teamID TeamID, body PatchV1TeamsTeamIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1TeamsTeamIDResponse, error)

	// GetV1TeamsTeamIDAccessControls request
	GetV1TeamsTeamIDAccessControlsWithResponse(ctx context.Context, teamID TeamID, reqEditors ...RequestEditorFn) (*GetV1TeamsTeamIDAccessControlsResponse, error)

	// PatchV1TeamsTeamIDAccessControls request with any body
	PatchV1TeamsTeamIDAccessControlsWithBodyWithResponse(ctx context.Context, teamID TeamID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1TeamsTeamIDAccessControlsResponse, error)

	PatchV1TeamsTeamIDAccessControlsWithResponse(ctx context.Context, teamID TeamID, body PatchV1TeamsTeamIDAccessControlsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1TeamsTeamIDAccessControlsResponse, error)

	// GetV1TeamsTeamIDIdentityRoles request
	GetV1TeamsTeamIDIdentityRolesWithResponse(ctx context.Context, teamID TeamID, params *GetV1TeamsTeamIDIdentityRolesParams, reqEditors ...RequestEditorFn) (*GetV1TeamsTeamIDIdentityRolesResponse, error)

	// GetV1Users request
	GetV1UsersWithResponse(ctx context.Context, params *GetV1UsersParams, reqEditors ...RequestEditorFn) (*GetV1UsersResponse, error)

	// PostV1Users request with any body
	PostV1UsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1UsersResponse, error)

	PostV1UsersWithResponse(ctx context.Context, body PostV1UsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1UsersResponse, error)

	// GetV1UsersCurrent request
	GetV1UsersCurrentWithResponse(ctx context.Context, params *GetV1UsersCurrentParams, reqEditors ...RequestEditorFn) (*GetV1UsersCurrentResponse, error)

	// DeleteV1UsersUserID request
	DeleteV1UsersUserIDWithResponse(ctx context.Context, userID UserID, reqEditors ...RequestEditorFn) (*DeleteV1UsersUserIDResponse, error)

	// GetV1UsersUserID request
	GetV1UsersUserIDWithResponse(ctx context.Context, userID UserID, params *GetV1UsersUserIDParams, reqEditors ...RequestEditorFn) (*GetV1UsersUserIDResponse, error)

	// GetV1UsersUserIDIdentityRoles request
	GetV1UsersUserIDIdentityRolesWithResponse(ctx context.Context, userID UserID, params *GetV1UsersUserIDIdentityRolesParams, reqEditors ...RequestEditorFn) (*GetV1UsersUserIDIdentityRolesResponse, error)

	// GetV1WorkspaceGroups request
	GetV1WorkspaceGroupsWithResponse(ctx context.Context, params *GetV1WorkspaceGroupsParams, reqEditors ...RequestEditorFn) (*GetV1WorkspaceGroupsResponse, error)

	// PostV1WorkspaceGroups request with any body
	PostV1WorkspaceGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1WorkspaceGroupsResponse, error)

	PostV1WorkspaceGroupsWithResponse(ctx context.Context, body PostV1WorkspaceGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1WorkspaceGroupsResponse, error)

	// DeleteV1WorkspaceGroupsWorkspaceGroupID request
	DeleteV1WorkspaceGroupsWorkspaceGroupIDWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, params *DeleteV1WorkspaceGroupsWorkspaceGroupIDParams, reqEditors ...RequestEditorFn) (*DeleteV1WorkspaceGroupsWorkspaceGroupIDResponse, error)

	// GetV1WorkspaceGroupsWorkspaceGroupID request
	GetV1WorkspaceGroupsWorkspaceGroupIDWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, params *GetV1WorkspaceGroupsWorkspaceGroupIDParams, reqEditors ...RequestEditorFn) (*GetV1WorkspaceGroupsWorkspaceGroupIDResponse, error)

	// PatchV1WorkspaceGroupsWorkspaceGroupID request with any body
	PatchV1WorkspaceGroupsWorkspaceGroupIDWithBodyWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1WorkspaceGroupsWorkspaceGroupIDResponse, error)

	PatchV1WorkspaceGroupsWorkspaceGroupIDWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, body PatchV1WorkspaceGroupsWorkspaceGroupIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1WorkspaceGroupsWorkspaceGroupIDResponse, error)

	// GetV1WorkspaceGroupsWorkspaceGroupIDAccessControls request
	GetV1WorkspaceGroupsWorkspaceGroupIDAccessControlsWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*GetV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse, error)

	// PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControls request with any body
	PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsWithBodyWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse, error)

	PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, body PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse, error)

	// GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnections request
	GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, params *GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsParams, reqEditors ...RequestEditorFn) (*GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsResponse, error)

	// PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailback request
	PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailbackWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailbackResponse, error)

	// PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailover request
	PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailoverWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailoverResponse, error)

	// GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegions request
	GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, params *GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsParams, reqEditors ...RequestEditorFn) (*GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsResponse, error)

	// PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetup request with any body
	PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupWithBodyWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupResponse, error)

	PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, body PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupResponse, error)

	// PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvision request
	PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvisionWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvisionResponse, error)

	// GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatus request
	GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatusWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatusResponse, error)

	// PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvision request
	PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvisionWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvisionResponse, error)

	// PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriod request with any body
	PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodWithBodyWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodResponse, error)

	PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, body PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodResponse, error)

	// GetV1Workspaces request
	GetV1WorkspacesWithResponse(ctx context.Context, params *GetV1WorkspacesParams, reqEditors ...RequestEditorFn) (*GetV1WorkspacesResponse, error)

	// PostV1Workspaces request with any body
	PostV1WorkspacesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1WorkspacesResponse, error)

	PostV1WorkspacesWithResponse(ctx context.Context, body PostV1WorkspacesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1WorkspacesResponse, error)

	// DeleteV1WorkspacesWorkspaceID request
	DeleteV1WorkspacesWorkspaceIDWithResponse(ctx context.Context, workspaceID WorkspaceID, reqEditors ...RequestEditorFn) (*DeleteV1WorkspacesWorkspaceIDResponse, error)

	// GetV1WorkspacesWorkspaceID request
	GetV1WorkspacesWorkspaceIDWithResponse(ctx context.Context, workspaceID WorkspaceID, params *GetV1WorkspacesWorkspaceIDParams, reqEditors ...RequestEditorFn) (*GetV1WorkspacesWorkspaceIDResponse, error)

	// PatchV1WorkspacesWorkspaceID request with any body
	PatchV1WorkspacesWorkspaceIDWithBodyWithResponse(ctx context.Context, workspaceID WorkspaceID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1WorkspacesWorkspaceIDResponse, error)

	PatchV1WorkspacesWorkspaceIDWithResponse(ctx context.Context, workspaceID WorkspaceID, body PatchV1WorkspacesWorkspaceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1WorkspacesWorkspaceIDResponse, error)

	// GetV1WorkspacesWorkspaceIDPrivateConnections request
	GetV1WorkspacesWorkspaceIDPrivateConnectionsWithResponse(ctx context.Context, workspaceID WorkspaceID, params *GetV1WorkspacesWorkspaceIDPrivateConnectionsParams, reqEditors ...RequestEditorFn) (*GetV1WorkspacesWorkspaceIDPrivateConnectionsResponse, error)

	// GetV1WorkspacesWorkspaceIDPrivateConnectionsKai request
	GetV1WorkspacesWorkspaceIDPrivateConnectionsKaiWithResponse(ctx context.Context, workspaceID openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1WorkspacesWorkspaceIDPrivateConnectionsKaiResponse, error)

	// GetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowList request
	GetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowListWithResponse(ctx context.Context, workspaceID WorkspaceID, reqEditors ...RequestEditorFn) (*GetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowListResponse, error)

	// PostV1WorkspacesWorkspaceIDResume request with any body
	PostV1WorkspacesWorkspaceIDResumeWithBodyWithResponse(ctx context.Context, workspaceID WorkspaceID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1WorkspacesWorkspaceIDResumeResponse, error)

	PostV1WorkspacesWorkspaceIDResumeWithResponse(ctx context.Context, workspaceID WorkspaceID, body PostV1WorkspacesWorkspaceIDResumeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1WorkspacesWorkspaceIDResumeResponse, error)

	// PostV1WorkspacesWorkspaceIDSuspend request
	PostV1WorkspacesWorkspaceIDSuspendWithResponse(ctx context.Context, workspaceID WorkspaceID, reqEditors ...RequestEditorFn) (*PostV1WorkspacesWorkspaceIDSuspendResponse, error)

	// GetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetrics request
	GetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetricsWithResponse(ctx context.Context, organizationID OrganizationID, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*GetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetricsResponse, error)

	// GetV2Regions request
	GetV2RegionsWithResponse(ctx context.Context, params *GetV2RegionsParams, reqEditors ...RequestEditorFn) (*GetV2RegionsResponse, error)
}

type GetV1AuditLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AuditLogs *[]AuditLog `json:"auditLogs,omitempty"`

		// NextToken The nextToken value can be used in a subsequent query to guarantee any log entries are new since this query
		NextToken *string `json:"nextToken,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1AuditLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AuditLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1BillingUsageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		BillingUsage *[]BillingUsage `json:"billingUsage,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetV1BillingUsageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1BillingUsageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1FilesFsLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FileObjectMetadata
}

// Status returns HTTPResponse.Status
func (r GetV1FilesFsLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1FilesFsLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1FilesFsLocationPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Name filename.ipynb
		Name *string `json:"name,omitempty"`

		// Path /
		Path *string `json:"path,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1FilesFsLocationPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1FilesFsLocationPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1FilesFsLocationPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FileObjectMetadata
}

// Status returns HTTPResponse.Status
func (r GetV1FilesFsLocationPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1FilesFsLocationPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1FilesFsLocationPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Name filename.ipynb
		Name *string `json:"name,omitempty"`

		// Path /
		Path *string `json:"path,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchV1FilesFsLocationPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1FilesFsLocationPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1FilesFsLocationPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Name *string `json:"name,omitempty"`
		Path *string `json:"path,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutV1FilesFsLocationPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1FilesFsLocationPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1InvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserInvitation
}

// Status returns HTTPResponse.Status
func (r GetV1InvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1InvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1InvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserInvitation
}

// Status returns HTTPResponse.Status
func (r PostV1InvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1InvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1InvitationsInvitationIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		InvitationID openapi_types.UUID `json:"invitationID"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1InvitationsInvitationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1InvitationsInvitationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1InvitationsInvitationIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserInvitation
}

// Status returns HTTPResponse.Status
func (r GetV1InvitationsInvitationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1InvitationsInvitationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1JobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Job
}

// Status returns HTTPResponse.Status
func (r PostV1JobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1JobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1JobsRuntimesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RuntimesResult
}

// Status returns HTTPResponse.Status
func (r GetV1JobsRuntimesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1JobsRuntimesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1JobsJobIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *bool
}

// Status returns HTTPResponse.Status
func (r DeleteV1JobsJobIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1JobsJobIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1JobsJobIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Job
}

// Status returns HTTPResponse.Status
func (r GetV1JobsJobIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1JobsJobIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1JobsJobIDExecutionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExecutionsResult
}

// Status returns HTTPResponse.Status
func (r GetV1JobsJobIDExecutionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1JobsJobIDExecutionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1JobsJobIDParametersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]JobParameter
}

// Status returns HTTPResponse.Status
func (r GetV1JobsJobIDParametersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1JobsJobIDParametersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1OrganizationsCurrentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
}

// Status returns HTTPResponse.Status
func (r GetV1OrganizationsCurrentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1OrganizationsCurrentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1OrganizationsOrganizationIDAccessControlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResourceRole
}

// Status returns HTTPResponse.Status
func (r GetV1OrganizationsOrganizationIDAccessControlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1OrganizationsOrganizationIDAccessControlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1OrganizationsOrganizationIDAccessControlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchV1OrganizationsOrganizationIDAccessControlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1OrganizationsOrganizationIDAccessControlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1PrivateConnectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PrivateConnectionID openapi_types.UUID `json:"privateConnectionID"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1PrivateConnectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1PrivateConnectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1PrivateConnectionsConnectionIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PrivateConnectionID openapi_types.UUID `json:"privateConnectionID"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1PrivateConnectionsConnectionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1PrivateConnectionsConnectionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1PrivateConnectionsConnectionIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrivateConnection
}

// Status returns HTTPResponse.Status
func (r GetV1PrivateConnectionsConnectionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1PrivateConnectionsConnectionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1PrivateConnectionsConnectionIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PrivateConnectionID openapi_types.UUID `json:"privateConnectionID"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchV1PrivateConnectionsConnectionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1PrivateConnectionsConnectionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1RegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Region
}

// Status returns HTTPResponse.Status
func (r GetV1RegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1RegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1RegionsSharedtierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RegionV2
}

// Status returns HTTPResponse.Status
func (r GetV1RegionsSharedtierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1RegionsSharedtierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1RolesResourceTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleDefinition
}

// Status returns HTTPResponse.Status
func (r GetV1RolesResourceTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1RolesResourceTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1RolesResourceTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleDefinition
}

// Status returns HTTPResponse.Status
func (r PostV1RolesResourceTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1RolesResourceTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1RolesResourceTypeRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *bool
}

// Status returns HTTPResponse.Status
func (r DeleteV1RolesResourceTypeRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1RolesResourceTypeRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1RolesResourceTypeRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleDefinition
}

// Status returns HTTPResponse.Status
func (r GetV1RolesResourceTypeRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1RolesResourceTypeRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1RolesResourceTypeRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleDefinition
}

// Status returns HTTPResponse.Status
func (r PutV1RolesResourceTypeRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1RolesResourceTypeRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1SecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Secret
}

// Status returns HTTPResponse.Status
func (r GetV1SecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1SecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1SecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secret
}

// Status returns HTTPResponse.Status
func (r PostV1SecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1SecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1SecretsSecretIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		SecretID openapi_types.UUID `json:"secretID"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1SecretsSecretIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1SecretsSecretIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1SecretsSecretIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secret
}

// Status returns HTTPResponse.Status
func (r GetV1SecretsSecretIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1SecretsSecretIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1SecretsSecretIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Secret
}

// Status returns HTTPResponse.Status
func (r PatchV1SecretsSecretIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1SecretsSecretIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1SecretsSecretIDAccessControlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResourceRole
}

// Status returns HTTPResponse.Status
func (r GetV1SecretsSecretIDAccessControlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1SecretsSecretIDAccessControlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1SecretsSecretIDAccessControlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchV1SecretsSecretIDAccessControlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1SecretsSecretIDAccessControlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1SharedtierVirtualWorkspacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SharedTierVirtualWorkspace
}

// Status returns HTTPResponse.Status
func (r GetV1SharedtierVirtualWorkspacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1SharedtierVirtualWorkspacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1SharedtierVirtualWorkspacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		VirtualWorkspaceID openapi_types.UUID `json:"virtualWorkspaceID"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1SharedtierVirtualWorkspacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1SharedtierVirtualWorkspacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *bool
}

// Status returns HTTPResponse.Status
func (r DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SharedTierVirtualWorkspace
}

// Status returns HTTPResponse.Status
func (r GetV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Password string             `json:"password"`
		UserID   openapi_types.UUID `json:"userID"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *bool
}

// Status returns HTTPResponse.Status
func (r DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *bool
}

// Status returns HTTPResponse.Status
func (r PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1StageDeploymentIDFsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FileObjectMetadata
}

// Status returns HTTPResponse.Status
func (r GetV1StageDeploymentIDFsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1StageDeploymentIDFsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1StageDeploymentIDFsPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Name sample_file.txt
		Name *string `json:"name,omitempty"`

		// Path parent_folder/sample_file.txt
		Path *string `json:"path,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1StageDeploymentIDFsPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1StageDeploymentIDFsPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1StageDeploymentIDFsPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FileObjectMetadata
}

// Status returns HTTPResponse.Status
func (r GetV1StageDeploymentIDFsPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1StageDeploymentIDFsPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1StageDeploymentIDFsPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Name sample_file.txt
		Name *string `json:"name,omitempty"`

		// Path parent_folder/sample_file.txt
		Path *string `json:"path,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchV1StageDeploymentIDFsPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1StageDeploymentIDFsPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1StageDeploymentIDFsPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Name *string `json:"name,omitempty"`
		Path *string `json:"path,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutV1StageDeploymentIDFsPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1StageDeploymentIDFsPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1TeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Team
}

// Status returns HTTPResponse.Status
func (r GetV1TeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1TeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1TeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Team
}

// Status returns HTTPResponse.Status
func (r PostV1TeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1TeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1TeamsTeamIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		TeamID openapi_types.UUID `json:"teamID"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1TeamsTeamIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1TeamsTeamIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1TeamsTeamIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Team
}

// Status returns HTTPResponse.Status
func (r GetV1TeamsTeamIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1TeamsTeamIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1TeamsTeamIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		TeamID openapi_types.UUID `json:"teamID"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchV1TeamsTeamIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1TeamsTeamIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1TeamsTeamIDAccessControlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResourceRole
}

// Status returns HTTPResponse.Status
func (r GetV1TeamsTeamIDAccessControlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1TeamsTeamIDAccessControlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1TeamsTeamIDAccessControlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchV1TeamsTeamIDAccessControlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1TeamsTeamIDAccessControlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1TeamsTeamIDIdentityRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IdentityRole
}

// Status returns HTTPResponse.Status
func (r GetV1TeamsTeamIDIdentityRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1TeamsTeamIDIdentityRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1UsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r GetV1UsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1UsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1UsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV1UsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1UsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1UsersCurrentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetV1UsersCurrentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1UsersCurrentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1UsersUserIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		UserID openapi_types.UUID `json:"userID"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1UsersUserIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1UsersUserIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1UsersUserIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetV1UsersUserIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1UsersUserIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1UsersUserIDIdentityRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IdentityRole
}

// Status returns HTTPResponse.Status
func (r GetV1UsersUserIDIdentityRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1UsersUserIDIdentityRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1WorkspaceGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WorkspaceGroup
}

// Status returns HTTPResponse.Status
func (r GetV1WorkspaceGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1WorkspaceGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1WorkspaceGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdminPassword    *string            `json:"adminPassword,omitempty"`
		WorkspaceGroupID openapi_types.UUID `json:"workspaceGroupID"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1WorkspaceGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1WorkspaceGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1WorkspaceGroupsWorkspaceGroupIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		WorkspaceGroupID openapi_types.UUID `json:"workspaceGroupID"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1WorkspaceGroupsWorkspaceGroupIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1WorkspaceGroupsWorkspaceGroupIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1WorkspaceGroupsWorkspaceGroupIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceGroup
}

// Status returns HTTPResponse.Status
func (r GetV1WorkspaceGroupsWorkspaceGroupIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1WorkspaceGroupsWorkspaceGroupIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1WorkspaceGroupsWorkspaceGroupIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		WorkspaceGroupID openapi_types.UUID `json:"workspaceGroupID"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchV1WorkspaceGroupsWorkspaceGroupIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1WorkspaceGroupsWorkspaceGroupIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResourceRole
}

// Status returns HTTPResponse.Status
func (r GetV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PrivateConnection
}

// Status returns HTTPResponse.Status
func (r GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailoverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailoverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailoverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Region
}

// Status returns HTTPResponse.Status
func (r GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageDRStatus
}

// Status returns HTTPResponse.Status
func (r GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1WorkspacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Workspace
}

// Status returns HTTPResponse.Status
func (r GetV1WorkspacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1WorkspacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1WorkspacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		WorkspaceID openapi_types.UUID `json:"workspaceID"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1WorkspacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1WorkspacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1WorkspacesWorkspaceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		WorkspaceID openapi_types.UUID `json:"workspaceID"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteV1WorkspacesWorkspaceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1WorkspacesWorkspaceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1WorkspacesWorkspaceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
}

// Status returns HTTPResponse.Status
func (r GetV1WorkspacesWorkspaceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1WorkspacesWorkspaceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1WorkspacesWorkspaceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		WorkspaceID openapi_types.UUID `json:"workspaceID"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchV1WorkspacesWorkspaceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1WorkspacesWorkspaceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1WorkspacesWorkspaceIDPrivateConnectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PrivateConnection
}

// Status returns HTTPResponse.Status
func (r GetV1WorkspacesWorkspaceIDPrivateConnectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1WorkspacesWorkspaceIDPrivateConnectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1WorkspacesWorkspaceIDPrivateConnectionsKaiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrivateConnectionKaiInfo
}

// Status returns HTTPResponse.Status
func (r GetV1WorkspacesWorkspaceIDPrivateConnectionsKaiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1WorkspacesWorkspaceIDPrivateConnectionsKaiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PrivateConnectionOutboundAllowList
}

// Status returns HTTPResponse.Status
func (r GetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1WorkspacesWorkspaceIDResumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		WorkspaceID openapi_types.UUID `json:"workspaceID"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1WorkspacesWorkspaceIDResumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1WorkspacesWorkspaceIDResumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1WorkspacesWorkspaceIDSuspendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		WorkspaceID openapi_types.UUID `json:"workspaceID"`
	}
}

// Status returns HTTPResponse.Status
func (r PostV1WorkspacesWorkspaceIDSuspendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1WorkspacesWorkspaceIDSuspendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2RegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RegionV2
}

// Status returns HTTPResponse.Status
func (r GetV2RegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2RegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV1AuditLogsWithResponse request returning *GetV1AuditLogsResponse
func (c *ClientWithResponses) GetV1AuditLogsWithResponse(ctx context.Context, params *GetV1AuditLogsParams, reqEditors ...RequestEditorFn) (*GetV1AuditLogsResponse, error) {
	rsp, err := c.GetV1AuditLogs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AuditLogsResponse(rsp)
}

// GetV1BillingUsageWithResponse request returning *GetV1BillingUsageResponse
func (c *ClientWithResponses) GetV1BillingUsageWithResponse(ctx context.Context, params *GetV1BillingUsageParams, reqEditors ...RequestEditorFn) (*GetV1BillingUsageResponse, error) {
	rsp, err := c.GetV1BillingUsage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1BillingUsageResponse(rsp)
}

// GetV1FilesFsLocationWithResponse request returning *GetV1FilesFsLocationResponse
func (c *ClientWithResponses) GetV1FilesFsLocationWithResponse(ctx context.Context, location FileLocationSchema, reqEditors ...RequestEditorFn) (*GetV1FilesFsLocationResponse, error) {
	rsp, err := c.GetV1FilesFsLocation(ctx, location, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1FilesFsLocationResponse(rsp)
}

// DeleteV1FilesFsLocationPathWithResponse request returning *DeleteV1FilesFsLocationPathResponse
func (c *ClientWithResponses) DeleteV1FilesFsLocationPathWithResponse(ctx context.Context, location FileLocationSchema, path string, reqEditors ...RequestEditorFn) (*DeleteV1FilesFsLocationPathResponse, error) {
	rsp, err := c.DeleteV1FilesFsLocationPath(ctx, location, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1FilesFsLocationPathResponse(rsp)
}

// GetV1FilesFsLocationPathWithResponse request returning *GetV1FilesFsLocationPathResponse
func (c *ClientWithResponses) GetV1FilesFsLocationPathWithResponse(ctx context.Context, location FileLocationSchema, path string, params *GetV1FilesFsLocationPathParams, reqEditors ...RequestEditorFn) (*GetV1FilesFsLocationPathResponse, error) {
	rsp, err := c.GetV1FilesFsLocationPath(ctx, location, path, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1FilesFsLocationPathResponse(rsp)
}

// PatchV1FilesFsLocationPathWithBodyWithResponse request with arbitrary body returning *PatchV1FilesFsLocationPathResponse
func (c *ClientWithResponses) PatchV1FilesFsLocationPathWithBodyWithResponse(ctx context.Context, location FileLocationSchema, path string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1FilesFsLocationPathResponse, error) {
	rsp, err := c.PatchV1FilesFsLocationPathWithBody(ctx, location, path, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1FilesFsLocationPathResponse(rsp)
}

func (c *ClientWithResponses) PatchV1FilesFsLocationPathWithResponse(ctx context.Context, location FileLocationSchema, path string, body PatchV1FilesFsLocationPathJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1FilesFsLocationPathResponse, error) {
	rsp, err := c.PatchV1FilesFsLocationPath(ctx, location, path, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1FilesFsLocationPathResponse(rsp)
}

// PutV1FilesFsLocationPathWithBodyWithResponse request with arbitrary body returning *PutV1FilesFsLocationPathResponse
func (c *ClientWithResponses) PutV1FilesFsLocationPathWithBodyWithResponse(ctx context.Context, location FileLocationSchema, path string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1FilesFsLocationPathResponse, error) {
	rsp, err := c.PutV1FilesFsLocationPathWithBody(ctx, location, path, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1FilesFsLocationPathResponse(rsp)
}

// GetV1InvitationsWithResponse request returning *GetV1InvitationsResponse
func (c *ClientWithResponses) GetV1InvitationsWithResponse(ctx context.Context, params *GetV1InvitationsParams, reqEditors ...RequestEditorFn) (*GetV1InvitationsResponse, error) {
	rsp, err := c.GetV1Invitations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1InvitationsResponse(rsp)
}

// PostV1InvitationsWithBodyWithResponse request with arbitrary body returning *PostV1InvitationsResponse
func (c *ClientWithResponses) PostV1InvitationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1InvitationsResponse, error) {
	rsp, err := c.PostV1InvitationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1InvitationsResponse(rsp)
}

func (c *ClientWithResponses) PostV1InvitationsWithResponse(ctx context.Context, body PostV1InvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1InvitationsResponse, error) {
	rsp, err := c.PostV1Invitations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1InvitationsResponse(rsp)
}

// DeleteV1InvitationsInvitationIDWithResponse request returning *DeleteV1InvitationsInvitationIDResponse
func (c *ClientWithResponses) DeleteV1InvitationsInvitationIDWithResponse(ctx context.Context, invitationID InvitationID, reqEditors ...RequestEditorFn) (*DeleteV1InvitationsInvitationIDResponse, error) {
	rsp, err := c.DeleteV1InvitationsInvitationID(ctx, invitationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1InvitationsInvitationIDResponse(rsp)
}

// GetV1InvitationsInvitationIDWithResponse request returning *GetV1InvitationsInvitationIDResponse
func (c *ClientWithResponses) GetV1InvitationsInvitationIDWithResponse(ctx context.Context, invitationID InvitationID, params *GetV1InvitationsInvitationIDParams, reqEditors ...RequestEditorFn) (*GetV1InvitationsInvitationIDResponse, error) {
	rsp, err := c.GetV1InvitationsInvitationID(ctx, invitationID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1InvitationsInvitationIDResponse(rsp)
}

// PostV1JobsWithBodyWithResponse request with arbitrary body returning *PostV1JobsResponse
func (c *ClientWithResponses) PostV1JobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1JobsResponse, error) {
	rsp, err := c.PostV1JobsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1JobsResponse(rsp)
}

func (c *ClientWithResponses) PostV1JobsWithResponse(ctx context.Context, body PostV1JobsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1JobsResponse, error) {
	rsp, err := c.PostV1Jobs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1JobsResponse(rsp)
}

// GetV1JobsRuntimesWithResponse request returning *GetV1JobsRuntimesResponse
func (c *ClientWithResponses) GetV1JobsRuntimesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1JobsRuntimesResponse, error) {
	rsp, err := c.GetV1JobsRuntimes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1JobsRuntimesResponse(rsp)
}

// DeleteV1JobsJobIDWithResponse request returning *DeleteV1JobsJobIDResponse
func (c *ClientWithResponses) DeleteV1JobsJobIDWithResponse(ctx context.Context, jobID JobID, reqEditors ...RequestEditorFn) (*DeleteV1JobsJobIDResponse, error) {
	rsp, err := c.DeleteV1JobsJobID(ctx, jobID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1JobsJobIDResponse(rsp)
}

// GetV1JobsJobIDWithResponse request returning *GetV1JobsJobIDResponse
func (c *ClientWithResponses) GetV1JobsJobIDWithResponse(ctx context.Context, jobID JobID, reqEditors ...RequestEditorFn) (*GetV1JobsJobIDResponse, error) {
	rsp, err := c.GetV1JobsJobID(ctx, jobID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1JobsJobIDResponse(rsp)
}

// GetV1JobsJobIDExecutionsWithResponse request returning *GetV1JobsJobIDExecutionsResponse
func (c *ClientWithResponses) GetV1JobsJobIDExecutionsWithResponse(ctx context.Context, jobID JobID, params *GetV1JobsJobIDExecutionsParams, reqEditors ...RequestEditorFn) (*GetV1JobsJobIDExecutionsResponse, error) {
	rsp, err := c.GetV1JobsJobIDExecutions(ctx, jobID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1JobsJobIDExecutionsResponse(rsp)
}

// GetV1JobsJobIDParametersWithResponse request returning *GetV1JobsJobIDParametersResponse
func (c *ClientWithResponses) GetV1JobsJobIDParametersWithResponse(ctx context.Context, jobID JobID, reqEditors ...RequestEditorFn) (*GetV1JobsJobIDParametersResponse, error) {
	rsp, err := c.GetV1JobsJobIDParameters(ctx, jobID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1JobsJobIDParametersResponse(rsp)
}

// GetV1OrganizationsCurrentWithResponse request returning *GetV1OrganizationsCurrentResponse
func (c *ClientWithResponses) GetV1OrganizationsCurrentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1OrganizationsCurrentResponse, error) {
	rsp, err := c.GetV1OrganizationsCurrent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1OrganizationsCurrentResponse(rsp)
}

// GetV1OrganizationsOrganizationIDAccessControlsWithResponse request returning *GetV1OrganizationsOrganizationIDAccessControlsResponse
func (c *ClientWithResponses) GetV1OrganizationsOrganizationIDAccessControlsWithResponse(ctx context.Context, organizationID OrganizationID, reqEditors ...RequestEditorFn) (*GetV1OrganizationsOrganizationIDAccessControlsResponse, error) {
	rsp, err := c.GetV1OrganizationsOrganizationIDAccessControls(ctx, organizationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1OrganizationsOrganizationIDAccessControlsResponse(rsp)
}

// PatchV1OrganizationsOrganizationIDAccessControlsWithBodyWithResponse request with arbitrary body returning *PatchV1OrganizationsOrganizationIDAccessControlsResponse
func (c *ClientWithResponses) PatchV1OrganizationsOrganizationIDAccessControlsWithBodyWithResponse(ctx context.Context, organizationID OrganizationID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1OrganizationsOrganizationIDAccessControlsResponse, error) {
	rsp, err := c.PatchV1OrganizationsOrganizationIDAccessControlsWithBody(ctx, organizationID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1OrganizationsOrganizationIDAccessControlsResponse(rsp)
}

func (c *ClientWithResponses) PatchV1OrganizationsOrganizationIDAccessControlsWithResponse(ctx context.Context, organizationID OrganizationID, body PatchV1OrganizationsOrganizationIDAccessControlsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1OrganizationsOrganizationIDAccessControlsResponse, error) {
	rsp, err := c.PatchV1OrganizationsOrganizationIDAccessControls(ctx, organizationID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1OrganizationsOrganizationIDAccessControlsResponse(rsp)
}

// PostV1PrivateConnectionsWithBodyWithResponse request with arbitrary body returning *PostV1PrivateConnectionsResponse
func (c *ClientWithResponses) PostV1PrivateConnectionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PrivateConnectionsResponse, error) {
	rsp, err := c.PostV1PrivateConnectionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PrivateConnectionsResponse(rsp)
}

func (c *ClientWithResponses) PostV1PrivateConnectionsWithResponse(ctx context.Context, body PostV1PrivateConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1PrivateConnectionsResponse, error) {
	rsp, err := c.PostV1PrivateConnections(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PrivateConnectionsResponse(rsp)
}

// DeleteV1PrivateConnectionsConnectionIDWithResponse request returning *DeleteV1PrivateConnectionsConnectionIDResponse
func (c *ClientWithResponses) DeleteV1PrivateConnectionsConnectionIDWithResponse(ctx context.Context, connectionID ConnectionID, reqEditors ...RequestEditorFn) (*DeleteV1PrivateConnectionsConnectionIDResponse, error) {
	rsp, err := c.DeleteV1PrivateConnectionsConnectionID(ctx, connectionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1PrivateConnectionsConnectionIDResponse(rsp)
}

// GetV1PrivateConnectionsConnectionIDWithResponse request returning *GetV1PrivateConnectionsConnectionIDResponse
func (c *ClientWithResponses) GetV1PrivateConnectionsConnectionIDWithResponse(ctx context.Context, connectionID ConnectionID, params *GetV1PrivateConnectionsConnectionIDParams, reqEditors ...RequestEditorFn) (*GetV1PrivateConnectionsConnectionIDResponse, error) {
	rsp, err := c.GetV1PrivateConnectionsConnectionID(ctx, connectionID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1PrivateConnectionsConnectionIDResponse(rsp)
}

// PatchV1PrivateConnectionsConnectionIDWithBodyWithResponse request with arbitrary body returning *PatchV1PrivateConnectionsConnectionIDResponse
func (c *ClientWithResponses) PatchV1PrivateConnectionsConnectionIDWithBodyWithResponse(ctx context.Context, connectionID ConnectionID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1PrivateConnectionsConnectionIDResponse, error) {
	rsp, err := c.PatchV1PrivateConnectionsConnectionIDWithBody(ctx, connectionID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1PrivateConnectionsConnectionIDResponse(rsp)
}

func (c *ClientWithResponses) PatchV1PrivateConnectionsConnectionIDWithResponse(ctx context.Context, connectionID ConnectionID, body PatchV1PrivateConnectionsConnectionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1PrivateConnectionsConnectionIDResponse, error) {
	rsp, err := c.PatchV1PrivateConnectionsConnectionID(ctx, connectionID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1PrivateConnectionsConnectionIDResponse(rsp)
}

// GetV1RegionsWithResponse request returning *GetV1RegionsResponse
func (c *ClientWithResponses) GetV1RegionsWithResponse(ctx context.Context, params *GetV1RegionsParams, reqEditors ...RequestEditorFn) (*GetV1RegionsResponse, error) {
	rsp, err := c.GetV1Regions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1RegionsResponse(rsp)
}

// GetV1RegionsSharedtierWithResponse request returning *GetV1RegionsSharedtierResponse
func (c *ClientWithResponses) GetV1RegionsSharedtierWithResponse(ctx context.Context, params *GetV1RegionsSharedtierParams, reqEditors ...RequestEditorFn) (*GetV1RegionsSharedtierResponse, error) {
	rsp, err := c.GetV1RegionsSharedtier(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1RegionsSharedtierResponse(rsp)
}

// GetV1RolesResourceTypeWithResponse request returning *GetV1RolesResourceTypeResponse
func (c *ClientWithResponses) GetV1RolesResourceTypeWithResponse(ctx context.Context, resourceType ResourceType, reqEditors ...RequestEditorFn) (*GetV1RolesResourceTypeResponse, error) {
	rsp, err := c.GetV1RolesResourceType(ctx, resourceType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1RolesResourceTypeResponse(rsp)
}

// PostV1RolesResourceTypeWithBodyWithResponse request with arbitrary body returning *PostV1RolesResourceTypeResponse
func (c *ClientWithResponses) PostV1RolesResourceTypeWithBodyWithResponse(ctx context.Context, resourceType ResourceType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1RolesResourceTypeResponse, error) {
	rsp, err := c.PostV1RolesResourceTypeWithBody(ctx, resourceType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1RolesResourceTypeResponse(rsp)
}

func (c *ClientWithResponses) PostV1RolesResourceTypeWithResponse(ctx context.Context, resourceType ResourceType, body PostV1RolesResourceTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1RolesResourceTypeResponse, error) {
	rsp, err := c.PostV1RolesResourceType(ctx, resourceType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1RolesResourceTypeResponse(rsp)
}

// DeleteV1RolesResourceTypeRoleWithResponse request returning *DeleteV1RolesResourceTypeRoleResponse
func (c *ClientWithResponses) DeleteV1RolesResourceTypeRoleWithResponse(ctx context.Context, resourceType ResourceType, role Role, reqEditors ...RequestEditorFn) (*DeleteV1RolesResourceTypeRoleResponse, error) {
	rsp, err := c.DeleteV1RolesResourceTypeRole(ctx, resourceType, role, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1RolesResourceTypeRoleResponse(rsp)
}

// GetV1RolesResourceTypeRoleWithResponse request returning *GetV1RolesResourceTypeRoleResponse
func (c *ClientWithResponses) GetV1RolesResourceTypeRoleWithResponse(ctx context.Context, resourceType ResourceType, role Role, reqEditors ...RequestEditorFn) (*GetV1RolesResourceTypeRoleResponse, error) {
	rsp, err := c.GetV1RolesResourceTypeRole(ctx, resourceType, role, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1RolesResourceTypeRoleResponse(rsp)
}

// PutV1RolesResourceTypeRoleWithBodyWithResponse request with arbitrary body returning *PutV1RolesResourceTypeRoleResponse
func (c *ClientWithResponses) PutV1RolesResourceTypeRoleWithBodyWithResponse(ctx context.Context, resourceType ResourceType, role Role, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1RolesResourceTypeRoleResponse, error) {
	rsp, err := c.PutV1RolesResourceTypeRoleWithBody(ctx, resourceType, role, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1RolesResourceTypeRoleResponse(rsp)
}

func (c *ClientWithResponses) PutV1RolesResourceTypeRoleWithResponse(ctx context.Context, resourceType ResourceType, role Role, body PutV1RolesResourceTypeRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1RolesResourceTypeRoleResponse, error) {
	rsp, err := c.PutV1RolesResourceTypeRole(ctx, resourceType, role, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1RolesResourceTypeRoleResponse(rsp)
}

// GetV1SecretsWithResponse request returning *GetV1SecretsResponse
func (c *ClientWithResponses) GetV1SecretsWithResponse(ctx context.Context, params *GetV1SecretsParams, reqEditors ...RequestEditorFn) (*GetV1SecretsResponse, error) {
	rsp, err := c.GetV1Secrets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1SecretsResponse(rsp)
}

// PostV1SecretsWithBodyWithResponse request with arbitrary body returning *PostV1SecretsResponse
func (c *ClientWithResponses) PostV1SecretsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SecretsResponse, error) {
	rsp, err := c.PostV1SecretsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SecretsResponse(rsp)
}

func (c *ClientWithResponses) PostV1SecretsWithResponse(ctx context.Context, body PostV1SecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SecretsResponse, error) {
	rsp, err := c.PostV1Secrets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SecretsResponse(rsp)
}

// DeleteV1SecretsSecretIDWithResponse request returning *DeleteV1SecretsSecretIDResponse
func (c *ClientWithResponses) DeleteV1SecretsSecretIDWithResponse(ctx context.Context, secretID SecretID, reqEditors ...RequestEditorFn) (*DeleteV1SecretsSecretIDResponse, error) {
	rsp, err := c.DeleteV1SecretsSecretID(ctx, secretID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1SecretsSecretIDResponse(rsp)
}

// GetV1SecretsSecretIDWithResponse request returning *GetV1SecretsSecretIDResponse
func (c *ClientWithResponses) GetV1SecretsSecretIDWithResponse(ctx context.Context, secretID SecretID, reqEditors ...RequestEditorFn) (*GetV1SecretsSecretIDResponse, error) {
	rsp, err := c.GetV1SecretsSecretID(ctx, secretID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1SecretsSecretIDResponse(rsp)
}

// PatchV1SecretsSecretIDWithBodyWithResponse request with arbitrary body returning *PatchV1SecretsSecretIDResponse
func (c *ClientWithResponses) PatchV1SecretsSecretIDWithBodyWithResponse(ctx context.Context, secretID SecretID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1SecretsSecretIDResponse, error) {
	rsp, err := c.PatchV1SecretsSecretIDWithBody(ctx, secretID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1SecretsSecretIDResponse(rsp)
}

func (c *ClientWithResponses) PatchV1SecretsSecretIDWithResponse(ctx context.Context, secretID SecretID, body PatchV1SecretsSecretIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1SecretsSecretIDResponse, error) {
	rsp, err := c.PatchV1SecretsSecretID(ctx, secretID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1SecretsSecretIDResponse(rsp)
}

// GetV1SecretsSecretIDAccessControlsWithResponse request returning *GetV1SecretsSecretIDAccessControlsResponse
func (c *ClientWithResponses) GetV1SecretsSecretIDAccessControlsWithResponse(ctx context.Context, secretID SecretID, reqEditors ...RequestEditorFn) (*GetV1SecretsSecretIDAccessControlsResponse, error) {
	rsp, err := c.GetV1SecretsSecretIDAccessControls(ctx, secretID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1SecretsSecretIDAccessControlsResponse(rsp)
}

// PatchV1SecretsSecretIDAccessControlsWithBodyWithResponse request with arbitrary body returning *PatchV1SecretsSecretIDAccessControlsResponse
func (c *ClientWithResponses) PatchV1SecretsSecretIDAccessControlsWithBodyWithResponse(ctx context.Context, secretID SecretID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1SecretsSecretIDAccessControlsResponse, error) {
	rsp, err := c.PatchV1SecretsSecretIDAccessControlsWithBody(ctx, secretID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1SecretsSecretIDAccessControlsResponse(rsp)
}

func (c *ClientWithResponses) PatchV1SecretsSecretIDAccessControlsWithResponse(ctx context.Context, secretID SecretID, body PatchV1SecretsSecretIDAccessControlsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1SecretsSecretIDAccessControlsResponse, error) {
	rsp, err := c.PatchV1SecretsSecretIDAccessControls(ctx, secretID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1SecretsSecretIDAccessControlsResponse(rsp)
}

// GetV1SharedtierVirtualWorkspacesWithResponse request returning *GetV1SharedtierVirtualWorkspacesResponse
func (c *ClientWithResponses) GetV1SharedtierVirtualWorkspacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1SharedtierVirtualWorkspacesResponse, error) {
	rsp, err := c.GetV1SharedtierVirtualWorkspaces(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1SharedtierVirtualWorkspacesResponse(rsp)
}

// PostV1SharedtierVirtualWorkspacesWithBodyWithResponse request with arbitrary body returning *PostV1SharedtierVirtualWorkspacesResponse
func (c *ClientWithResponses) PostV1SharedtierVirtualWorkspacesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SharedtierVirtualWorkspacesResponse, error) {
	rsp, err := c.PostV1SharedtierVirtualWorkspacesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SharedtierVirtualWorkspacesResponse(rsp)
}

func (c *ClientWithResponses) PostV1SharedtierVirtualWorkspacesWithResponse(ctx context.Context, body PostV1SharedtierVirtualWorkspacesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SharedtierVirtualWorkspacesResponse, error) {
	rsp, err := c.PostV1SharedtierVirtualWorkspaces(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SharedtierVirtualWorkspacesResponse(rsp)
}

// DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDWithResponse request returning *DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse
func (c *ClientWithResponses) DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDWithResponse(ctx context.Context, virtualWorkspaceID openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse, error) {
	rsp, err := c.DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceID(ctx, virtualWorkspaceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse(rsp)
}

// GetV1SharedtierVirtualWorkspacesVirtualWorkspaceIDWithResponse request returning *GetV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse
func (c *ClientWithResponses) GetV1SharedtierVirtualWorkspacesVirtualWorkspaceIDWithResponse(ctx context.Context, virtualWorkspaceID openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse, error) {
	rsp, err := c.GetV1SharedtierVirtualWorkspacesVirtualWorkspaceID(ctx, virtualWorkspaceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse(rsp)
}

// PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersWithBodyWithResponse request with arbitrary body returning *PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersResponse
func (c *ClientWithResponses) PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersWithBodyWithResponse(ctx context.Context, virtualWorkspaceID openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersResponse, error) {
	rsp, err := c.PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersWithBody(ctx, virtualWorkspaceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersResponse(rsp)
}

func (c *ClientWithResponses) PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersWithResponse(ctx context.Context, virtualWorkspaceID openapi_types.UUID, body PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersResponse, error) {
	rsp, err := c.PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsers(ctx, virtualWorkspaceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersResponse(rsp)
}

// DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDWithBodyWithResponse request with arbitrary body returning *DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse
func (c *ClientWithResponses) DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDWithBodyWithResponse(ctx context.Context, virtualWorkspaceID openapi_types.UUID, userID openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse, error) {
	rsp, err := c.DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDWithBody(ctx, virtualWorkspaceID, userID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse(rsp)
}

func (c *ClientWithResponses) DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDWithResponse(ctx context.Context, virtualWorkspaceID openapi_types.UUID, userID openapi_types.UUID, body DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse, error) {
	rsp, err := c.DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserID(ctx, virtualWorkspaceID, userID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse(rsp)
}

// PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDWithBodyWithResponse request with arbitrary body returning *PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse
func (c *ClientWithResponses) PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDWithBodyWithResponse(ctx context.Context, virtualWorkspaceID openapi_types.UUID, userID openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse, error) {
	rsp, err := c.PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDWithBody(ctx, virtualWorkspaceID, userID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse(rsp)
}

func (c *ClientWithResponses) PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDWithResponse(ctx context.Context, virtualWorkspaceID openapi_types.UUID, userID openapi_types.UUID, body PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse, error) {
	rsp, err := c.PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserID(ctx, virtualWorkspaceID, userID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse(rsp)
}

// GetV1StageDeploymentIDFsWithResponse request returning *GetV1StageDeploymentIDFsResponse
func (c *ClientWithResponses) GetV1StageDeploymentIDFsWithResponse(ctx context.Context, deploymentID openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1StageDeploymentIDFsResponse, error) {
	rsp, err := c.GetV1StageDeploymentIDFs(ctx, deploymentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1StageDeploymentIDFsResponse(rsp)
}

// DeleteV1StageDeploymentIDFsPathWithResponse request returning *DeleteV1StageDeploymentIDFsPathResponse
func (c *ClientWithResponses) DeleteV1StageDeploymentIDFsPathWithResponse(ctx context.Context, deploymentID openapi_types.UUID, path string, reqEditors ...RequestEditorFn) (*DeleteV1StageDeploymentIDFsPathResponse, error) {
	rsp, err := c.DeleteV1StageDeploymentIDFsPath(ctx, deploymentID, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1StageDeploymentIDFsPathResponse(rsp)
}

// GetV1StageDeploymentIDFsPathWithResponse request returning *GetV1StageDeploymentIDFsPathResponse
func (c *ClientWithResponses) GetV1StageDeploymentIDFsPathWithResponse(ctx context.Context, deploymentID openapi_types.UUID, path string, params *GetV1StageDeploymentIDFsPathParams, reqEditors ...RequestEditorFn) (*GetV1StageDeploymentIDFsPathResponse, error) {
	rsp, err := c.GetV1StageDeploymentIDFsPath(ctx, deploymentID, path, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1StageDeploymentIDFsPathResponse(rsp)
}

// PatchV1StageDeploymentIDFsPathWithBodyWithResponse request with arbitrary body returning *PatchV1StageDeploymentIDFsPathResponse
func (c *ClientWithResponses) PatchV1StageDeploymentIDFsPathWithBodyWithResponse(ctx context.Context, deploymentID openapi_types.UUID, path string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1StageDeploymentIDFsPathResponse, error) {
	rsp, err := c.PatchV1StageDeploymentIDFsPathWithBody(ctx, deploymentID, path, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1StageDeploymentIDFsPathResponse(rsp)
}

func (c *ClientWithResponses) PatchV1StageDeploymentIDFsPathWithResponse(ctx context.Context, deploymentID openapi_types.UUID, path string, body PatchV1StageDeploymentIDFsPathJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1StageDeploymentIDFsPathResponse, error) {
	rsp, err := c.PatchV1StageDeploymentIDFsPath(ctx, deploymentID, path, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1StageDeploymentIDFsPathResponse(rsp)
}

// PutV1StageDeploymentIDFsPathWithBodyWithResponse request with arbitrary body returning *PutV1StageDeploymentIDFsPathResponse
func (c *ClientWithResponses) PutV1StageDeploymentIDFsPathWithBodyWithResponse(ctx context.Context, deploymentID openapi_types.UUID, path string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1StageDeploymentIDFsPathResponse, error) {
	rsp, err := c.PutV1StageDeploymentIDFsPathWithBody(ctx, deploymentID, path, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1StageDeploymentIDFsPathResponse(rsp)
}

// GetV1TeamsWithResponse request returning *GetV1TeamsResponse
func (c *ClientWithResponses) GetV1TeamsWithResponse(ctx context.Context, params *GetV1TeamsParams, reqEditors ...RequestEditorFn) (*GetV1TeamsResponse, error) {
	rsp, err := c.GetV1Teams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1TeamsResponse(rsp)
}

// PostV1TeamsWithBodyWithResponse request with arbitrary body returning *PostV1TeamsResponse
func (c *ClientWithResponses) PostV1TeamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1TeamsResponse, error) {
	rsp, err := c.PostV1TeamsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1TeamsResponse(rsp)
}

func (c *ClientWithResponses) PostV1TeamsWithResponse(ctx context.Context, body PostV1TeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1TeamsResponse, error) {
	rsp, err := c.PostV1Teams(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1TeamsResponse(rsp)
}

// DeleteV1TeamsTeamIDWithResponse request returning *DeleteV1TeamsTeamIDResponse
func (c *ClientWithResponses) DeleteV1TeamsTeamIDWithResponse(ctx context.Context, teamID TeamID, reqEditors ...RequestEditorFn) (*DeleteV1TeamsTeamIDResponse, error) {
	rsp, err := c.DeleteV1TeamsTeamID(ctx, teamID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1TeamsTeamIDResponse(rsp)
}

// GetV1TeamsTeamIDWithResponse request returning *GetV1TeamsTeamIDResponse
func (c *ClientWithResponses) GetV1TeamsTeamIDWithResponse(ctx context.Context, teamID TeamID, reqEditors ...RequestEditorFn) (*GetV1TeamsTeamIDResponse, error) {
	rsp, err := c.GetV1TeamsTeamID(ctx, teamID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1TeamsTeamIDResponse(rsp)
}

// PatchV1TeamsTeamIDWithBodyWithResponse request with arbitrary body returning *PatchV1TeamsTeamIDResponse
func (c *ClientWithResponses) PatchV1TeamsTeamIDWithBodyWithResponse(ctx context.Context, teamID TeamID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1TeamsTeamIDResponse, error) {
	rsp, err := c.PatchV1TeamsTeamIDWithBody(ctx, teamID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1TeamsTeamIDResponse(rsp)
}

func (c *ClientWithResponses) PatchV1TeamsTeamIDWithResponse(ctx context.Context, teamID TeamID, body PatchV1TeamsTeamIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1TeamsTeamIDResponse, error) {
	rsp, err := c.PatchV1TeamsTeamID(ctx, teamID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1TeamsTeamIDResponse(rsp)
}

// GetV1TeamsTeamIDAccessControlsWithResponse request returning *GetV1TeamsTeamIDAccessControlsResponse
func (c *ClientWithResponses) GetV1TeamsTeamIDAccessControlsWithResponse(ctx context.Context, teamID TeamID, reqEditors ...RequestEditorFn) (*GetV1TeamsTeamIDAccessControlsResponse, error) {
	rsp, err := c.GetV1TeamsTeamIDAccessControls(ctx, teamID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1TeamsTeamIDAccessControlsResponse(rsp)
}

// PatchV1TeamsTeamIDAccessControlsWithBodyWithResponse request with arbitrary body returning *PatchV1TeamsTeamIDAccessControlsResponse
func (c *ClientWithResponses) PatchV1TeamsTeamIDAccessControlsWithBodyWithResponse(ctx context.Context, teamID TeamID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1TeamsTeamIDAccessControlsResponse, error) {
	rsp, err := c.PatchV1TeamsTeamIDAccessControlsWithBody(ctx, teamID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1TeamsTeamIDAccessControlsResponse(rsp)
}

func (c *ClientWithResponses) PatchV1TeamsTeamIDAccessControlsWithResponse(ctx context.Context, teamID TeamID, body PatchV1TeamsTeamIDAccessControlsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1TeamsTeamIDAccessControlsResponse, error) {
	rsp, err := c.PatchV1TeamsTeamIDAccessControls(ctx, teamID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1TeamsTeamIDAccessControlsResponse(rsp)
}

// GetV1TeamsTeamIDIdentityRolesWithResponse request returning *GetV1TeamsTeamIDIdentityRolesResponse
func (c *ClientWithResponses) GetV1TeamsTeamIDIdentityRolesWithResponse(ctx context.Context, teamID TeamID, params *GetV1TeamsTeamIDIdentityRolesParams, reqEditors ...RequestEditorFn) (*GetV1TeamsTeamIDIdentityRolesResponse, error) {
	rsp, err := c.GetV1TeamsTeamIDIdentityRoles(ctx, teamID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1TeamsTeamIDIdentityRolesResponse(rsp)
}

// GetV1UsersWithResponse request returning *GetV1UsersResponse
func (c *ClientWithResponses) GetV1UsersWithResponse(ctx context.Context, params *GetV1UsersParams, reqEditors ...RequestEditorFn) (*GetV1UsersResponse, error) {
	rsp, err := c.GetV1Users(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1UsersResponse(rsp)
}

// PostV1UsersWithBodyWithResponse request with arbitrary body returning *PostV1UsersResponse
func (c *ClientWithResponses) PostV1UsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1UsersResponse, error) {
	rsp, err := c.PostV1UsersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1UsersResponse(rsp)
}

func (c *ClientWithResponses) PostV1UsersWithResponse(ctx context.Context, body PostV1UsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1UsersResponse, error) {
	rsp, err := c.PostV1Users(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1UsersResponse(rsp)
}

// GetV1UsersCurrentWithResponse request returning *GetV1UsersCurrentResponse
func (c *ClientWithResponses) GetV1UsersCurrentWithResponse(ctx context.Context, params *GetV1UsersCurrentParams, reqEditors ...RequestEditorFn) (*GetV1UsersCurrentResponse, error) {
	rsp, err := c.GetV1UsersCurrent(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1UsersCurrentResponse(rsp)
}

// DeleteV1UsersUserIDWithResponse request returning *DeleteV1UsersUserIDResponse
func (c *ClientWithResponses) DeleteV1UsersUserIDWithResponse(ctx context.Context, userID UserID, reqEditors ...RequestEditorFn) (*DeleteV1UsersUserIDResponse, error) {
	rsp, err := c.DeleteV1UsersUserID(ctx, userID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1UsersUserIDResponse(rsp)
}

// GetV1UsersUserIDWithResponse request returning *GetV1UsersUserIDResponse
func (c *ClientWithResponses) GetV1UsersUserIDWithResponse(ctx context.Context, userID UserID, params *GetV1UsersUserIDParams, reqEditors ...RequestEditorFn) (*GetV1UsersUserIDResponse, error) {
	rsp, err := c.GetV1UsersUserID(ctx, userID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1UsersUserIDResponse(rsp)
}

// GetV1UsersUserIDIdentityRolesWithResponse request returning *GetV1UsersUserIDIdentityRolesResponse
func (c *ClientWithResponses) GetV1UsersUserIDIdentityRolesWithResponse(ctx context.Context, userID UserID, params *GetV1UsersUserIDIdentityRolesParams, reqEditors ...RequestEditorFn) (*GetV1UsersUserIDIdentityRolesResponse, error) {
	rsp, err := c.GetV1UsersUserIDIdentityRoles(ctx, userID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1UsersUserIDIdentityRolesResponse(rsp)
}

// GetV1WorkspaceGroupsWithResponse request returning *GetV1WorkspaceGroupsResponse
func (c *ClientWithResponses) GetV1WorkspaceGroupsWithResponse(ctx context.Context, params *GetV1WorkspaceGroupsParams, reqEditors ...RequestEditorFn) (*GetV1WorkspaceGroupsResponse, error) {
	rsp, err := c.GetV1WorkspaceGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1WorkspaceGroupsResponse(rsp)
}

// PostV1WorkspaceGroupsWithBodyWithResponse request with arbitrary body returning *PostV1WorkspaceGroupsResponse
func (c *ClientWithResponses) PostV1WorkspaceGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1WorkspaceGroupsResponse, error) {
	rsp, err := c.PostV1WorkspaceGroupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1WorkspaceGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostV1WorkspaceGroupsWithResponse(ctx context.Context, body PostV1WorkspaceGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1WorkspaceGroupsResponse, error) {
	rsp, err := c.PostV1WorkspaceGroups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1WorkspaceGroupsResponse(rsp)
}

// DeleteV1WorkspaceGroupsWorkspaceGroupIDWithResponse request returning *DeleteV1WorkspaceGroupsWorkspaceGroupIDResponse
func (c *ClientWithResponses) DeleteV1WorkspaceGroupsWorkspaceGroupIDWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, params *DeleteV1WorkspaceGroupsWorkspaceGroupIDParams, reqEditors ...RequestEditorFn) (*DeleteV1WorkspaceGroupsWorkspaceGroupIDResponse, error) {
	rsp, err := c.DeleteV1WorkspaceGroupsWorkspaceGroupID(ctx, workspaceGroupID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1WorkspaceGroupsWorkspaceGroupIDResponse(rsp)
}

// GetV1WorkspaceGroupsWorkspaceGroupIDWithResponse request returning *GetV1WorkspaceGroupsWorkspaceGroupIDResponse
func (c *ClientWithResponses) GetV1WorkspaceGroupsWorkspaceGroupIDWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, params *GetV1WorkspaceGroupsWorkspaceGroupIDParams, reqEditors ...RequestEditorFn) (*GetV1WorkspaceGroupsWorkspaceGroupIDResponse, error) {
	rsp, err := c.GetV1WorkspaceGroupsWorkspaceGroupID(ctx, workspaceGroupID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1WorkspaceGroupsWorkspaceGroupIDResponse(rsp)
}

// PatchV1WorkspaceGroupsWorkspaceGroupIDWithBodyWithResponse request with arbitrary body returning *PatchV1WorkspaceGroupsWorkspaceGroupIDResponse
func (c *ClientWithResponses) PatchV1WorkspaceGroupsWorkspaceGroupIDWithBodyWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1WorkspaceGroupsWorkspaceGroupIDResponse, error) {
	rsp, err := c.PatchV1WorkspaceGroupsWorkspaceGroupIDWithBody(ctx, workspaceGroupID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1WorkspaceGroupsWorkspaceGroupIDResponse(rsp)
}

func (c *ClientWithResponses) PatchV1WorkspaceGroupsWorkspaceGroupIDWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, body PatchV1WorkspaceGroupsWorkspaceGroupIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1WorkspaceGroupsWorkspaceGroupIDResponse, error) {
	rsp, err := c.PatchV1WorkspaceGroupsWorkspaceGroupID(ctx, workspaceGroupID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1WorkspaceGroupsWorkspaceGroupIDResponse(rsp)
}

// GetV1WorkspaceGroupsWorkspaceGroupIDAccessControlsWithResponse request returning *GetV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse
func (c *ClientWithResponses) GetV1WorkspaceGroupsWorkspaceGroupIDAccessControlsWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*GetV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse, error) {
	rsp, err := c.GetV1WorkspaceGroupsWorkspaceGroupIDAccessControls(ctx, workspaceGroupID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse(rsp)
}

// PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsWithBodyWithResponse request with arbitrary body returning *PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse
func (c *ClientWithResponses) PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsWithBodyWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse, error) {
	rsp, err := c.PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsWithBody(ctx, workspaceGroupID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse(rsp)
}

func (c *ClientWithResponses) PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, body PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse, error) {
	rsp, err := c.PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControls(ctx, workspaceGroupID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse(rsp)
}

// GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsWithResponse request returning *GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsResponse
func (c *ClientWithResponses) GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, params *GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsParams, reqEditors ...RequestEditorFn) (*GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsResponse, error) {
	rsp, err := c.GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnections(ctx, workspaceGroupID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsResponse(rsp)
}

// PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailbackWithResponse request returning *PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailbackResponse
func (c *ClientWithResponses) PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailbackWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailbackResponse, error) {
	rsp, err := c.PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailback(ctx, workspaceGroupID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailbackResponse(rsp)
}

// PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailoverWithResponse request returning *PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailoverResponse
func (c *ClientWithResponses) PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailoverWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailoverResponse, error) {
	rsp, err := c.PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailover(ctx, workspaceGroupID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailoverResponse(rsp)
}

// GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsWithResponse request returning *GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsResponse
func (c *ClientWithResponses) GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, params *GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsParams, reqEditors ...RequestEditorFn) (*GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsResponse, error) {
	rsp, err := c.GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegions(ctx, workspaceGroupID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsResponse(rsp)
}

// PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupWithBodyWithResponse request with arbitrary body returning *PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupResponse
func (c *ClientWithResponses) PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupWithBodyWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupResponse, error) {
	rsp, err := c.PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupWithBody(ctx, workspaceGroupID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupResponse(rsp)
}

func (c *ClientWithResponses) PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, body PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupResponse, error) {
	rsp, err := c.PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetup(ctx, workspaceGroupID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupResponse(rsp)
}

// PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvisionWithResponse request returning *PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvisionResponse
func (c *ClientWithResponses) PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvisionWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvisionResponse, error) {
	rsp, err := c.PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvision(ctx, workspaceGroupID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvisionResponse(rsp)
}

// GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatusWithResponse request returning *GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatusResponse
func (c *ClientWithResponses) GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatusWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatusResponse, error) {
	rsp, err := c.GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatus(ctx, workspaceGroupID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatusResponse(rsp)
}

// PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvisionWithResponse request returning *PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvisionResponse
func (c *ClientWithResponses) PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvisionWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvisionResponse, error) {
	rsp, err := c.PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvision(ctx, workspaceGroupID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvisionResponse(rsp)
}

// PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodWithBodyWithResponse request with arbitrary body returning *PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodResponse
func (c *ClientWithResponses) PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodWithBodyWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodResponse, error) {
	rsp, err := c.PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodWithBody(ctx, workspaceGroupID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodResponse(rsp)
}

func (c *ClientWithResponses) PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodWithResponse(ctx context.Context, workspaceGroupID WorkspaceGroupID, body PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodResponse, error) {
	rsp, err := c.PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriod(ctx, workspaceGroupID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodResponse(rsp)
}

// GetV1WorkspacesWithResponse request returning *GetV1WorkspacesResponse
func (c *ClientWithResponses) GetV1WorkspacesWithResponse(ctx context.Context, params *GetV1WorkspacesParams, reqEditors ...RequestEditorFn) (*GetV1WorkspacesResponse, error) {
	rsp, err := c.GetV1Workspaces(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1WorkspacesResponse(rsp)
}

// PostV1WorkspacesWithBodyWithResponse request with arbitrary body returning *PostV1WorkspacesResponse
func (c *ClientWithResponses) PostV1WorkspacesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1WorkspacesResponse, error) {
	rsp, err := c.PostV1WorkspacesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1WorkspacesResponse(rsp)
}

func (c *ClientWithResponses) PostV1WorkspacesWithResponse(ctx context.Context, body PostV1WorkspacesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1WorkspacesResponse, error) {
	rsp, err := c.PostV1Workspaces(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1WorkspacesResponse(rsp)
}

// DeleteV1WorkspacesWorkspaceIDWithResponse request returning *DeleteV1WorkspacesWorkspaceIDResponse
func (c *ClientWithResponses) DeleteV1WorkspacesWorkspaceIDWithResponse(ctx context.Context, workspaceID WorkspaceID, reqEditors ...RequestEditorFn) (*DeleteV1WorkspacesWorkspaceIDResponse, error) {
	rsp, err := c.DeleteV1WorkspacesWorkspaceID(ctx, workspaceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1WorkspacesWorkspaceIDResponse(rsp)
}

// GetV1WorkspacesWorkspaceIDWithResponse request returning *GetV1WorkspacesWorkspaceIDResponse
func (c *ClientWithResponses) GetV1WorkspacesWorkspaceIDWithResponse(ctx context.Context, workspaceID WorkspaceID, params *GetV1WorkspacesWorkspaceIDParams, reqEditors ...RequestEditorFn) (*GetV1WorkspacesWorkspaceIDResponse, error) {
	rsp, err := c.GetV1WorkspacesWorkspaceID(ctx, workspaceID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1WorkspacesWorkspaceIDResponse(rsp)
}

// PatchV1WorkspacesWorkspaceIDWithBodyWithResponse request with arbitrary body returning *PatchV1WorkspacesWorkspaceIDResponse
func (c *ClientWithResponses) PatchV1WorkspacesWorkspaceIDWithBodyWithResponse(ctx context.Context, workspaceID WorkspaceID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1WorkspacesWorkspaceIDResponse, error) {
	rsp, err := c.PatchV1WorkspacesWorkspaceIDWithBody(ctx, workspaceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1WorkspacesWorkspaceIDResponse(rsp)
}

func (c *ClientWithResponses) PatchV1WorkspacesWorkspaceIDWithResponse(ctx context.Context, workspaceID WorkspaceID, body PatchV1WorkspacesWorkspaceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1WorkspacesWorkspaceIDResponse, error) {
	rsp, err := c.PatchV1WorkspacesWorkspaceID(ctx, workspaceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1WorkspacesWorkspaceIDResponse(rsp)
}

// GetV1WorkspacesWorkspaceIDPrivateConnectionsWithResponse request returning *GetV1WorkspacesWorkspaceIDPrivateConnectionsResponse
func (c *ClientWithResponses) GetV1WorkspacesWorkspaceIDPrivateConnectionsWithResponse(ctx context.Context, workspaceID WorkspaceID, params *GetV1WorkspacesWorkspaceIDPrivateConnectionsParams, reqEditors ...RequestEditorFn) (*GetV1WorkspacesWorkspaceIDPrivateConnectionsResponse, error) {
	rsp, err := c.GetV1WorkspacesWorkspaceIDPrivateConnections(ctx, workspaceID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1WorkspacesWorkspaceIDPrivateConnectionsResponse(rsp)
}

// GetV1WorkspacesWorkspaceIDPrivateConnectionsKaiWithResponse request returning *GetV1WorkspacesWorkspaceIDPrivateConnectionsKaiResponse
func (c *ClientWithResponses) GetV1WorkspacesWorkspaceIDPrivateConnectionsKaiWithResponse(ctx context.Context, workspaceID openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1WorkspacesWorkspaceIDPrivateConnectionsKaiResponse, error) {
	rsp, err := c.GetV1WorkspacesWorkspaceIDPrivateConnectionsKai(ctx, workspaceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1WorkspacesWorkspaceIDPrivateConnectionsKaiResponse(rsp)
}

// GetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowListWithResponse request returning *GetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowListResponse
func (c *ClientWithResponses) GetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowListWithResponse(ctx context.Context, workspaceID WorkspaceID, reqEditors ...RequestEditorFn) (*GetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowListResponse, error) {
	rsp, err := c.GetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowList(ctx, workspaceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowListResponse(rsp)
}

// PostV1WorkspacesWorkspaceIDResumeWithBodyWithResponse request with arbitrary body returning *PostV1WorkspacesWorkspaceIDResumeResponse
func (c *ClientWithResponses) PostV1WorkspacesWorkspaceIDResumeWithBodyWithResponse(ctx context.Context, workspaceID WorkspaceID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1WorkspacesWorkspaceIDResumeResponse, error) {
	rsp, err := c.PostV1WorkspacesWorkspaceIDResumeWithBody(ctx, workspaceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1WorkspacesWorkspaceIDResumeResponse(rsp)
}

func (c *ClientWithResponses) PostV1WorkspacesWorkspaceIDResumeWithResponse(ctx context.Context, workspaceID WorkspaceID, body PostV1WorkspacesWorkspaceIDResumeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1WorkspacesWorkspaceIDResumeResponse, error) {
	rsp, err := c.PostV1WorkspacesWorkspaceIDResume(ctx, workspaceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1WorkspacesWorkspaceIDResumeResponse(rsp)
}

// PostV1WorkspacesWorkspaceIDSuspendWithResponse request returning *PostV1WorkspacesWorkspaceIDSuspendResponse
func (c *ClientWithResponses) PostV1WorkspacesWorkspaceIDSuspendWithResponse(ctx context.Context, workspaceID WorkspaceID, reqEditors ...RequestEditorFn) (*PostV1WorkspacesWorkspaceIDSuspendResponse, error) {
	rsp, err := c.PostV1WorkspacesWorkspaceIDSuspend(ctx, workspaceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1WorkspacesWorkspaceIDSuspendResponse(rsp)
}

// GetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetricsWithResponse request returning *GetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetricsResponse
func (c *ClientWithResponses) GetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetricsWithResponse(ctx context.Context, organizationID OrganizationID, workspaceGroupID WorkspaceGroupID, reqEditors ...RequestEditorFn) (*GetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetricsResponse, error) {
	rsp, err := c.GetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetrics(ctx, organizationID, workspaceGroupID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetricsResponse(rsp)
}

// GetV2RegionsWithResponse request returning *GetV2RegionsResponse
func (c *ClientWithResponses) GetV2RegionsWithResponse(ctx context.Context, params *GetV2RegionsParams, reqEditors ...RequestEditorFn) (*GetV2RegionsResponse, error) {
	rsp, err := c.GetV2Regions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2RegionsResponse(rsp)
}

// ParseGetV1AuditLogsResponse parses an HTTP response from a GetV1AuditLogsWithResponse call
func ParseGetV1AuditLogsResponse(rsp *http.Response) (*GetV1AuditLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AuditLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AuditLogs *[]AuditLog `json:"auditLogs,omitempty"`

			// NextToken The nextToken value can be used in a subsequent query to guarantee any log entries are new since this query
			NextToken *string `json:"nextToken,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1BillingUsageResponse parses an HTTP response from a GetV1BillingUsageWithResponse call
func ParseGetV1BillingUsageResponse(rsp *http.Response) (*GetV1BillingUsageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1BillingUsageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			BillingUsage *[]BillingUsage `json:"billingUsage,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1FilesFsLocationResponse parses an HTTP response from a GetV1FilesFsLocationWithResponse call
func ParseGetV1FilesFsLocationResponse(rsp *http.Response) (*GetV1FilesFsLocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1FilesFsLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FileObjectMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1FilesFsLocationPathResponse parses an HTTP response from a DeleteV1FilesFsLocationPathWithResponse call
func ParseDeleteV1FilesFsLocationPathResponse(rsp *http.Response) (*DeleteV1FilesFsLocationPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1FilesFsLocationPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Name filename.ipynb
			Name *string `json:"name,omitempty"`

			// Path /
			Path *string `json:"path,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1FilesFsLocationPathResponse parses an HTTP response from a GetV1FilesFsLocationPathWithResponse call
func ParseGetV1FilesFsLocationPathResponse(rsp *http.Response) (*GetV1FilesFsLocationPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1FilesFsLocationPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FileObjectMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV1FilesFsLocationPathResponse parses an HTTP response from a PatchV1FilesFsLocationPathWithResponse call
func ParsePatchV1FilesFsLocationPathResponse(rsp *http.Response) (*PatchV1FilesFsLocationPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1FilesFsLocationPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Name filename.ipynb
			Name *string `json:"name,omitempty"`

			// Path /
			Path *string `json:"path,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1FilesFsLocationPathResponse parses an HTTP response from a PutV1FilesFsLocationPathWithResponse call
func ParsePutV1FilesFsLocationPathResponse(rsp *http.Response) (*PutV1FilesFsLocationPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1FilesFsLocationPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Name *string `json:"name,omitempty"`
			Path *string `json:"path,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1InvitationsResponse parses an HTTP response from a GetV1InvitationsWithResponse call
func ParseGetV1InvitationsResponse(rsp *http.Response) (*GetV1InvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1InvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserInvitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1InvitationsResponse parses an HTTP response from a PostV1InvitationsWithResponse call
func ParsePostV1InvitationsResponse(rsp *http.Response) (*PostV1InvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1InvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserInvitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1InvitationsInvitationIDResponse parses an HTTP response from a DeleteV1InvitationsInvitationIDWithResponse call
func ParseDeleteV1InvitationsInvitationIDResponse(rsp *http.Response) (*DeleteV1InvitationsInvitationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1InvitationsInvitationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			InvitationID openapi_types.UUID `json:"invitationID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1InvitationsInvitationIDResponse parses an HTTP response from a GetV1InvitationsInvitationIDWithResponse call
func ParseGetV1InvitationsInvitationIDResponse(rsp *http.Response) (*GetV1InvitationsInvitationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1InvitationsInvitationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserInvitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1JobsResponse parses an HTTP response from a PostV1JobsWithResponse call
func ParsePostV1JobsResponse(rsp *http.Response) (*PostV1JobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1JobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Job
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1JobsRuntimesResponse parses an HTTP response from a GetV1JobsRuntimesWithResponse call
func ParseGetV1JobsRuntimesResponse(rsp *http.Response) (*GetV1JobsRuntimesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1JobsRuntimesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RuntimesResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1JobsJobIDResponse parses an HTTP response from a DeleteV1JobsJobIDWithResponse call
func ParseDeleteV1JobsJobIDResponse(rsp *http.Response) (*DeleteV1JobsJobIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1JobsJobIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest bool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1JobsJobIDResponse parses an HTTP response from a GetV1JobsJobIDWithResponse call
func ParseGetV1JobsJobIDResponse(rsp *http.Response) (*GetV1JobsJobIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1JobsJobIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Job
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1JobsJobIDExecutionsResponse parses an HTTP response from a GetV1JobsJobIDExecutionsWithResponse call
func ParseGetV1JobsJobIDExecutionsResponse(rsp *http.Response) (*GetV1JobsJobIDExecutionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1JobsJobIDExecutionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExecutionsResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1JobsJobIDParametersResponse parses an HTTP response from a GetV1JobsJobIDParametersWithResponse call
func ParseGetV1JobsJobIDParametersResponse(rsp *http.Response) (*GetV1JobsJobIDParametersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1JobsJobIDParametersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []JobParameter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1OrganizationsCurrentResponse parses an HTTP response from a GetV1OrganizationsCurrentWithResponse call
func ParseGetV1OrganizationsCurrentResponse(rsp *http.Response) (*GetV1OrganizationsCurrentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1OrganizationsCurrentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1OrganizationsOrganizationIDAccessControlsResponse parses an HTTP response from a GetV1OrganizationsOrganizationIDAccessControlsWithResponse call
func ParseGetV1OrganizationsOrganizationIDAccessControlsResponse(rsp *http.Response) (*GetV1OrganizationsOrganizationIDAccessControlsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1OrganizationsOrganizationIDAccessControlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV1OrganizationsOrganizationIDAccessControlsResponse parses an HTTP response from a PatchV1OrganizationsOrganizationIDAccessControlsWithResponse call
func ParsePatchV1OrganizationsOrganizationIDAccessControlsResponse(rsp *http.Response) (*PatchV1OrganizationsOrganizationIDAccessControlsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1OrganizationsOrganizationIDAccessControlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostV1PrivateConnectionsResponse parses an HTTP response from a PostV1PrivateConnectionsWithResponse call
func ParsePostV1PrivateConnectionsResponse(rsp *http.Response) (*PostV1PrivateConnectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1PrivateConnectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PrivateConnectionID openapi_types.UUID `json:"privateConnectionID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1PrivateConnectionsConnectionIDResponse parses an HTTP response from a DeleteV1PrivateConnectionsConnectionIDWithResponse call
func ParseDeleteV1PrivateConnectionsConnectionIDResponse(rsp *http.Response) (*DeleteV1PrivateConnectionsConnectionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1PrivateConnectionsConnectionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PrivateConnectionID openapi_types.UUID `json:"privateConnectionID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1PrivateConnectionsConnectionIDResponse parses an HTTP response from a GetV1PrivateConnectionsConnectionIDWithResponse call
func ParseGetV1PrivateConnectionsConnectionIDResponse(rsp *http.Response) (*GetV1PrivateConnectionsConnectionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1PrivateConnectionsConnectionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrivateConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV1PrivateConnectionsConnectionIDResponse parses an HTTP response from a PatchV1PrivateConnectionsConnectionIDWithResponse call
func ParsePatchV1PrivateConnectionsConnectionIDResponse(rsp *http.Response) (*PatchV1PrivateConnectionsConnectionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1PrivateConnectionsConnectionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PrivateConnectionID openapi_types.UUID `json:"privateConnectionID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1RegionsResponse parses an HTTP response from a GetV1RegionsWithResponse call
func ParseGetV1RegionsResponse(rsp *http.Response) (*GetV1RegionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1RegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Region
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1RegionsSharedtierResponse parses an HTTP response from a GetV1RegionsSharedtierWithResponse call
func ParseGetV1RegionsSharedtierResponse(rsp *http.Response) (*GetV1RegionsSharedtierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1RegionsSharedtierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RegionV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1RolesResourceTypeResponse parses an HTTP response from a GetV1RolesResourceTypeWithResponse call
func ParseGetV1RolesResourceTypeResponse(rsp *http.Response) (*GetV1RolesResourceTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1RolesResourceTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleDefinition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1RolesResourceTypeResponse parses an HTTP response from a PostV1RolesResourceTypeWithResponse call
func ParsePostV1RolesResourceTypeResponse(rsp *http.Response) (*PostV1RolesResourceTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1RolesResourceTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleDefinition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1RolesResourceTypeRoleResponse parses an HTTP response from a DeleteV1RolesResourceTypeRoleWithResponse call
func ParseDeleteV1RolesResourceTypeRoleResponse(rsp *http.Response) (*DeleteV1RolesResourceTypeRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1RolesResourceTypeRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest bool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1RolesResourceTypeRoleResponse parses an HTTP response from a GetV1RolesResourceTypeRoleWithResponse call
func ParseGetV1RolesResourceTypeRoleResponse(rsp *http.Response) (*GetV1RolesResourceTypeRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1RolesResourceTypeRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleDefinition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1RolesResourceTypeRoleResponse parses an HTTP response from a PutV1RolesResourceTypeRoleWithResponse call
func ParsePutV1RolesResourceTypeRoleResponse(rsp *http.Response) (*PutV1RolesResourceTypeRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1RolesResourceTypeRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleDefinition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1SecretsResponse parses an HTTP response from a GetV1SecretsWithResponse call
func ParseGetV1SecretsResponse(rsp *http.Response) (*GetV1SecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1SecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1SecretsResponse parses an HTTP response from a PostV1SecretsWithResponse call
func ParsePostV1SecretsResponse(rsp *http.Response) (*PostV1SecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1SecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1SecretsSecretIDResponse parses an HTTP response from a DeleteV1SecretsSecretIDWithResponse call
func ParseDeleteV1SecretsSecretIDResponse(rsp *http.Response) (*DeleteV1SecretsSecretIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1SecretsSecretIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			SecretID openapi_types.UUID `json:"secretID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1SecretsSecretIDResponse parses an HTTP response from a GetV1SecretsSecretIDWithResponse call
func ParseGetV1SecretsSecretIDResponse(rsp *http.Response) (*GetV1SecretsSecretIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1SecretsSecretIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV1SecretsSecretIDResponse parses an HTTP response from a PatchV1SecretsSecretIDWithResponse call
func ParsePatchV1SecretsSecretIDResponse(rsp *http.Response) (*PatchV1SecretsSecretIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1SecretsSecretIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Secret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1SecretsSecretIDAccessControlsResponse parses an HTTP response from a GetV1SecretsSecretIDAccessControlsWithResponse call
func ParseGetV1SecretsSecretIDAccessControlsResponse(rsp *http.Response) (*GetV1SecretsSecretIDAccessControlsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1SecretsSecretIDAccessControlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV1SecretsSecretIDAccessControlsResponse parses an HTTP response from a PatchV1SecretsSecretIDAccessControlsWithResponse call
func ParsePatchV1SecretsSecretIDAccessControlsResponse(rsp *http.Response) (*PatchV1SecretsSecretIDAccessControlsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1SecretsSecretIDAccessControlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1SharedtierVirtualWorkspacesResponse parses an HTTP response from a GetV1SharedtierVirtualWorkspacesWithResponse call
func ParseGetV1SharedtierVirtualWorkspacesResponse(rsp *http.Response) (*GetV1SharedtierVirtualWorkspacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1SharedtierVirtualWorkspacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SharedTierVirtualWorkspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1SharedtierVirtualWorkspacesResponse parses an HTTP response from a PostV1SharedtierVirtualWorkspacesWithResponse call
func ParsePostV1SharedtierVirtualWorkspacesResponse(rsp *http.Response) (*PostV1SharedtierVirtualWorkspacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1SharedtierVirtualWorkspacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			VirtualWorkspaceID openapi_types.UUID `json:"virtualWorkspaceID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse parses an HTTP response from a DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDWithResponse call
func ParseDeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse(rsp *http.Response) (*DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest bool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse parses an HTTP response from a GetV1SharedtierVirtualWorkspacesVirtualWorkspaceIDWithResponse call
func ParseGetV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse(rsp *http.Response) (*GetV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1SharedtierVirtualWorkspacesVirtualWorkspaceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SharedTierVirtualWorkspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersResponse parses an HTTP response from a PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersWithResponse call
func ParsePostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersResponse(rsp *http.Response) (*PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Password string             `json:"password"`
			UserID   openapi_types.UUID `json:"userID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse parses an HTTP response from a DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDWithResponse call
func ParseDeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse(rsp *http.Response) (*DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest bool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse parses an HTTP response from a PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDWithResponse call
func ParsePatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse(rsp *http.Response) (*PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1SharedtierVirtualWorkspacesVirtualWorkspaceIDUsersUserIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest bool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1StageDeploymentIDFsResponse parses an HTTP response from a GetV1StageDeploymentIDFsWithResponse call
func ParseGetV1StageDeploymentIDFsResponse(rsp *http.Response) (*GetV1StageDeploymentIDFsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1StageDeploymentIDFsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FileObjectMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1StageDeploymentIDFsPathResponse parses an HTTP response from a DeleteV1StageDeploymentIDFsPathWithResponse call
func ParseDeleteV1StageDeploymentIDFsPathResponse(rsp *http.Response) (*DeleteV1StageDeploymentIDFsPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1StageDeploymentIDFsPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Name sample_file.txt
			Name *string `json:"name,omitempty"`

			// Path parent_folder/sample_file.txt
			Path *string `json:"path,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1StageDeploymentIDFsPathResponse parses an HTTP response from a GetV1StageDeploymentIDFsPathWithResponse call
func ParseGetV1StageDeploymentIDFsPathResponse(rsp *http.Response) (*GetV1StageDeploymentIDFsPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1StageDeploymentIDFsPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FileObjectMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV1StageDeploymentIDFsPathResponse parses an HTTP response from a PatchV1StageDeploymentIDFsPathWithResponse call
func ParsePatchV1StageDeploymentIDFsPathResponse(rsp *http.Response) (*PatchV1StageDeploymentIDFsPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1StageDeploymentIDFsPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Name sample_file.txt
			Name *string `json:"name,omitempty"`

			// Path parent_folder/sample_file.txt
			Path *string `json:"path,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1StageDeploymentIDFsPathResponse parses an HTTP response from a PutV1StageDeploymentIDFsPathWithResponse call
func ParsePutV1StageDeploymentIDFsPathResponse(rsp *http.Response) (*PutV1StageDeploymentIDFsPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1StageDeploymentIDFsPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Name *string `json:"name,omitempty"`
			Path *string `json:"path,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1TeamsResponse parses an HTTP response from a GetV1TeamsWithResponse call
func ParseGetV1TeamsResponse(rsp *http.Response) (*GetV1TeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1TeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1TeamsResponse parses an HTTP response from a PostV1TeamsWithResponse call
func ParsePostV1TeamsResponse(rsp *http.Response) (*PostV1TeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1TeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1TeamsTeamIDResponse parses an HTTP response from a DeleteV1TeamsTeamIDWithResponse call
func ParseDeleteV1TeamsTeamIDResponse(rsp *http.Response) (*DeleteV1TeamsTeamIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1TeamsTeamIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			TeamID openapi_types.UUID `json:"teamID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1TeamsTeamIDResponse parses an HTTP response from a GetV1TeamsTeamIDWithResponse call
func ParseGetV1TeamsTeamIDResponse(rsp *http.Response) (*GetV1TeamsTeamIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1TeamsTeamIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV1TeamsTeamIDResponse parses an HTTP response from a PatchV1TeamsTeamIDWithResponse call
func ParsePatchV1TeamsTeamIDResponse(rsp *http.Response) (*PatchV1TeamsTeamIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1TeamsTeamIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			TeamID openapi_types.UUID `json:"teamID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1TeamsTeamIDAccessControlsResponse parses an HTTP response from a GetV1TeamsTeamIDAccessControlsWithResponse call
func ParseGetV1TeamsTeamIDAccessControlsResponse(rsp *http.Response) (*GetV1TeamsTeamIDAccessControlsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1TeamsTeamIDAccessControlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV1TeamsTeamIDAccessControlsResponse parses an HTTP response from a PatchV1TeamsTeamIDAccessControlsWithResponse call
func ParsePatchV1TeamsTeamIDAccessControlsResponse(rsp *http.Response) (*PatchV1TeamsTeamIDAccessControlsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1TeamsTeamIDAccessControlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1TeamsTeamIDIdentityRolesResponse parses an HTTP response from a GetV1TeamsTeamIDIdentityRolesWithResponse call
func ParseGetV1TeamsTeamIDIdentityRolesResponse(rsp *http.Response) (*GetV1TeamsTeamIDIdentityRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1TeamsTeamIDIdentityRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IdentityRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1UsersResponse parses an HTTP response from a GetV1UsersWithResponse call
func ParseGetV1UsersResponse(rsp *http.Response) (*GetV1UsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1UsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1UsersResponse parses an HTTP response from a PostV1UsersWithResponse call
func ParsePostV1UsersResponse(rsp *http.Response) (*PostV1UsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1UsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1UsersCurrentResponse parses an HTTP response from a GetV1UsersCurrentWithResponse call
func ParseGetV1UsersCurrentResponse(rsp *http.Response) (*GetV1UsersCurrentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1UsersCurrentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1UsersUserIDResponse parses an HTTP response from a DeleteV1UsersUserIDWithResponse call
func ParseDeleteV1UsersUserIDResponse(rsp *http.Response) (*DeleteV1UsersUserIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1UsersUserIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			UserID openapi_types.UUID `json:"userID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1UsersUserIDResponse parses an HTTP response from a GetV1UsersUserIDWithResponse call
func ParseGetV1UsersUserIDResponse(rsp *http.Response) (*GetV1UsersUserIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1UsersUserIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1UsersUserIDIdentityRolesResponse parses an HTTP response from a GetV1UsersUserIDIdentityRolesWithResponse call
func ParseGetV1UsersUserIDIdentityRolesResponse(rsp *http.Response) (*GetV1UsersUserIDIdentityRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1UsersUserIDIdentityRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IdentityRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1WorkspaceGroupsResponse parses an HTTP response from a GetV1WorkspaceGroupsWithResponse call
func ParseGetV1WorkspaceGroupsResponse(rsp *http.Response) (*GetV1WorkspaceGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1WorkspaceGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WorkspaceGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1WorkspaceGroupsResponse parses an HTTP response from a PostV1WorkspaceGroupsWithResponse call
func ParsePostV1WorkspaceGroupsResponse(rsp *http.Response) (*PostV1WorkspaceGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1WorkspaceGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdminPassword    *string            `json:"adminPassword,omitempty"`
			WorkspaceGroupID openapi_types.UUID `json:"workspaceGroupID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1WorkspaceGroupsWorkspaceGroupIDResponse parses an HTTP response from a DeleteV1WorkspaceGroupsWorkspaceGroupIDWithResponse call
func ParseDeleteV1WorkspaceGroupsWorkspaceGroupIDResponse(rsp *http.Response) (*DeleteV1WorkspaceGroupsWorkspaceGroupIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1WorkspaceGroupsWorkspaceGroupIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			WorkspaceGroupID openapi_types.UUID `json:"workspaceGroupID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1WorkspaceGroupsWorkspaceGroupIDResponse parses an HTTP response from a GetV1WorkspaceGroupsWorkspaceGroupIDWithResponse call
func ParseGetV1WorkspaceGroupsWorkspaceGroupIDResponse(rsp *http.Response) (*GetV1WorkspaceGroupsWorkspaceGroupIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1WorkspaceGroupsWorkspaceGroupIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV1WorkspaceGroupsWorkspaceGroupIDResponse parses an HTTP response from a PatchV1WorkspaceGroupsWorkspaceGroupIDWithResponse call
func ParsePatchV1WorkspaceGroupsWorkspaceGroupIDResponse(rsp *http.Response) (*PatchV1WorkspaceGroupsWorkspaceGroupIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1WorkspaceGroupsWorkspaceGroupIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			WorkspaceGroupID openapi_types.UUID `json:"workspaceGroupID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse parses an HTTP response from a GetV1WorkspaceGroupsWorkspaceGroupIDAccessControlsWithResponse call
func ParseGetV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse(rsp *http.Response) (*GetV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse parses an HTTP response from a PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsWithResponse call
func ParsePatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse(rsp *http.Response) (*PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1WorkspaceGroupsWorkspaceGroupIDAccessControlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsResponse parses an HTTP response from a GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsWithResponse call
func ParseGetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsResponse(rsp *http.Response) (*GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1WorkspaceGroupsWorkspaceGroupIDPrivateConnectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PrivateConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailbackResponse parses an HTTP response from a PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailbackWithResponse call
func ParsePatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailbackResponse(rsp *http.Response) (*PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailoverResponse parses an HTTP response from a PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailoverWithResponse call
func ParsePatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailoverResponse(rsp *http.Response) (*PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailoverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRFailoverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsResponse parses an HTTP response from a GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsWithResponse call
func ParseGetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsResponse(rsp *http.Response) (*GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRRegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Region
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupResponse parses an HTTP response from a PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupWithResponse call
func ParsePostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupResponse(rsp *http.Response) (*PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1WorkspaceGroupsWorkspaceGroupIDStorageDRSetupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvisionResponse parses an HTTP response from a PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvisionWithResponse call
func ParsePatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvisionResponse(rsp *http.Response) (*PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStartPreProvisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatusResponse parses an HTTP response from a GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatusWithResponse call
func ParseGetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatusResponse(rsp *http.Response) (*GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1WorkspaceGroupsWorkspaceGroupIDStorageDRStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageDRStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvisionResponse parses an HTTP response from a PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvisionWithResponse call
func ParsePatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvisionResponse(rsp *http.Response) (*PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1WorkspaceGroupsWorkspaceGroupIDStorageDRStopPreProvisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodResponse parses an HTTP response from a PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodWithResponse call
func ParsePatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodResponse(rsp *http.Response) (*PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1WorkspaceGroupsWorkspaceGroupIDStorageRetentionPeriodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1WorkspacesResponse parses an HTTP response from a GetV1WorkspacesWithResponse call
func ParseGetV1WorkspacesResponse(rsp *http.Response) (*GetV1WorkspacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1WorkspacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1WorkspacesResponse parses an HTTP response from a PostV1WorkspacesWithResponse call
func ParsePostV1WorkspacesResponse(rsp *http.Response) (*PostV1WorkspacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1WorkspacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			WorkspaceID openapi_types.UUID `json:"workspaceID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1WorkspacesWorkspaceIDResponse parses an HTTP response from a DeleteV1WorkspacesWorkspaceIDWithResponse call
func ParseDeleteV1WorkspacesWorkspaceIDResponse(rsp *http.Response) (*DeleteV1WorkspacesWorkspaceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1WorkspacesWorkspaceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			WorkspaceID openapi_types.UUID `json:"workspaceID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1WorkspacesWorkspaceIDResponse parses an HTTP response from a GetV1WorkspacesWorkspaceIDWithResponse call
func ParseGetV1WorkspacesWorkspaceIDResponse(rsp *http.Response) (*GetV1WorkspacesWorkspaceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1WorkspacesWorkspaceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV1WorkspacesWorkspaceIDResponse parses an HTTP response from a PatchV1WorkspacesWorkspaceIDWithResponse call
func ParsePatchV1WorkspacesWorkspaceIDResponse(rsp *http.Response) (*PatchV1WorkspacesWorkspaceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1WorkspacesWorkspaceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			WorkspaceID openapi_types.UUID `json:"workspaceID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1WorkspacesWorkspaceIDPrivateConnectionsResponse parses an HTTP response from a GetV1WorkspacesWorkspaceIDPrivateConnectionsWithResponse call
func ParseGetV1WorkspacesWorkspaceIDPrivateConnectionsResponse(rsp *http.Response) (*GetV1WorkspacesWorkspaceIDPrivateConnectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1WorkspacesWorkspaceIDPrivateConnectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PrivateConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1WorkspacesWorkspaceIDPrivateConnectionsKaiResponse parses an HTTP response from a GetV1WorkspacesWorkspaceIDPrivateConnectionsKaiWithResponse call
func ParseGetV1WorkspacesWorkspaceIDPrivateConnectionsKaiResponse(rsp *http.Response) (*GetV1WorkspacesWorkspaceIDPrivateConnectionsKaiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1WorkspacesWorkspaceIDPrivateConnectionsKaiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrivateConnectionKaiInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowListResponse parses an HTTP response from a GetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowListWithResponse call
func ParseGetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowListResponse(rsp *http.Response) (*GetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1WorkspacesWorkspaceIDPrivateConnectionsOutboundAllowListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PrivateConnectionOutboundAllowList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1WorkspacesWorkspaceIDResumeResponse parses an HTTP response from a PostV1WorkspacesWorkspaceIDResumeWithResponse call
func ParsePostV1WorkspacesWorkspaceIDResumeResponse(rsp *http.Response) (*PostV1WorkspacesWorkspaceIDResumeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1WorkspacesWorkspaceIDResumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			WorkspaceID openapi_types.UUID `json:"workspaceID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1WorkspacesWorkspaceIDSuspendResponse parses an HTTP response from a PostV1WorkspacesWorkspaceIDSuspendWithResponse call
func ParsePostV1WorkspacesWorkspaceIDSuspendResponse(rsp *http.Response) (*PostV1WorkspacesWorkspaceIDSuspendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1WorkspacesWorkspaceIDSuspendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			WorkspaceID openapi_types.UUID `json:"workspaceID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetricsResponse parses an HTTP response from a GetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetricsWithResponse call
func ParseGetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetricsResponse(rsp *http.Response) (*GetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2OrganizationsOrganizationIDWorkspaceGroupsWorkspaceGroupIDMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2RegionsResponse parses an HTTP response from a GetV2RegionsWithResponse call
func ParseGetV2RegionsResponse(rsp *http.Response) (*GetV2RegionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2RegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RegionV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
